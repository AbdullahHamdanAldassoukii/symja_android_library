package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface TanRules {
  final public static IAST RULES = List(
    ISet(Tan(C0),
      C0),
    ISet(Tan(Times(QQ(1L,12L),Pi)),
      Plus(C2,Times(CN1,CSqrt3))),
    ISet(Tan(Times(QQ(1L,10L),Pi)),
      Sqrt(Plus(C1,Times(CN2,C1DSqrt5)))),
    ISet(Tan(Times(QQ(1L,8L),Pi)),
      Plus(CN1,CSqrt2)),
    ISet(Tan(Times(QQ(1L,6L),Pi)),
      C1DSqrt3),
    ISet(Tan(Times(QQ(1L,5L),Pi)),
      Sqrt(Plus(C5,Times(CN2,CSqrt5)))),
    ISet(Tan(Times(C1D4,Pi)),
      C1),
    ISet(Tan(Times(QQ(3L,10L),Pi)),
      Sqrt(Plus(C1,Times(C2,C1DSqrt5)))),
    ISet(Tan(Times(C1D3,Pi)),
      CSqrt3),
    ISet(Tan(Times(QQ(3L,8L),Pi)),
      Plus(C1,CSqrt2)),
    ISet(Tan(Times(QQ(2L,5L),Pi)),
      Sqrt(Plus(C5,Times(C2,CSqrt5)))),
    ISet(Tan(Times(QQ(5L,12L),Pi)),
      Plus(C2,CSqrt3)),
    ISet(Tan(Times(C1D2,Pi)),
      CComplexInfinity),
    ISet(Tan(Times(QQ(7L,12L),Pi)),
      Plus(CN2,Times(CN1,CSqrt3))),
    ISet(Tan(Times(QQ(3L,5L),Pi)),
      Times(CN1,Sqrt(Plus(C5,Times(C2,CSqrt5))))),
    ISet(Tan(Times(QQ(5L,8L),Pi)),
      Plus(CN1,Times(CN1,CSqrt2))),
    ISet(Tan(Times(QQ(2L,3L),Pi)),
      Times(CN1,CSqrt3)),
    ISet(Tan(Times(QQ(7L,10L),Pi)),
      Times(CN1,Sqrt(Plus(C1,Times(C2,C1DSqrt5))))),
    ISet(Tan(Times(QQ(3L,4L),Pi)),
      CN1),
    ISet(Tan(Times(QQ(4L,5L),Pi)),
      Times(CN1,Sqrt(Plus(C5,Times(CN2,CSqrt5))))),
    ISet(Tan(Times(QQ(5L,6L),Pi)),
      Times(CN1,C1DSqrt3)),
    ISet(Tan(Times(QQ(7L,8L),Pi)),
      Plus(C1,Times(CN1,CSqrt2))),
    ISet(Tan(Times(QQ(9L,10L),Pi)),
      Times(CN1,Sqrt(Plus(C1,Times(CN2,C1DSqrt5))))),
    ISet(Tan(Times(QQ(11L,12L),Pi)),
      Plus(CN2,CSqrt3)),
    ISet(Tan(Pi),
      C0),
    ISet(Tan(CI),
      Times(CI,Tanh(C1))),
    ISetDelayed(Tan(ArcSin(x_)),
      Times(x,Power(Plus(C1,Times(CN1,Sqr(x))),Power(C1D2,CN1)))),
    ISetDelayed(Tan(Times(Pi,$p(x,NumberQ))),
      Condition(If(Less(x,C1),Times(CN1,Tan(Times(Plus(C1,Times(CN1,x)),Pi))),If(Less(x,C2),Tan(Times(Plus(x,Times(CN1,C1)),Pi)),Tan(Times(Plus(x,Times(CN1,C2,Quotient(IntegerPart(x),C2))),Pi)))),Greater(x,C1D2))),
    ISetDelayed(Tan(ArcTan(x_)),
      x),
    ISetDelayed(Tan(ArcCos(x_)),
      Times(Sqrt(Plus(C1,Times(CN1,Sqr(x)))),Power(x,CN1))),
    ISetDelayed(Tan(ArcCot(x_)),
      Power(x,CN1)),
    ISet(Tan(DirectedInfinity(CI)),
      CI),
    ISet(Tan(DirectedInfinity(CNI)),
      CNI),
    ISet(Tan(CComplexInfinity),
      Indeterminate)
  );
}
