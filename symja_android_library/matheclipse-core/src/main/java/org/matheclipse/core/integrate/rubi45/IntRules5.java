package org.matheclipse.core.integrate.rubi45;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctions.*;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;

/** 
 * IndefiniteIntegrationRules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IntRules5 { 
  public static IAST RULES = List( 
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Times(Log(RemoveContent(Plus(a,Times(b,Power(x,pn))),x)),Power(Times(b,pn),CN1)),And(FreeQ(List(a,b,m,pn),x),ZeroQ(Plus(m,Times(CN1,pn),C1))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_)),x_Symbol),
    Condition(Times(Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Times(b,pn,Plus(p,C1)),CN1)),And(And(FreeQ(List(a,b,m,pn,p),x),ZeroQ(Plus(m,Times(CN1,pn),C1))),NonzeroQ(Plus(p,C1))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Times(Power(Times(c,x),Plus(m,C1)),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Times(a,c,Plus(m,C1)),CN1)),And(And(And(FreeQ(List(a,b,c,m,pn,p),x),NonzeroQ(Plus(m,Times(CN1,pn),C1))),ZeroQ(Plus(m,Times(pn,p),pn,C1))),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Sqr(Plus(a_,Times(b_DEFAULT,Power(x_,pn_)))),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(Times(c,x),m),Sqr(Plus(a,Times(b,Power(x,pn))))),x),x),And(FreeQ(List(a,b,c,m,pn),x),NonzeroQ(Plus(m,Times(C3,pn),C1))))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Times(Power(c,Times(CN1,pn,p)),Int(Times(Power(Times(c,x),Plus(m,Times(pn,p))),Power(Plus(b,Times(a,Power(x,Times(CN1,pn)))),p)),x)),And(And(And(FreeQ(List(a,b,c,m,pn),x),NegQ(pn)),IntegerQ(p)),Or(IntegerQ(pn),PositiveQ(c))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,pn_))),p_)),x_Symbol),
    Condition(Times(Power(pn,CN1),Subst(Int(Times(Power(x,Plus(Simplify(Times(Plus(m,C1),Power(pn,CN1))),Times(CN1,C1))),Power(Plus(a,Times(b,x)),p)),x),x,Power(x,pn))),And(FreeQ(List(a,b,m,pn,p),x),IntegerQ(Simplify(Times(Plus(m,C1),Power(pn,CN1))))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Times(CN1,Power(Times(c,Plus(m,C1)),CN1),Subst(Int(Times(Power(Plus(a,Times(b,Power(x,Times(CN1,pn,Power(Plus(m,C1),CN1))),Power(Power(c,pn),CN1))),p),Power(x,CN2)),x),x,Power(Times(c,x),Times(CN1,Plus(m,C1))))),And(And(And(And(And(And(And(FreeQ(List(a,b,c),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),PositiveIntegerQ(pn)),RationalQ(m,p)),Less(Less(CN1,p),C0)),NegativeIntegerQ(Times(pn,Power(Plus(m,C1),CN1)))),NonzeroQ(Plus(m,C2))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(g,Gcd(Plus(m,C1),pn))),Condition(Times(Power(Times(c,g),CN1),Subst(Int(Times(Power(x,Plus(Times(Plus(m,C1),Power(g,CN1)),Times(CN1,C1))),Power(Plus(a,Times(b,Power(x,Times(pn,Power(g,CN1))),Power(Power(c,pn),CN1))),p)),x),x,Power(Times(c,x),g))),Unequal(g,C1))),And(And(And(And(And(FreeQ(List(a,b,c),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),PositiveIntegerQ(pn)),RationalQ(m,p)),Less(Less(CN1,p),C0)))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(Times(c,x),m),Power(Plus(a,Times(b,Power(x,pn))),p)),x),x),And(And(And(And(And(FreeQ(List(a,b,c,m),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),PositiveIntegerQ(pn,p)),Not(PositiveIntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),Or(Or(Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1)))),LessEqual(Plus(Times(C7,p),Times(C4,Plus(Times(Plus(m,C1),Power(pn,CN1)),Times(CN1,C1)))),C0)),Greater(Plus(p,Times(Plus(m,C1),Power(pn,CN1)),C1),C0))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_)),x_Symbol),
    Condition(Plus(Times(Power(Times(c,x),Plus(m,C1)),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Times(a,c,Plus(m,C1)),CN1)),Times(CN1,b,Plus(m,Times(pn,p),pn,C1),Power(Times(a,Power(c,pn),Plus(m,C1)),CN1),Int(Times(Power(Times(c,x),Plus(m,pn)),Power(Plus(a,Times(b,Power(x,pn))),p)),x))),And(And(And(And(And(And(FreeQ(List(a,b,c,p),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),PositiveIntegerQ(pn)),RationalQ(m)),Less(m,CN1)),NegativeIntegerQ(Times(Plus(m,Times(pn,p),pn,C1),Power(pn,CN1)))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(Times(c,x),Plus(m,C1)),Power(Plus(a,Times(b,Power(x,pn))),p),Power(Times(c,Plus(m,C1)),CN1)),Times(CN1,b,pn,p,Power(Times(Power(c,pn),Plus(m,C1)),CN1),Int(Times(Power(Times(c,x),Plus(m,pn)),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,Times(CN1,C1)))),x))),And(And(And(And(And(And(And(And(FreeQ(List(a,b,c),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),PositiveIntegerQ(pn)),RationalQ(m,p)),Greater(p,C0)),Less(m,CN1)),Not(NegativeIntegerQ(Times(Plus(m,Times(pn,p),pn,C1),Power(pn,CN1))))),Or(IntegerQ(Times(C2,p)),IntegerQ(Plus(p,Times(Plus(m,C1),Power(pn,CN1)))))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(Times(c,x),Plus(m,C1)),Power(Plus(a,Times(b,Power(x,pn))),p),Power(Times(c,Plus(m,Times(pn,p),C1)),CN1)),Times(a,pn,p,Power(Plus(m,Times(pn,p),C1),CN1),Int(Times(Power(Times(c,x),m),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,Times(CN1,C1)))),x))),And(And(And(And(And(And(And(FreeQ(List(a,b,c,m),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),PositiveIntegerQ(pn)),RationalQ(m,p)),Greater(p,C0)),NonzeroQ(Plus(m,Times(pn,p),C1))),Or(IntegerQ(Times(C2,p)),IntegerQ(Plus(p,Times(Plus(m,C1),Power(pn,CN1)))))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(c,Plus(pn,Times(CN1,C1))),Power(Times(c,x),Plus(m,Times(CN1,pn),C1)),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Times(b,pn,Plus(p,C1)),CN1)),Times(CN1,Power(c,pn),Plus(m,Times(CN1,pn),C1),Power(Times(b,pn,Plus(p,C1)),CN1),Int(Times(Power(Times(c,x),Plus(m,Times(CN1,pn))),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1))),x))),And(And(And(And(And(And(And(And(FreeQ(List(a,b,c),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),PositiveIntegerQ(pn)),RationalQ(m,p)),Less(p,CN1)),Greater(Plus(m,C1),pn)),Not(NegativeIntegerQ(Times(Plus(m,Times(pn,p),pn,C1),Power(pn,CN1))))),Or(IntegerQ(Times(C2,p)),IntegerQ(Plus(p,Times(Plus(m,C1),Power(pn,CN1)))))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(CN1,Power(Times(c,x),Plus(m,C1)),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Times(a,c,pn,Plus(p,C1)),CN1)),Times(Plus(m,Times(pn,p),pn,C1),Power(Times(a,pn,Plus(p,C1)),CN1),Int(Times(Power(Times(c,x),m),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1))),x))),And(And(And(And(And(And(FreeQ(List(a,b,c,m),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),PositiveIntegerQ(pn)),RationalQ(m,p)),Less(p,CN1)),Or(IntegerQ(Times(C2,p)),IntegerQ(Plus(p,Times(Plus(m,C1),Power(pn,CN1)))))))),
ISetDelayed(Int(Times(x_,Power(Plus(a_,Times(b_DEFAULT,Power(x_,C3))),CN1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(a,Power(b,CN1)),C3))),Set(s,Denominator(Rt(Times(a,Power(b,CN1)),C3)))),Plus(Times(CN1,Sqr(r),Power(Times(C3,a,s),CN1),Int(Power(Plus(r,Times(s,x)),CN1),x)),Times(Sqr(r),Power(Times(C3,a,s),CN1),Int(Times(Plus(r,Times(s,x)),Power(Plus(Sqr(r),Times(CN1,r,s,x),Times(Sqr(s),Sqr(x))),CN1)),x)))),And(FreeQ(List(a,b),x),PosQ(Times(a,Power(b,CN1)))))),
ISetDelayed(Int(Times(x_,Power(Plus(a_,Times(b_DEFAULT,Power(x_,C3))),CN1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(CN1,a,Power(b,CN1)),C3))),Set(s,Denominator(Rt(Times(CN1,a,Power(b,CN1)),C3)))),Plus(Times(Sqr(r),Power(Times(C3,a,s),CN1),Int(Power(Plus(r,Times(CN1,s,x)),CN1),x)),Times(CN1,Sqr(r),Power(Times(C3,a,s),CN1),Int(Times(Plus(r,Times(CN1,s,x)),Power(Plus(Sqr(r),Times(r,s,x),Times(Sqr(s),Sqr(x))),CN1)),x)))),And(FreeQ(List(a,b),x),NegQ(Times(a,Power(b,CN1)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(a,Power(b,CN1)),pn))),Set(s,Denominator(Rt(Times(a,Power(b,CN1)),pn)))),Int(Plus(Times(CN1,Power(Times(CN1,r),Plus(m,C1)),Power(Times(a,pn,Power(s,m),Plus(r,Times(s,x))),CN1)),Sum(Times(C2,Power(r,Plus(m,C1)),Plus(Times(r,Cos(Times(Plus(Times(C2,k),Times(CN1,C1)),m,Pi,Power(pn,CN1)))),Times(CN1,s,Cos(Times(Plus(Times(C2,k),Times(CN1,C1)),Plus(m,C1),Pi,Power(pn,CN1))),x)),Power(Times(a,pn,Power(s,m),Plus(Sqr(r),Times(CN1,C2,r,s,Cos(Times(Plus(Times(C2,k),Times(CN1,C1)),Pi,Power(pn,CN1))),x),Times(Sqr(s),Sqr(x)))),CN1)),List(k,C1,Times(C1D2,Plus(pn,Times(CN1,C1)))))),x)),And(And(And(And(FreeQ(List(a,b),x),PositiveIntegerQ(m,Times(C1D2,Plus(pn,Times(CN1,C1))))),Less(Less(C0,Plus(m,C1)),pn)),Equal(Gcd(Plus(m,C1),pn),C1)),PosQ(Times(a,Power(b,CN1)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(CN1,a,Power(b,CN1)),pn))),Set(s,Denominator(Rt(Times(CN1,a,Power(b,CN1)),pn)))),Int(Plus(Times(Power(r,Plus(m,C1)),Power(Times(a,pn,Power(s,m),Plus(r,Times(CN1,s,x))),CN1)),Times(CN1,Sum(Times(C2,Power(Times(CN1,r),Plus(m,C1)),Plus(Times(r,Cos(Times(Plus(Times(C2,k),Times(CN1,C1)),m,Pi,Power(pn,CN1)))),Times(s,Cos(Times(Plus(Times(C2,k),Times(CN1,C1)),Plus(m,C1),Pi,Power(pn,CN1))),x)),Power(Times(a,pn,Power(s,m),Plus(Sqr(r),Times(C2,r,s,Cos(Times(Plus(Times(C2,k),Times(CN1,C1)),Pi,Power(pn,CN1))),x),Times(Sqr(s),Sqr(x)))),CN1)),List(k,C1,Times(C1D2,Plus(pn,Times(CN1,C1))))))),x)),And(And(And(And(FreeQ(List(a,b),x),PositiveIntegerQ(m,Times(C1D2,Plus(pn,Times(CN1,C1))))),Less(Less(C0,Plus(m,C1)),pn)),Equal(Gcd(Plus(m,C1),pn),C1)),NegQ(Times(a,Power(b,CN1)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(a,Power(b,CN1)),Times(C1D2,pn)))),Set(s,Denominator(Rt(Times(a,Power(b,CN1)),Times(C1D2,pn))))),Plus(Times(CN2,Power(Times(CN1,r),Plus(Times(C1D2,m),C1)),Power(Times(a,pn,Power(s,Times(C1D2,m))),CN1),Int(Power(Plus(r,Times(s,Sqr(x))),CN1),x)),Times(C4,Power(r,Plus(Times(C1D2,m),C1)),Power(Times(a,pn,Power(s,Times(C1D2,m))),CN1),Int(Sum(Times(Plus(Times(r,Cos(Times(Plus(Times(C2,k),Times(CN1,C1)),m,Pi,Power(pn,CN1)))),Times(CN1,s,Cos(Times(Plus(Times(C2,k),Times(CN1,C1)),Plus(m,C2),Pi,Power(pn,CN1))),Sqr(x))),Power(Plus(Sqr(r),Times(CN1,C2,r,s,Cos(Times(C2,Plus(Times(C2,k),Times(CN1,C1)),Pi,Power(pn,CN1))),Sqr(x)),Times(Sqr(s),Power(x,C4))),CN1)),List(k,C1,Times(C1D4,Plus(pn,Times(CN1,C2))))),x)))),And(And(And(And(FreeQ(List(a,b),x),PositiveIntegerQ(m,Times(C1D4,Plus(pn,Times(CN1,C2))))),Less(Less(C0,Plus(m,C1)),pn)),Equal(Gcd(Plus(m,C1),pn),C1)),PosQ(Times(a,Power(b,CN1)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(CN1,a,Power(b,CN1)),Times(C1D2,pn)))),Set(s,Denominator(Rt(Times(CN1,a,Power(b,CN1)),Times(C1D2,pn))))),Plus(Times(C2,Power(r,Plus(Times(C1D2,m),C1)),Power(Times(a,pn,Power(s,Times(C1D2,m))),CN1),Int(Power(Plus(r,Times(CN1,s,Sqr(x))),CN1),x)),Times(C4,Power(r,Plus(Times(C1D2,m),C1)),Power(Times(a,pn,Power(s,Times(C1D2,m))),CN1),Int(Sum(Times(Plus(Times(r,Cos(Times(C2,k,m,Pi,Power(pn,CN1)))),Times(CN1,s,Cos(Times(C2,k,Plus(m,C2),Pi,Power(pn,CN1))),Sqr(x))),Power(Plus(Sqr(r),Times(CN1,C2,r,s,Cos(Times(C4,k,Pi,Power(pn,CN1))),Sqr(x)),Times(Sqr(s),Power(x,C4))),CN1)),List(k,C1,Times(C1D4,Plus(pn,Times(CN1,C2))))),x)))),And(And(And(And(FreeQ(List(a,b),x),PositiveIntegerQ(m,Times(C1D4,Plus(pn,Times(CN1,C2))))),Less(Less(C0,Plus(m,C1)),pn)),Equal(Gcd(Plus(m,C1),pn),C1)),NegQ(Times(a,Power(b,CN1)))))),
ISetDelayed(Int(Times(Sqr(x_),Power(Plus(a_,Times(b_DEFAULT,Power(x_,C4))),CN1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(a,Power(b,CN1)),C2))),Set(s,Denominator(Rt(Times(a,Power(b,CN1)),C2)))),Plus(Times(Power(Times(C2,s),CN1),Int(Times(Plus(r,Times(s,Sqr(x))),Power(Plus(a,Times(b,Power(x,C4))),CN1)),x)),Times(CN1,Power(Times(C2,s),CN1),Int(Times(Plus(r,Times(CN1,s,Sqr(x))),Power(Plus(a,Times(b,Power(x,C4))),CN1)),x)))),And(FreeQ(List(a,b),x),Or(PositiveQ(Times(a,Power(b,CN1))),And(And(PosQ(Times(a,Power(b,CN1))),NonsumQ(a)),NonsumQ(b)))))),
ISetDelayed(Int(Times(Sqr(x_),Power(Plus(a_,Times(b_DEFAULT,Power(x_,C4))),CN1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(CN1,a,Power(b,CN1)),C2))),Set(s,Denominator(Rt(Times(CN1,a,Power(b,CN1)),C2)))),Plus(Times(s,Power(Times(C2,b),CN1),Int(Power(Plus(r,Times(s,Sqr(x))),CN1),x)),Times(CN1,s,Power(Times(C2,b),CN1),Int(Power(Plus(r,Times(CN1,s,Sqr(x))),CN1),x)))),And(FreeQ(List(a,b),x),Not(PositiveQ(Times(a,Power(b,CN1))))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(a,Power(b,CN1)),C4))),Set(s,Denominator(Rt(Times(a,Power(b,CN1)),C4)))),Plus(Times(Power(s,C3),Power(Times(C2,CSqrt2,b,r),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1D4,pn))),Power(Plus(Sqr(r),Times(CN1,CSqrt2,r,s,Power(x,Times(C1D4,pn))),Times(Sqr(s),Power(x,Times(C1D2,pn)))),CN1)),x)),Times(CN1,Power(s,C3),Power(Times(C2,CSqrt2,b,r),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1D4,pn))),Power(Plus(Sqr(r),Times(CSqrt2,r,s,Power(x,Times(C1D4,pn))),Times(Sqr(s),Power(x,Times(C1D2,pn)))),CN1)),x)))),And(And(And(And(FreeQ(List(a,b),x),PositiveIntegerQ(m,Times(C1D4,pn))),Less(Less(C0,Plus(m,C1)),pn)),Equal(Gcd(Plus(m,C1),pn),C1)),PositiveQ(Times(a,Power(b,CN1)))))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(CN1,a,Power(b,CN1)),C2))),Set(s,Denominator(Rt(Times(CN1,a,Power(b,CN1)),C2)))),Plus(Times(r,Power(Times(C2,a),CN1),Int(Times(Power(x,m),Power(Plus(r,Times(s,Power(x,Times(C1D2,pn)))),CN1)),x)),Times(r,Power(Times(C2,a),CN1),Int(Times(Power(x,m),Power(Plus(r,Times(CN1,s,Power(x,Times(C1D2,pn)))),CN1)),x)))),And(And(And(And(FreeQ(List(a,b),x),PositiveIntegerQ(m,Times(C1D4,pn))),Less(Less(C0,m),Times(C1D2,pn))),Equal(Gcd(Plus(m,C1),pn),C1)),Not(PositiveQ(Times(a,Power(b,CN1))))))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(CN1,a,Power(b,CN1)),C2))),Set(s,Denominator(Rt(Times(CN1,a,Power(b,CN1)),C2)))),Plus(Times(s,Power(Times(C2,b),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1D2,pn))),Power(Plus(r,Times(s,Power(x,Times(C1D2,pn)))),CN1)),x)),Times(CN1,s,Power(Times(C2,b),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1D2,pn))),Power(Plus(r,Times(CN1,s,Power(x,Times(C1D2,pn)))),CN1)),x)))),And(And(And(And(FreeQ(List(a,b),x),PositiveIntegerQ(m,Times(C1D4,pn))),And(LessEqual(Times(C1D2,pn),m),Less(m,pn))),Equal(Gcd(Plus(m,C1),pn),C1)),Not(PositiveQ(Times(a,Power(b,CN1))))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(g,Gcd(Plus(m,C1),pn))),Condition(Times(Power(c,Plus(pn,Times(CN1,C1))),Power(g,CN1),Subst(Int(Times(Power(x,Plus(Times(Plus(m,C1),Power(g,CN1)),Times(CN1,C1))),Power(Plus(Times(a,Power(c,pn)),Times(b,Power(x,Times(pn,Power(g,CN1))))),CN1)),x),x,Power(Times(c,x),g))),Unequal(g,C1))),And(And(And(FreeQ(List(a,b,c),x),PositiveIntegerQ(pn)),RationalQ(m)),Less(Less(C0,Plus(m,C1)),pn)))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Int(PolynomialDivide(Power(x,m),Plus(a,Times(b,Power(x,pn))),x),x),And(And(FreeQ(List(a,b),x),PositiveIntegerQ(m,pn)),Less(Times(C2,pn),Plus(m,C1))))),
ISetDelayed(Int(Times(Plus(c_DEFAULT,Times(x_,pd_DEFAULT)),Power(Plus(a_,Times(b_DEFAULT,Power(x_,C3))),CN1D2)),x_Symbol),
    Condition(Times(Sqrt(Plus(Power(a,C1D3),Times(Power(b,C1D3),x))),Sqrt(Plus(Times(Power(a,C1D3),Sqrt(Times(CN3,Power(b,QQ(2L,3L))))),Times(Power(a,C1D3),Power(b,C1D3)),Times(CN1,C2,Power(b,QQ(2L,3L)),x))),Sqrt(Plus(Times(Power(a,C1D3),Sqrt(Times(CN3,Power(b,QQ(2L,3L))))),Times(CN1,Power(a,C1D3),Power(b,C1D3)),Times(C2,Power(b,QQ(2L,3L)),x))),Power(Plus(a,Times(b,Power(x,C3))),CN1D2),Int(Times(Plus(c,Times(pd,x)),Power(Times(Sqrt(Plus(Power(a,C1D3),Times(Power(b,C1D3),x))),Sqrt(Plus(Times(Power(a,C1D3),Sqrt(Times(CN3,Power(b,QQ(2L,3L))))),Times(Power(a,C1D3),Power(b,C1D3)),Times(CN1,C2,Power(b,QQ(2L,3L)),x))),Sqrt(Plus(Times(Power(a,C1D3),Sqrt(Times(CN3,Power(b,QQ(2L,3L))))),Times(CN1,Power(a,C1D3),Power(b,C1D3)),Times(C2,Power(b,QQ(2L,3L)),x)))),CN1)),x)),And(FreeQ(List(a,b,c,pd),x),PosQ(b)))),
ISetDelayed(Int(Times(Plus(c_DEFAULT,Times(x_,pd_DEFAULT)),Power(Plus(a_,Times(b_DEFAULT,Power(x_,C3))),CN1D2)),x_Symbol),
    Condition(Times(Sqrt(Plus(Power(a,C1D3),Times(CN1,Power(Times(CN1,b),C1D3),x))),Sqrt(Plus(Times(Power(a,C1D3),Sqrt(Times(CN3,Power(Times(CN1,b),QQ(2L,3L))))),Times(CN1,Power(a,C1D3),Power(Times(CN1,b),C1D3)),Times(CN1,C2,Power(Times(CN1,b),QQ(2L,3L)),x))),Sqrt(Plus(Times(Power(a,C1D3),Sqrt(Times(CN3,Power(Times(CN1,b),QQ(2L,3L))))),Times(Power(a,C1D3),Power(Times(CN1,b),C1D3)),Times(C2,Power(Times(CN1,b),QQ(2L,3L)),x))),Power(Plus(a,Times(b,Power(x,C3))),CN1D2),Int(Times(Plus(c,Times(pd,x)),Power(Times(Sqrt(Plus(Power(a,C1D3),Times(CN1,Power(Times(CN1,b),C1D3),x))),Sqrt(Plus(Times(Power(a,C1D3),Sqrt(Times(CN3,Power(Times(CN1,b),QQ(2L,3L))))),Times(CN1,Power(a,C1D3),Power(Times(CN1,b),C1D3)),Times(CN1,C2,Power(Times(CN1,b),QQ(2L,3L)),x))),Sqrt(Plus(Times(Power(a,C1D3),Sqrt(Times(CN3,Power(Times(CN1,b),QQ(2L,3L))))),Times(Power(a,C1D3),Power(Times(CN1,b),C1D3)),Times(C2,Power(Times(CN1,b),QQ(2L,3L)),x)))),CN1)),x)),And(FreeQ(List(a,b,c,pd),x),NegQ(b)))),
ISetDelayed(Int(Times(Plus(c_DEFAULT,Times(pd_DEFAULT,Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,C4))),CN1D2)),x_Symbol),
    Condition(Plus(Times(Plus(Times(Rt(Times(CN1,b),C2),c),Times(CN1,Sqrt(a),pd)),Power(Rt(Times(CN1,b),C2),CN1),Int(Power(Times(Sqrt(Plus(Sqrt(a),Times(Rt(Times(CN1,b),C2),Sqr(x)))),Sqrt(Plus(Sqrt(a),Times(CN1,Rt(Times(CN1,b),C2),Sqr(x))))),CN1),x)),Times(pd,Power(Rt(Times(CN1,b),C2),CN1),Int(Times(Sqrt(Plus(Sqrt(a),Times(Rt(Times(CN1,b),C2),Sqr(x)))),Power(Plus(Sqrt(a),Times(CN1,Rt(Times(CN1,b),C2),Sqr(x))),CN1D2)),x))),And(FreeQ(List(a,b,c,pd),x),PositiveQ(a)))),
ISetDelayed(Int(Times(Plus(c_DEFAULT,Times(pd_DEFAULT,Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,C4))),CN1D2)),x_Symbol),
    Condition(Times(Sqrt(Times(Plus(a,Times(b,Power(x,C4))),Power(a,CN1))),Power(Plus(a,Times(b,Power(x,C4))),CN1D2),Int(Times(Plus(c,Times(pd,Sqr(x))),Power(Plus(C1,Times(b,Power(x,C4),Power(a,CN1))),CN1D2)),x)),And(FreeQ(List(a,b,c,pd),x),Not(PositiveQ(a))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_)),x_Symbol),
    Condition(Plus(Times(Power(c,Plus(pn,Times(CN1,C1))),Power(Times(c,x),Plus(m,Times(CN1,pn),C1)),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Times(b,Plus(m,Times(pn,p),C1)),CN1)),Times(CN1,a,Power(c,pn),Plus(m,Times(CN1,pn),C1),Power(Times(b,Plus(m,Times(pn,p),C1)),CN1),Int(Times(Power(Times(c,x),Plus(m,Times(CN1,pn))),Power(Plus(a,Times(b,Power(x,pn))),p)),x))),And(And(And(And(And(And(And(FreeQ(List(a,b,c,p),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),PositiveIntegerQ(pn)),RationalQ(m)),Greater(m,Plus(pn,Times(CN1,C1)))),NonzeroQ(Plus(m,Times(pn,p),C1))),Or(IntegerQ(Times(C2,p)),IntegerQ(Plus(p,Times(Plus(m,C1),Power(pn,CN1)))))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_)),x_Symbol),
    Condition(Plus(Times(Power(Times(c,x),Plus(m,C1)),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Times(a,c,Plus(m,C1)),CN1)),Times(CN1,b,Plus(m,Times(pn,p),pn,C1),Power(Times(a,Power(c,pn),Plus(m,C1)),CN1),Int(Times(Power(Times(c,x),Plus(m,pn)),Power(Plus(a,Times(b,Power(x,pn))),p)),x))),And(And(And(And(And(And(FreeQ(List(a,b,c,p),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),PositiveIntegerQ(pn)),RationalQ(m)),Less(m,CN1)),Or(IntegerQ(Times(C2,p)),IntegerQ(Plus(p,Times(Plus(m,C1),Power(pn,CN1)))))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(g,Gcd(Plus(m,C1),pn))),Condition(Times(Power(Times(c,g),CN1),Subst(Int(Times(Power(x,Plus(Times(Plus(m,C1),Power(g,CN1)),Times(CN1,C1))),Power(Plus(a,Times(b,Power(x,Times(pn,Power(g,CN1))),Power(Power(c,pn),CN1))),p)),x),x,Power(Times(c,x),g))),Unequal(g,C1))),And(And(And(And(FreeQ(List(a,b,c,p),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),NegativeIntegerQ(pn)),RationalQ(m)))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Times(Power(Plus(a,Times(b,Power(x,pn))),p),Power(Times(Power(Times(c,x),Times(pn,p)),Power(Plus(b,Times(a,Power(x,Times(CN1,pn)))),p)),CN1),Int(Times(Power(Times(c,x),Plus(m,Times(pn,p))),Power(Plus(b,Times(a,Power(x,Times(CN1,pn)))),p)),x)),And(And(And(And(FreeQ(List(a,b,c,m,p),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),NegativeIntegerQ(pn)),Not(IntegerQ(p))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_)),x_Symbol),
    Condition(Times(Power(Plus(m,C1),CN1),Subst(Int(Power(Plus(a,Times(b,Power(x,Simplify(Times(pn,Power(Plus(m,C1),CN1)))))),p),x),x,Power(x,Plus(m,C1)))),And(And(And(And(FreeQ(List(a,b,m,pn,p),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),Not(IntegerQ(pn))),IntegerQ(Simplify(Times(pn,Power(Plus(m,C1),CN1))))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_)),x_Symbol),
    Condition(Module(List(Set(pd,Denominator(pn))),Times(pd,Subst(Int(Times(Power(x,Plus(Times(pd,Plus(m,C1)),Times(CN1,C1))),Power(Plus(a,Times(b,Power(x,Times(pd,pn)))),p)),x),x,Power(x,Power(pd,CN1))))),And(And(And(And(And(FreeQ(List(a,b,m,p),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),Not(IntegerQ(pn))),Not(IntegerQ(Times(pn,Power(Plus(m,C1),CN1))))),FractionQ(pn)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,pn))),p),Power(Plus(m,C1),CN1)),Times(CN1,b,pn,p,Power(Plus(m,C1),CN1),Int(Times(Power(x,Plus(m,pn)),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,Times(CN1,C1)))),x))),And(And(And(And(And(And(And(And(FreeQ(List(a,b,m,pn),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),Not(IntegerQ(pn))),Not(IntegerQ(Times(pn,Power(Plus(m,C1),CN1))))),IntegerQ(Plus(p,Simplify(Times(Plus(m,C1),Power(pn,CN1)))))),RationalQ(p)),Greater(p,C0)),ZeroQ(Plus(m,Times(pn,p),C1))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,pn))),p),Power(Plus(m,Times(pn,p),C1),CN1)),Times(a,pn,p,Power(Plus(m,Times(pn,p),C1),CN1),Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,Times(CN1,C1)))),x))),And(And(And(And(And(And(And(And(FreeQ(List(a,b,m,pn),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),Not(IntegerQ(pn))),Not(IntegerQ(Times(pn,Power(Plus(m,C1),CN1))))),IntegerQ(Plus(p,Simplify(Times(Plus(m,C1),Power(pn,CN1)))))),RationalQ(p)),Greater(p,C0)),NonzeroQ(Plus(m,Times(pn,p),C1))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_)),x_Symbol),
    Condition(Plus(Times(CN1,Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Times(a,pn,Plus(p,C1)),CN1)),Times(Plus(m,Times(pn,p),pn,C1),Power(Times(a,pn,Plus(p,C1)),CN1),Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1))),x))),And(And(And(And(And(And(And(FreeQ(List(a,b,m,pn),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),Not(IntegerQ(pn))),Not(IntegerQ(Times(pn,Power(Plus(m,C1),CN1))))),IntegerQ(Plus(p,Simplify(Times(Plus(m,C1),Power(pn,CN1)))))),RationalQ(p)),Less(p,CN1)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Module(List(Set($s("mn"),Simplify(Plus(m,Times(CN1,pn))))),Plus(Times(Power(x,Plus($s("mn"),C1)),Power(Times(b,Plus($s("mn"),C1)),CN1)),Times(CN1,a,Power(b,CN1),Int(Times(Power(x,$s("mn")),Power(Plus(a,Times(b,Power(x,pn))),CN1)),x)))),And(And(And(And(FreeQ(List(a,b,m,pn),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),Not(IntegerQ(pn))),Not(IntegerQ(Times(pn,Power(Plus(m,C1),CN1))))),SumSimplerQ(m,Times(CN1,pn))))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(Times(a,Plus(m,C1)),CN1)),Times(CN1,b,Power(a,CN1),Int(Times(Power(x,Simplify(Plus(m,pn))),Power(Plus(a,Times(b,Power(x,pn))),CN1)),x))),And(And(And(And(FreeQ(List(a,b,m,pn),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),Not(IntegerQ(pn))),Not(IntegerQ(Times(pn,Power(Plus(m,C1),CN1))))),SumSimplerQ(m,pn)))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_,x_),m_DEFAULT)),x_Symbol),
    Condition(Times(Power(Times(c,x),m),Power(Power(x,m),CN1),Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,pn))),p)),x)),And(And(And(And(FreeQ(List(a,b,c,m,pn,p),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),Not(IntegerQ(pn))),Or(Or(Or(IntegerQ(Simplify(Times(pn,Power(Plus(m,C1),CN1)))),FractionQ(pn)),IntegerQ(Plus(p,Simplify(Times(Plus(m,C1),Power(pn,CN1)))))),ZeroQ(Plus(p,C1)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_)),x_Symbol),
    Condition(Module(List(Set(q,Denominator(p))),Times(q,Power(a,Plus(p,Simplify(Times(Plus(m,C1),Power(pn,CN1))))),Power(pn,CN1),Subst(Int(Times(Power(x,Plus(Times(q,Simplify(Times(Plus(m,C1),Power(pn,CN1)))),Times(CN1,C1))),Power(Power(Plus(C1,Times(CN1,b,Power(x,q))),Plus(p,Simplify(Times(Plus(m,C1),Power(pn,CN1))),C1)),CN1)),x),x,Times(Power(x,Times(pn,Power(q,CN1))),Power(Power(Plus(a,Times(b,Power(x,pn))),Power(q,CN1)),CN1))))),And(And(And(And(FreeQ(List(a,b,m,pn),x),RationalQ(p)),Less(Less(CN1,p),C0)),Unequal(p,CN1D2)),IntegerQ(Plus(p,Simplify(Times(Plus(m,C1),Power(pn,CN1)))))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(Times(c,x),m),Power(Plus(a,Times(b,Power(x,pn))),p)),x),x),And(And(And(FreeQ(List(a,b,c,m,pn),x),Not(IntegerQ(Times(Plus(m,C1),Power(pn,CN1))))),NonzeroQ(Plus(m,Times(pn,p),pn,C1))),PositiveIntegerQ(p)))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Times(Power(a,p),Power(Times(c,x),Plus(m,C1)),Power(Times(c,Plus(m,C1)),CN1),Hypergeometric2F1(Times(CN1,p),Times(Plus(m,C1),Power(pn,CN1)),Plus(Times(Plus(m,C1),Power(pn,CN1)),C1),Times(CN1,b,Power(x,pn),Power(a,CN1)))),And(And(And(And(FreeQ(List(a,b,c,m,pn,p),x),Not(IntegerQ(Simplify(Times(Plus(m,C1),Power(pn,CN1)))))),Not(NegativeIntegerQ(Simplify(Plus(Times(Plus(m,C1),Power(pn,CN1)),p))))),Not(PositiveIntegerQ(p))),Or(NegativeIntegerQ(p),PositiveQ(a))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Times(Power(Times(c,x),Plus(m,C1)),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Times(a,c,Plus(m,C1)),CN1),Hypergeometric2F1(C1,Plus(Times(Plus(m,C1),Power(pn,CN1)),p,C1),Plus(Times(Plus(m,C1),Power(pn,CN1)),C1),Times(CN1,b,Power(x,pn),Power(a,CN1)))),And(And(And(FreeQ(List(a,b,c,m,pn,p),x),Not(IntegerQ(Simplify(Times(Plus(m,C1),Power(pn,CN1)))))),Not(NegativeIntegerQ(Simplify(Plus(Times(Plus(m,C1),Power(pn,CN1)),p))))),Not(PositiveIntegerQ(p))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(v_,pn_))),p_)),x_Symbol),
    Condition(Times(Power(Power(Coefficient(v,x,C1),Plus(m,C1)),CN1),Subst(Int(SimplifyIntegrand(Times(Power(Plus(x,Times(CN1,Coefficient(v,x,C0))),m),Power(Plus(a,Times(b,Power(x,pn))),p)),x),x),x,v)),And(And(And(FreeQ(List(a,b,pn,p),x),LinearQ(v,x)),IntegerQ(m)),NonzeroQ(Plus(v,Times(CN1,x)))))),
ISetDelayed(Int(Times(Power(u_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(v_,pn_))),p_DEFAULT)),x_Symbol),
    Condition(Times(Power(u,m),Power(Times(Coefficient(v,x,C1),Power(v,m)),CN1),Subst(Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,pn))),p)),x),x,v)),And(FreeQ(List(a,b,m,pn,p),x),LinearPairQ(u,v,x)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(Times(pd_DEFAULT,Power(x_,CN1)),pn_))),p_DEFAULT)),x_Symbol),
    Condition(Times(CN1,Power(pd,Plus(m,C1)),Subst(Int(Times(Power(Plus(a,Times(b,Power(x,pn))),p),Power(Power(x,Plus(m,C2)),CN1)),x),x,Times(pd,Power(x,CN1)))),And(FreeQ(List(a,b,pd,pn,p),x),IntegerQ(m)))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(Times(pd_DEFAULT,Power(x_,CN1)),pn_))),p_DEFAULT),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Times(CN1,pd,Power(Times(c,x),m),Power(Times(pd,Power(x,CN1)),m),Subst(Int(Times(Power(Plus(a,Times(b,Power(x,pn))),p),Power(Power(x,Plus(m,C2)),CN1)),x),x,Times(pd,Power(x,CN1)))),And(FreeQ(List(a,b,c,pd,m,pn,p),x),Not(IntegerQ(m))))),
ISetDelayed(Int(Times(Power(u_,p_DEFAULT),Power(Times(c_DEFAULT,x_),m_DEFAULT)),x_Symbol),
    Condition(Int(Times(Power(Times(c,x),m),Power(ExpandToSum(u,x),p)),x),And(And(FreeQ(List(c,m,p),x),BinomialQ(u,x)),Not(BinomialMatchQ(u,x))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(Times(c_DEFAULT,Power(x_,pn_)),q_))),p_DEFAULT)),x_Symbol),
    Condition(Times(Power(x,Plus(m,C1)),Power(Power(Times(c,Power(x,pn)),Times(Plus(m,C1),Power(pn,CN1))),CN1),Subst(Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,Times(pn,q)))),p)),x),x,Power(Times(c,Power(x,pn)),Power(pn,CN1)))),And(And(FreeQ(List(a,b,c,m,pn,p,q),x),IntegerQ(m)),IntegerQ(Times(pn,q)))))
  );
}
