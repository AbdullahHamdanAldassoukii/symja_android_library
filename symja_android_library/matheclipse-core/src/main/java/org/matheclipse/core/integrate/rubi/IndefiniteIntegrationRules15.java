package org.matheclipse.core.integrate.rubi;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctions.*;

import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;
/** 
 * IndefiniteIntegrationRules rules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IndefiniteIntegrationRules15 { 
  public static IAST RULES = List( 
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(a,Plus(p,Times(CN1,Rational(C1,C2)))),Sqrt(Times(CN1,Pi,Power(Plus(p,Times(CN1,Rational(C1,C2))),CN1))),Erfi(Sqrt(Times(CN1,Plus(p,Times(CN1,Rational(C1,C2))),ProductLog(Times(a,Power(x,n)))))),Power(n,CN1)),And(And(And(FreeQ(List(a,m,n),x),IntIntegerQ(Plus(p,Times(CN1,Rational(C1,C2))))),Less(p,C0)),ZeroQ(Plus(m,Times(n,Plus(p,Times(CN1,Rational(C1,C2)))),C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(ProductLog(Times(a,Power(x,n))),Plus(p,Times(CN1,C1))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(Plus(m,Times(n,Plus(p,Times(CN1,C1))),C1),Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Power(ProductLog(Times(a,Power(x,n))),Plus(p,Times(CN1,C1))),Power(Plus(C1,ProductLog(Times(a,Power(x,n)))),CN1)),x)))),And(And(And(And(FreeQ(a,x),RationalQ(List(m,n,p))),Greater(n,C0)),NonzeroQ(Plus(m,C1))),Greater(Plus(m,Times(n,Plus(p,Times(CN1,C1))),C1),C0)))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(ProductLog(Times(a,Power(x,n))),p),Power(Plus(m,Times(n,p),C1),CN1)),Times(CN1,Dist(Times(Plus(m,C1),Power(Plus(m,Times(n,p),C1),CN1)),Int(Times(Power(x,m),Power(ProductLog(Times(a,Power(x,n))),Plus(p,C1)),Power(Plus(C1,ProductLog(Times(a,Power(x,n)))),CN1)),x)))),And(And(And(And(FreeQ(a,x),RationalQ(List(m,n,p))),Greater(n,C0)),NonzeroQ(Plus(m,C1))),Less(Plus(m,Times(n,p),C1),C0)))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(CN1,Subst(Int(Times(Power(ProductLog(Times(a,Power(x,Times(CN1,n)))),p),Power(Times(Power(x,Plus(m,C2)),Plus(C1,ProductLog(Times(a,Power(x,Times(CN1,n)))))),CN1)),x),x,Power(x,CN1))),And(And(And(FreeQ(List(a,p),x),IntIntegerQ(List(m,n))),Less(n,C0)),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),CN1),Power(Times(CN1,ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),p_DEFAULT)),x_Symbol),
    Condition(Times(Gamma(Plus(p,C1),Times(CN1,ProductLog(Plus(a,Times(b,x))))),Power(b,CN1)),FreeQ(List(a,b),x))),
ISetDelayed(Int(Power(Times(CN1,ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),p_),x_Symbol),
    Condition(Plus(Int(Times(Power(Times(CN1,ProductLog(Plus(a,Times(b,x)))),p),Power(Plus(C1,ProductLog(Plus(a,Times(b,x)))),CN1)),x),Times(CN1,Int(Times(Power(Times(CN1,ProductLog(Plus(a,Times(b,x)))),Plus(p,C1)),Power(Plus(C1,ProductLog(Plus(a,Times(b,x)))),CN1)),x))),FreeQ(List(a,b,p),x))),
ISetDelayed(Int(Times(Power(x_,CN1),u_),x_Symbol),
    Condition(Module(List(Set($s("lst"),FunctionOfProductLog(u,x))),Condition(Dist(Power(Part($s("lst"),C3),CN1),Subst(Int(Regularize(Times(Part($s("lst"),C1),Plus(C1,x),Power(x,CN1)),x),x),x,ProductLog(Part($s("lst"),C2)))),Not(FalseQ($s("lst"))))),NonsumQ(u))),
ISetDelayed(Int(u_,x_Symbol),
    Condition(Subst(Int(Regularize(Times(Plus(x,C1),Power(E,x),SubstFor(ProductLog(x),u,x)),x),x),x,ProductLog(x)),FunctionOfQ(ProductLog(x),u,x))),
ISetDelayed(Int($(Derivative(f_),x_),x_Symbol),
    Condition($(f,x),FreeQ(f,x))),
ISetDelayed(Int($($(Derivative(n_),f_),x_),x_Symbol),
    Condition($($(Derivative(Plus(n,Times(CN1,C1))),f),x),FreeQ(List(f,n),x))),
ISetDelayed(Int(Times(Plus(Times(CN1,$(Derivative(Times($(f_,x_),g_)),x_)),Times($(Derivative(f_),x_),$(g_,x_))),Power($(g_,x_),CN2)),x_Symbol),
    Condition(Times($(f,x),Power($(g,x),CN1)),FreeQ(List(f,g),x))),
ISetDelayed(Int(Times(Plus(Times(CN1,$(Derivative(Times($(f_,x_),g_)),x_)),Times($(Derivative(f_),x_),$(g_,x_))),Power($(f_,x_),CN1),Power($(g_,x_),CN1)),x_Symbol),
    Condition(Log(Times($(f,x),Power($(g,x),CN1))),FreeQ(List(f,g),x))),
ISetDelayed(Int(Times(Plus(Times(CN1,$(Derivative(Times($(f_,x_),g_)),x_)),Times($(Derivative(f_),x_),$(g_,x_))),Power(Plus(Power($(f_,x_),C2),Power($(g_,x_),C2)),CN1)),x_Symbol),
    Condition(ArcTan(Times($(f,x),Power($(g,x),CN1))),FreeQ(List(f,g),x))),
ISetDelayed(Int(Times(Plus(Times(CN1,$(Derivative(Times($(f_,x_),g_)),x_)),Times($(Derivative(f_),x_),$(g_,x_))),Power(Plus(Power($(f_,x_),C2),Times(CN1,Power($(g_,x_),C2))),CN1)),x_Symbol),
    Condition(Times(Rational(C1,C2),Log(Times(Plus($(f,x),Times(CN1,$(g,x))),Power(Plus($(f,x),$(g,x)),CN1)))),FreeQ(List(f,g),x))),
ISetDelayed(Int(u_,x_Symbol),
    Condition(Module(List(Set(v,TrigSimplify(u))),Condition(Int(v,x),UnsameQ(v,u))),Not(MatchQ(u,Condition(Times(w_DEFAULT,Power(Plus(a_DEFAULT,Times(b_DEFAULT,v_)),m_DEFAULT),Power(Plus(c_DEFAULT,Times($p(d,true),v_)),n_DEFAULT)),And(And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(List(m,n))),Less(m,C0)),Less(n,C0))))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),u_),x_Symbol),
    Condition(Dist(Power(Plus(m,C1),CN1),Subst(Int(Regularize(SubstFor(Power(x,Plus(m,C1)),u,x),x),x),x,Power(x,Plus(m,C1)))),And(And(FreeQ(m,x),NonzeroQ(Plus(m,C1))),FunctionOfQ(Power(x,Plus(m,C1)),u,x)))),
ISetDelayed(Int(Times(u_,v_),x_Symbol),
    Module(List(Set(z,DerivativeDivides(v,u,x))),Condition(Dist(z,Subst(Int(x,x),x,v)),Not(FalseQ(z))))),
ISetDelayed(Int(Times(Power($p("u1"),n_),Power($p("u2"),n_),v_),x_Symbol),
    Condition(Module(List(Set(w,DerivativeDivides(Times($s("u1"),$s("u2")),v,x))),Condition(Times(w,Power($s("u1"),Plus(n,C1)),Power($s("u2"),Plus(n,C1)),Power(Plus(n,C1),CN1)),Not(FalseQ(w)))),And(And(FreeQ(n,x),NonzeroQ(Plus(n,C1))),Or(Or(SumQ(v),NonsumQ(Times($s("u1"),$s("u2")))),NonzeroQ(Plus(n,Times(CN1,C1))))))),
ISetDelayed(Int(Times(Power(u_,n_DEFAULT),Power(x_,m_DEFAULT),v_),x_Symbol),
    Condition(Module(List(Set(w,DerivativeDivides(Times(x,u),Times(Power(x,Plus(m,Times(CN1,n))),v),x))),Condition(Times(w,Power(x,Plus(n,C1)),Power(u,Plus(n,C1)),Power(Plus(n,C1),CN1)),Not(FalseQ(w)))),And(And(FreeQ(n,x),NonzeroQ(Plus(n,C1))),Or(Or(SumQ(v),NonsumQ(u)),NonzeroQ(Plus(n,Times(CN1,C1))))))),
ISetDelayed(Int(Times(Power(u_,n_DEFAULT),Power(x_,m_DEFAULT),v_),x_Symbol),
    Condition(Module(List(Set(w,DerivativeDivides(u,v,x))),Condition(Plus(Times(w,Power(x,m),Power(u,Plus(n,C1)),Power(Plus(n,C1),CN1)),Times(CN1,Dist(Times(m,Power(Plus(n,C1),CN1),w),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(u,Plus(n,C1))),x)))),Not(FalseQ(w)))),And(And(And(And(FreeQ(n,x),NonzeroQ(Plus(n,C1))),RationalQ(m)),Greater(m,C0)),Or(Or(SumQ(v),NonsumQ(u)),NonzeroQ(Plus(n,Times(CN1,C1))))))),
ISetDelayed(Int(Times(u_,v_),x_Symbol),
    Condition(Module(List(Set(w,Block(List(Set($s("ShowSteps"),False),Set($s("StepCounter"),Null)),Int(v,x)))),Condition(Subst(Int(Regularize(SubstFor(w,u,x),x),x),x,w),FunctionOfQ(w,u,x))),And(SumQ(v),IntPolynomialQ(v,x)))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_DEFAULT),u_),x_Symbol),
    Condition(Dist(Power(Times(b,Plus(m,C1)),CN1),Subst(Int(Regularize(SubstFor(Power(Plus(a,Times(b,x)),Plus(m,C1)),u,x),x),x),x,Power(Plus(a,Times(b,x)),Plus(m,C1)))),And(And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))),FunctionOfQ(Power(Plus(a,Times(b,x)),Plus(m,C1)),u,x)))),
ISetDelayed(Int(Times(Power(x_,CN1),u_),x_Symbol),
    Condition(Module(List(Set($s("lst"),PowerVariableExpn(u,C0,x))),Condition(Dist(Power(Part($s("lst"),C2),CN1),Subst(Int(Regularize(Times(Part($s("lst"),C1),Power(x,CN1)),x),x),x,Power(Times(Part($s("lst"),C3),x),Part($s("lst"),C2)))),And(Not(FalseQ($s("lst"))),NonzeroQ(Part($s("lst"),C2))))),And(NonsumQ(u),Not(RationalFunctionQ(u,x))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),u_),x_Symbol),
    Condition(Module(List(Set($s("lst"),PowerVariableExpn(u,Plus(m,C1),x))),Condition(Dist(Power(Part($s("lst"),C2),CN1),Subst(Int(Regularize(Times(Part($s("lst"),C1),Power(x,CN1)),x),x),x,Power(Times(Part($s("lst"),C3),x),Part($s("lst"),C2)))),And(NotFalseQ($s("lst")),NonzeroQ(Plus(Part($s("lst"),C2),Times(CN1,m),Times(CN1,C1)))))),And(And(And(IntIntegerQ(m),Unequal(m,CN1)),NonsumQ(u)),Or(Greater(m,C0),Not(AlgebraicFunctionQ(u,x)))))),
ISetDelayed(Int(u_,x_Symbol),
    Condition(Int(NormalForm(Expand(TrigReduce(u),x),x),x),And(ProductQ(u),Catch(CompoundExpression(Scan(Function(If(Not(LinearSinCosQ(Slot1,x)),Throw(False))),u),True))))),
ISetDelayed(LinearSinCosQ(Power(u_,n_DEFAULT),x_Symbol),
    And(And(And(IntIntegerQ(n),Greater(n,C0)),Or(SinQ(u),CosQ(u))),LinearQ(Part(u,C1),x))),
ISetDelayed(Int(u_,x_Symbol),
    Condition(Int(NormalForm(Expand(TrigReduce(u),x),x),x),And(ProductQ(u),Catch(CompoundExpression(Scan(Function(If(Not(LinearSinhCoshQ(Slot1,x)),Throw(False))),u),True))))),
ISetDelayed(LinearSinhCoshQ(Power(u_,n_DEFAULT),x_Symbol),
    And(And(And(IntIntegerQ(n),Greater(n,C0)),Or(SinhQ(u),CoshQ(u))),LinearQ(Part(u,C1),x))),
ISetDelayed(Int(Times(Sin(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),c_DEFAULT)),u_),x_Symbol),
    Condition(Times(CN1,Dist(Power(Times(b,c),CN1),Subst(Int(Regularize(SubstFor(Cos(Times(c,Plus(a,Times(b,x)))),u,x),x),x),x,Cos(Times(c,Plus(a,Times(b,x))))))),And(FreeQ(List(a,b,c),x),FunctionOfQ(Cos(Times(c,Plus(a,Times(b,x)))),u,x)))),
ISetDelayed(Int(Times(Cos(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),c_DEFAULT)),u_),x_Symbol),
    Condition(Dist(Power(Times(b,c),CN1),Subst(Int(Regularize(SubstFor(Sin(Times(c,Plus(a,Times(b,x)))),u,x),x),x),x,Sin(Times(c,Plus(a,Times(b,x)))))),And(FreeQ(List(a,b,c),x),FunctionOfQ(Sin(Times(c,Plus(a,Times(b,x)))),u,x)))),
ISetDelayed(Int(Times(Power(Sec(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),c_DEFAULT)),n_),u_),x_Symbol),
    Condition(Dist(Power(Times(b,c),CN1),Subst(Int(Regularize(Times(Power(Plus(C1,Power(x,C2)),Times(Rational(C1,C2),Plus(n,Times(CN1,C2)))),SubstFor(Tan(Times(c,Plus(a,Times(b,x)))),u,x)),x),x),x,Tan(Times(c,Plus(a,Times(b,x)))))),And(And(And(FreeQ(List(a,b,c),x),EvenQ(n)),FunctionOfQ(Tan(Times(c,Plus(a,Times(b,x)))),u,x)),NonsumQ(u)))),
ISetDelayed(Int(Times(Power(Csc(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),c_DEFAULT)),n_),u_),x_Symbol),
    Condition(Times(CN1,Dist(Power(Times(b,c),CN1),Subst(Int(Regularize(Times(Power(Plus(C1,Power(x,C2)),Times(Rational(C1,C2),Plus(n,Times(CN1,C2)))),SubstFor(Cot(Times(c,Plus(a,Times(b,x)))),u,x)),x),x),x,Cot(Times(c,Plus(a,Times(b,x))))))),And(And(And(FreeQ(List(a,b,c),x),EvenQ(n)),FunctionOfQ(Cot(Times(c,Plus(a,Times(b,x)))),u,x)),NonsumQ(u)))),
ISetDelayed(Int(u_,x_Symbol),
    Module(List(Set(v,FunctionOfTrig(u,x))),Condition(Dist(Power(Coefficient(v,x,C1),CN1),Subst(Int(Regularize(SubstFor(Sin(v),Times(u,Power(Cos(v),CN1)),x),x),x),x,Sin(v))),And(NotFalseQ(v),FunctionOfQ(Sin(v),Times(u,Power(Cos(v),CN1)),x))))),
ISetDelayed(Int(u_,x_Symbol),
    Module(List(Set(v,FunctionOfTrig(u,x))),Condition(Times(CN1,Dist(Power(Coefficient(v,x,C1),CN1),Subst(Int(Regularize(SubstFor(Cos(v),Times(u,Power(Sin(v),CN1)),x),x),x),x,Cos(v)))),And(NotFalseQ(v),FunctionOfQ(Cos(v),Times(u,Power(Sin(v),CN1)),x))))),
ISetDelayed(Int(Times(Csc(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Sec(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),u_),x_Symbol),
    Condition(Dist(Power(b,CN1),Subst(Int(Regularize(SubstFor(Log(Tan(Plus(a,Times(b,x)))),u,x),x),x),x,Log(Tan(Plus(a,Times(b,x)))))),And(FreeQ(List(a,b),x),FunctionOfQ(Log(Tan(Plus(a,Times(b,x)))),u,x)))),
ISetDelayed(Int(Times(Csc(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Sec(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),u_),x_Symbol),
    Condition(Times(CN1,Dist(Power(b,CN1),Subst(Int(Regularize(SubstFor(Log(Cot(Plus(a,Times(b,x)))),u,x),x),x),x,Log(Cot(Plus(a,Times(b,x))))))),And(FreeQ(List(a,b),x),FunctionOfQ(Log(Cot(Plus(a,Times(b,x)))),u,x)))),
ISetDelayed(Int(Times(Cos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),u_),x_Symbol),
    Condition(Dist(Times(C2,Power(b,CN1)),Subst(Int(Regularize(SubstFor(Times(Cos(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x))),Sin(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x)))),u,x),x),x),x,Times(Cos(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x))),Sin(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x)))))),And(And(NonsumQ(u),FreeQ(List(a,b),x)),FunctionOfQ(Times(Cos(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x))),Sin(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x)))),u,x)))),
ISetDelayed(Int(Times(Sinh(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),c_DEFAULT)),u_),x_Symbol),
    Condition(Dist(Power(Times(b,c),CN1),Subst(Int(Regularize(SubstFor(Cosh(Times(c,Plus(a,Times(b,x)))),u,x),x),x),x,Cosh(Times(c,Plus(a,Times(b,x)))))),And(FreeQ(List(a,b,c),x),FunctionOfQ(Cosh(Times(c,Plus(a,Times(b,x)))),u,x)))),
ISetDelayed(Int(Times(Cosh(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),c_DEFAULT)),u_),x_Symbol),
    Condition(Dist(Power(Times(b,c),CN1),Subst(Int(Regularize(SubstFor(Sinh(Times(c,Plus(a,Times(b,x)))),u,x),x),x),x,Sinh(Times(c,Plus(a,Times(b,x)))))),And(FreeQ(List(a,b,c),x),FunctionOfQ(Sinh(Times(c,Plus(a,Times(b,x)))),u,x)))),
ISetDelayed(Int(Times(Power(Sech(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),c_DEFAULT)),n_),u_),x_Symbol),
    Condition(Dist(Power(Times(b,c),CN1),Subst(Int(Regularize(Times(Power(Plus(C1,Times(CN1,Power(x,C2))),Times(Rational(C1,C2),Plus(n,Times(CN1,C2)))),SubstFor(Tanh(Times(c,Plus(a,Times(b,x)))),u,x)),x),x),x,Tanh(Times(c,Plus(a,Times(b,x)))))),And(And(And(FreeQ(List(a,b,c),x),EvenQ(n)),FunctionOfQ(Tanh(Times(c,Plus(a,Times(b,x)))),u,x)),NonsumQ(u)))),
ISetDelayed(Int(Times(Power(Csch(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),c_DEFAULT)),n_),u_),x_Symbol),
    Condition(Times(CN1,Dist(Power(Times(b,c),CN1),Subst(Int(Regularize(Times(Power(Plus(CN1,Power(x,C2)),Times(Rational(C1,C2),Plus(n,Times(CN1,C2)))),SubstFor(Coth(Times(c,Plus(a,Times(b,x)))),u,x)),x),x),x,Coth(Times(c,Plus(a,Times(b,x))))))),And(And(And(FreeQ(List(a,b,c),x),EvenQ(n)),FunctionOfQ(Coth(Times(c,Plus(a,Times(b,x)))),u,x)),NonsumQ(u)))),
ISetDelayed(Int(u_,x_Symbol),
    Module(List(Set(v,FunctionOfHyperbolic(u,x))),Condition(Dist(Power(Coefficient(v,x,C1),CN1),Subst(Int(Regularize(SubstFor(Sinh(v),Times(u,Power(Cosh(v),CN1)),x),x),x),x,Sinh(v))),And(NotFalseQ(v),FunctionOfQ(Sinh(v),Times(u,Power(Cosh(v),CN1)),x))))),
ISetDelayed(Int(u_,x_Symbol),
    Module(List(Set(v,FunctionOfHyperbolic(u,x))),Condition(Dist(Power(Coefficient(v,x,C1),CN1),Subst(Int(Regularize(SubstFor(Cosh(v),Times(u,Power(Sinh(v),CN1)),x),x),x),x,Cosh(v))),And(NotFalseQ(v),FunctionOfQ(Cosh(v),Times(u,Power(Sinh(v),CN1)),x))))),
ISetDelayed(Int(Times(Csch(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Sech(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),u_),x_Symbol),
    Condition(Dist(Power(b,CN1),Subst(Int(Regularize(SubstFor(Log(Tanh(Plus(a,Times(b,x)))),u,x),x),x),x,Log(Tanh(Plus(a,Times(b,x)))))),And(FreeQ(List(a,b),x),FunctionOfQ(Log(Tanh(Plus(a,Times(b,x)))),u,x)))),
ISetDelayed(Int(Times(Csch(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Sech(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),u_),x_Symbol),
    Condition(Times(CN1,Dist(Power(b,CN1),Subst(Int(Regularize(SubstFor(Log(Coth(Plus(a,Times(b,x)))),u,x),x),x),x,Log(Coth(Plus(a,Times(b,x))))))),And(FreeQ(List(a,b),x),FunctionOfQ(Log(Coth(Plus(a,Times(b,x)))),u,x)))),
ISetDelayed(Int(Times(Cosh(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),u_),x_Symbol),
    Condition(Dist(Times(C2,Power(b,CN1)),Subst(Int(Regularize(SubstFor(Times(Cosh(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x))),Sinh(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x)))),u,x),x),x),x,Times(Cosh(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x))),Sinh(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x)))))),And(And(NonsumQ(u),FreeQ(List(a,b),x)),FunctionOfQ(Times(Cosh(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x))),Sinh(Plus(Times(Rational(C1,C2),a),Times(Rational(C1,C2),b,x)))),u,x)))),
ISetDelayed(Int(Times(Power(u_,Plus(CN1,Times(Power(x_,m_DEFAULT),a_DEFAULT))),Power(x_,m_DEFAULT),v_),x_Symbol),
    Condition(Module(List(Set(w,DerivativeDivides(u,v,x))),Condition(Plus(Times(w,Power(u,Times(a,Power(x,m))),Power(a,CN1)),Times(CN1,Dist(Times(m,w),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(u,Times(a,Power(x,m))),Log(u)),x)))),Not(FalseQ(w)))),And(And(FreeQ(a,x),RationalQ(m)),Greater(m,C0)))),
ISetDelayed(Int(u_,x_Symbol),
    Condition(Subst(Int(Regularize(Times(SubstFor(Tan(x),u,x),Power(Plus(C1,Power(x,C2)),CN1)),x),x),x,Tan(x)),And(And(FunctionOfQ(Tan(x),u,x),GreaterEqual(FunctionOfTanWeight(u,x,x),C0)),TryTanSubst(u,x)))),
ISetDelayed(Int(u_,x_Symbol),
    Condition(Times(CN1,Subst(Int(Regularize(Times(SubstFor(Cot(x),u,x),Power(Plus(C1,Power(x,C2)),CN1)),x),x),x,Cot(x))),And(And(FunctionOfQ(Cot(x),u,x),Less(FunctionOfTanWeight(u,x,x),C0)),TryTanSubst(u,x)))),
ISetDelayed(TryTanSubst(u_,x_Symbol),
    And(And(And(And(And(And(FalseQ(FunctionOfLinear(u,x)),Not(MatchQ(u,Condition(Times(r_DEFAULT,Power(Plus(s_,t_),n_DEFAULT)),And(IntIntegerQ(n),Greater(n,C0)))))),Not(MatchQ(u,Condition(Log(Power($(f_,x),C2)),SinCosQ(f))))),Not(MatchQ(u,Condition(Power(Plus(a_,Times(b_DEFAULT,Power($(f_,x),n_))),CN1),And(And(SinCosQ(f),IntIntegerQ(n)),Greater(n,C2)))))),Not(MatchQ(u,Condition(Times($(f_,Times(m_DEFAULT,x)),$(g_,Times(n_DEFAULT,x))),And(And(IntIntegerQ(List(m,n)),SinCosQ(f)),SinCosQ(g)))))),Not(MatchQ(u,Condition(Times(r_DEFAULT,Power(Times(a_DEFAULT,Power(s_,m_)),p_)),And(FreeQ(List(a,m,p),x),Not(And(SameQ(m,C2),Or(SameQ(s,Sec(x)),SameQ(s,Csc(x)))))))))),SameQ(u,ExpnExpand(u,x)))),
ISetDelayed(Int(u_,x_Symbol),
    Condition(Subst(Int(Regularize(Times(SubstFor(Tanh(x),u,x),Power(Plus(C1,Times(CN1,Power(x,C2))),CN1)),x),x),x,Tanh(x)),And(And(FunctionOfQ(Tanh(x),u,x),GreaterEqual(FunctionOfTanhWeight(u,x,x),C0)),TryTanhSubst(u,x)))),
ISetDelayed(Int(u_,x_Symbol),
    Condition(Subst(Int(Regularize(Times(SubstFor(Coth(x),u,x),Power(Plus(C1,Times(CN1,Power(x,C2))),CN1)),x),x),x,Coth(x)),And(And(FunctionOfQ(Coth(x),u,x),Less(FunctionOfTanhWeight(u,x,x),C0)),TryTanhSubst(u,x)))),
ISetDelayed(TryTanhSubst(u_,x_Symbol),
    And(And(And(And(And(And(FalseQ(FunctionOfLinear(u,x)),Not(MatchQ(u,Condition(Times(r_DEFAULT,Power(Plus(s_,t_),n_DEFAULT)),And(IntIntegerQ(n),Greater(n,C0)))))),Not(MatchQ(u,Condition(Log(Power($(f_,x),C2)),SinhCoshQ(f))))),Not(MatchQ(u,Condition(Power(Plus(a_,Times(b_DEFAULT,Power($(f_,x),n_))),CN1),And(And(SinhCoshQ(f),IntIntegerQ(n)),Greater(n,C2)))))),Not(MatchQ(u,Condition(Times($(f_,Times(m_DEFAULT,x)),$(g_,Times(n_DEFAULT,x))),And(And(IntIntegerQ(List(m,n)),SinhCoshQ(f)),SinhCoshQ(g)))))),Not(MatchQ(u,Condition(Times(r_DEFAULT,Power(Times(a_DEFAULT,Power(s_,m_)),p_)),And(FreeQ(List(a,m,p),x),Not(And(SameQ(m,C2),Or(SameQ(s,Sech(x)),SameQ(s,Csch(x)))))))))),SameQ(u,ExpnExpand(u,x)))),
ISetDelayed(Int(u_,x_Symbol),
    Condition(Module(List(Set($s("lst"),FunctionOfExponentialOfLinear(u,x))),Condition(Dist(Power(Times(Part($s("lst"),C3),Log(Part($s("lst"),C4))),CN1),Subst(Int(Regularize(Times(Part($s("lst"),C1),Power(x,CN1)),x),x),x,Power(Part($s("lst"),C4),Plus(Part($s("lst"),C2),Times(Part($s("lst"),C3),x))))),Not(FalseQ($s("lst"))))),And(And(And(Not(MatchQ(u,Condition(Power(v_,n_DEFAULT),And(And(SumQ(v),IntIntegerQ(n)),Greater(n,C0))))),Not(MatchQ(u,Condition(Times(Power(v_,n_DEFAULT),Power(f_,Plus(a_DEFAULT,Times(b_DEFAULT,x)))),And(And(And(FreeQ(List(a,b,f),x),SumQ(v)),IntIntegerQ(n)),Greater(n,C0)))))),Not(MatchQ(u,Condition(Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(f_,Plus($p(d,true),Times($p(e,true),x)))),Times(c_DEFAULT,Power(f_,Plus(g_DEFAULT,Times(h_DEFAULT,x))))),CN1),And(And(FreeQ(List(a,b,c,d,e,f,g,h),x),ZeroQ(Plus(g,Times(CN1,C2,d)))),ZeroQ(Plus(h,Times(CN1,C2,e)))))))),FalseQ(FunctionOfHyperbolic(u,x))))),
ISetDelayed(Int(Times(Power(f_,Plus(Times(Power(x_,n_DEFAULT),b_DEFAULT),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(CN1,Subst(Int(Times(Power(f,Plus(a,Times(b,Power(x,Times(CN1,n))))),Power(Power(x,Plus(m,C2)),CN1)),x),x,Power(x,CN1))),And(And(And(And(FreeQ(List(a,b,f),x),IntIntegerQ(List(m,n))),Less(n,C0)),Less(m,CN1)),Equal(GCD(Plus(m,C1),n),C1)))),
ISetDelayed(Int(Times(Power($(f_,Plus(Times(Power(x_,n_),b_DEFAULT),a_DEFAULT)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(CN1,Subst(Int(Times(Power($(f,Plus(a,Times(b,Power(x,Times(CN1,n))))),p),Power(Power(x,Plus(m,C2)),CN1)),x),x,Power(x,CN1))),And(And(And(And(FreeQ(List(a,b,f,p),x),IntIntegerQ(List(m,n))),Less(n,C0)),Less(m,CN1)),Equal(GCD(Plus(m,C1),n),C1)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(x_,n_),b_DEFAULT),a_),m_),u_),x_Symbol),
    Condition(Times(Power(Plus(a,Times(b,Power(x,n))),m),Power(Times(Power(x,Times(m,n)),Power(Plus(b,Times(a,Power(Power(x,n),CN1))),m)),CN1),Int(Times(u,Power(x,Times(m,n)),Power(Plus(b,Times(a,Power(Power(x,n),CN1))),m)),x)),And(And(And(And(FreeQ(List(a,b),x),FractionQ(m)),IntIntegerQ(n)),Less(n,CN1)),SameQ(u,ExpnExpand(u,x))))),
ISetDelayed(Int(u_,x_Symbol),
    Module(List(Set($s("lst"),SubstForFractionalPowerOfLinear(u,x))),Condition(Dist(Times(Part($s("lst"),C2),Part($s("lst"),C4)),Subst(Int(Part($s("lst"),C1),x),x,Power(Part($s("lst"),C3),Power(Part($s("lst"),C2),CN1)))),And(NotFalseQ($s("lst")),SubstForFractionalPowerQ(u,Part($s("lst"),C3),x))))),
ISetDelayed(Int(u_,x_Symbol),
    Module(List(Set($s("lst"),SubstForFractionalPowerOfQuotientOfLinears(u,x))),Condition(Dist(Times(Part($s("lst"),C2),Part($s("lst"),C4)),Subst(Int(Part($s("lst"),C1),x),x,Power(Part($s("lst"),C3),Power(Part($s("lst"),C2),CN1)))),NotFalseQ($s("lst"))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_),m_DEFAULT),u_),x_Symbol),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(Power(x,m),Regularize(SubstFor(Plus(a,Times(b,x)),u,x),x)),x),x,Plus(a,Times(b,x)))),And(FreeQ(List(a,b,m),x),FunctionOfQ(Plus(a,Times(b,x)),u,x)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(Plus(Times($p(d,true),x_),c_),n_),b_DEFAULT),a_),CN1),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Dist(Power(d,CN1),Subst(Int(Times(Power(Plus(Times(CN1,c,Power(d,CN1)),Times(x,Power(d,CN1))),m),Power(Plus(a,Times(b,Power(x,n))),CN1)),x),x,Plus(c,Times(d,x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(List(m,n))),Greater(n,C2)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(Plus(Times($p(d,true),x_),c_),n_),b_DEFAULT),a_),p_),Power(Plus(Times(f_DEFAULT,x_),$p(e)),m_DEFAULT)),x_Symbol),
    Condition(Dist(Times(Power(Times(f,Power(d,CN1)),m),Power(d,CN1)),Subst(Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,n))),p)),x),x,Plus(c,Times(d,x)))),And(And(FreeQ(List(a,b,c,d,e,f),x),IntIntegerQ(List(m,n,p))),ZeroQ(Plus(Times(d,e),Times(CN1,c,f)))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_DEFAULT),Power($(f_,Plus(Times($p(d,true),x_),c_DEFAULT)),p_DEFAULT)),x_Symbol),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(Power(x,m),Power($(f,Plus(c,Times(CN1,a,d,Power(b,CN1)),Times(d,x,Power(b,CN1)))),p)),x),x,Plus(a,Times(b,x)))),And(And(And(FreeQ(List(a,b,c,d,m),x),RationalQ(p)),Not(And(SameQ(a,C0),SameQ(b,C1)))),MemberQ(List($s("Sin"),$s("Cos"),$s("Sec"),$s("Csc"),$s("Sinh"),$s("Cosh"),$s("Sech"),$s("Csch")),f)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(x_,C2),$p(e,true)),Times($p(d,true),x_),c_DEFAULT),n_),Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_)),x_Symbol),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(Power(x,m),Power(Plus(c,Times(CN1,a,d,Power(b,CN1)),Times(Power(a,C2),e,Power(Power(b,C2),CN1)),Times(Plus(Times(d,Power(b,CN1)),Times(CN1,C2,a,e,Power(Power(b,C2),CN1))),x),Times(e,Power(x,C2),Power(Power(b,C2),CN1))),n)),x),x,Plus(a,Times(b,x)))),And(And(FreeQ(List(a,b,c,d,e,m,n),x),FractionQ(n)),Not(And(SameQ(a,C0),SameQ(b,C1)))))),
ISetDelayed(Int(Times(Power(Plus(Power(x_,p_DEFAULT),u_),n_),v_),x_Symbol),
    Condition(Module(List(Set(z,DerivativeDivides(u,v,x))),Condition(Plus(Times(z,Power(Plus(u,Power(x,p)),Plus(n,C1)),Power(Plus(n,C1),CN1)),Times(CN1,Dist(Times(z,p),Int(Times(Power(x,Plus(p,Times(CN1,C1))),Power(Plus(u,Power(x,p)),n)),x)))),Not(FalseQ(z)))),And(And(And(IntIntegerQ(p),RationalQ(n)),NonzeroQ(Plus(n,C1))),Not(AlgebraicFunctionQ(v,x))))),
ISetDelayed(Int(Times(Power(Plus(Power(x_,p_DEFAULT),u_),n_),Power(x_,m_DEFAULT),v_),x_Symbol),
    Condition(Module(List(Set(z,DerivativeDivides(u,v,x))),Condition(Plus(Times(z,Power(x,m),Power(Plus(u,Power(x,p)),Plus(n,C1)),Power(Plus(n,C1),CN1)),Times(CN1,Dist(Times(z,p),Int(Times(Power(x,Plus(m,p,Times(CN1,C1))),Power(Plus(u,Power(x,p)),n)),x))),Times(CN1,Dist(Times(z,m,Power(Plus(n,C1),CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(Plus(u,Power(x,p)),Plus(n,C1))),x)))),Not(FalseQ(z)))),And(And(IntIntegerQ(List(m,p)),RationalQ(n)),NonzeroQ(Plus(n,C1))))),
ISetDelayed(Int(Log(u_),x_Symbol),
    Condition(Plus(Times(x,Log(u)),Times(CN1,Int(Regularize(Times(x,D(u,x),Power(u,CN1)),x),x))),InverseFunctionFreeQ(u,x))),
ISetDelayed(Int(Times(Log(u_),Power(x_,CN1)),x_Symbol),
    Condition(Module(List(Set(v,Times(D(u,x),Power(u,CN1)))),Condition(Plus(Times(Log(u),Log(x)),Times(CN1,Int(Regularize(Times(Log(x),v),x),x))),RationalFunctionQ(v,x))),Not(And(BinomialTest(u,x),SameQ(Power(Part(BinomialTest(u,x),C3),C2),C1))))),
ISetDelayed(Int(Times(Log(u_),Power(Plus(Times(b_DEFAULT,x_),a_),CN1)),x_Symbol),
    Condition(Module(List(Set(v,Times(D(u,x),Power(u,CN1)))),Condition(Plus(Times(Log(u),Log(Plus(a,Times(b,x))),Power(b,CN1)),Times(CN1,Dist(Power(b,CN1),Int(Regularize(Times(Log(Plus(a,Times(b,x))),v),x),x)))),RationalFunctionQ(v,x))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(Log(u_),Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(v,Times(D(u,x),Power(u,CN1)))),Plus(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),Log(u),Power(Times(b,Plus(m,C1)),CN1)),Times(CN1,Dist(Power(Times(b,Plus(m,C1)),CN1),Int(Regularize(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),v),x),x))))),And(And(And(And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))),InverseFunctionFreeQ(u,x)),Not(FunctionOfQ(Power(x,Plus(m,C1)),u,x))),FalseQ(PowerVariableExpn(u,Plus(m,C1),x))))),
ISetDelayed(Int(Times(Log(u_),v_),x_Symbol),
    Condition(Module(List(Set(w,Block(List(Set($s("ShowSteps"),False),Set($s("StepCounter"),Null)),Int(v,x)))),Condition(Plus(Times(w,Log(u)),Times(CN1,Int(Regularize(Times(w,D(u,x),Power(u,CN1)),x),x))),InverseFunctionFreeQ(w,x))),And(And(InverseFunctionFreeQ(u,x),Not(MatchQ(v,Condition(Power(x,m_DEFAULT),FreeQ(m,x))))),FalseQ(FunctionOfLinear(Times(v,Log(u)),x))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(x_,C2),b_DEFAULT),a_),CN1),u_DEFAULT,x_),x_Symbol),
    Condition(Module(List(Set(q,Rt(Times(CN1,a,Power(b,CN1)),C2))),Plus(Dist(Times(Rational(C1,C2),q),Int(Times(u,Power(Plus(a,Times(b,q,x)),CN1)),x)),Times(CN1,Dist(Times(Rational(C1,C2),q),Int(Times(u,Power(Plus(a,Times(CN1,b,q,x)),CN1)),x))))),And(And(FreeQ(List(a,b),x),Not(MatchQ(u,Condition(Times(r_,s_DEFAULT),SumQ(r))))),Not(RationalFunctionQ(u,x))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,v_),Times(c_DEFAULT,w_),a_),CN1),Power(v_,m_DEFAULT),u_DEFAULT),x_Symbol),
    Condition(Module(List(Set(q,Rt(Plus(Power(b,C2),Times(CN1,C4,a,c)),C2))),Condition(Plus(Dist(Plus(C1,Times(b,Power(q,CN1))),Int(Times(u,Power(v,Plus(m,Times(CN1,C1))),Power(Plus(b,q,Times(C2,c,v)),CN1)),x)),Dist(Plus(C1,Times(CN1,b,Power(q,CN1))),Int(Times(u,Power(v,Plus(m,Times(CN1,C1))),Power(Plus(b,Times(CN1,q),Times(C2,c,v)),CN1)),x))),NonzeroQ(q))),And(And(And(And(And(FreeQ(List(a,b,c),x),RationalQ(m)),Equal(m,C1)),ZeroQ(Plus(w,Times(CN1,Power(v,C2))))),Not(MatchQ(u,Condition(Times(r_,s_DEFAULT),SumQ(r))))),Or(Not(RationalFunctionQ(u,x)),Not(RationalFunctionQ(v,x)))))),
ISetDelayed(Int(Times(Plus(Times($p(e,true),v_),$p(d,true)),Power(Plus(Times(b_DEFAULT,v_),Times(c_DEFAULT,w_),a_),CN1)),x_Symbol),
    Condition(Module(List(Set(q,Rt(Plus(Power(b,C2),Times(CN1,C4,a,c)),C2))),Condition(Plus(Dist(Plus(e,Times(Plus(Times(b,e),Times(CN1,C2,c,d)),Power(q,CN1))),Int(Power(Plus(b,q,Times(C2,c,v)),CN1),x)),Dist(Plus(e,Times(CN1,Plus(Times(b,e),Times(CN1,C2,c,d)),Power(q,CN1))),Int(Power(Plus(b,Times(CN1,q),Times(C2,c,v)),CN1),x))),NonzeroQ(q))),And(And(And(FreeQ(List(a,b,c,d,e),x),ZeroQ(Plus(w,Times(CN1,Power(v,C2))))),NonzeroQ(Plus(Times(C2,c,d),Times(CN1,b,e)))),Not(RationalFunctionQ(v,x))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,v_),Times(c_DEFAULT,w_),a_),CN1),u_DEFAULT),x_Symbol),
    Condition(Module(List(Set(q,Rt(Plus(Power(b,C2),Times(CN1,C4,a,c)),C2))),Condition(Plus(Dist(Times(C2,c,Power(q,CN1)),Int(Times(u,Power(Plus(b,Times(CN1,q),Times(C2,c,v)),CN1)),x)),Times(CN1,Dist(Times(C2,c,Power(q,CN1)),Int(Times(u,Power(Plus(b,q,Times(C2,c,v)),CN1)),x)))),NonzeroQ(q))),And(And(And(And(FreeQ(List(a,b,c),x),ZeroQ(Plus(w,Times(CN1,Power(v,C2))))),Not(MatchQ(u,Condition(Power(v,m_),RationalQ(m))))),Not(MatchQ(u,Condition(Times(r_,s_DEFAULT),SumQ(r))))),Or(Not(RationalFunctionQ(u,x)),Not(RationalFunctionQ(v,x)))))),
ISetDelayed(Int(u_,x_Symbol),
    Module(List(Set(v,SimplifyExpression(u,x))),Condition(Int(v,x),UnsameQ(v,u)))),
ISetDelayed(Int(Times(Power(Times(Power(t_,q_DEFAULT),Power(v_,m_DEFAULT),Power(w_,n_DEFAULT)),p_),u_DEFAULT),x_Symbol),
    Condition(Int(Times(u,Power(v,Times(m,p)),Power(w,Times(n,p)),Power(t,Times(p,q))),x),And(And(And(And(FreeQ(p,x),Not(PowerQ(v))),Not(PowerQ(w))),Not(PowerQ(t))),ZeroQ(Simplify(Plus(Power(Times(Power(v,m),Power(w,n),Power(t,q)),p),Times(CN1,Power(v,Times(m,p)),Power(w,Times(n,p)),Power(t,Times(p,q))))))))),
ISetDelayed(Int(Times(Power(Times(Power(t_,q_DEFAULT),Power(v_,m_DEFAULT),Power(w_,n_DEFAULT)),p_),u_DEFAULT),x_Symbol),
    Condition(Module(List(Set(r,Simplify(Times(Power(Times(Power(v,m),Power(w,n),Power(t,q)),p),Power(Times(Power(v,Times(m,p)),Power(w,Times(n,p)),Power(t,Times(p,q))),CN1)))),$s("lst")),Condition(CompoundExpression(Set($s("lst"),SplitFreeFactors(Times(Power(v,Times(m,p)),Power(w,Times(n,p)),Power(t,Times(p,q))),x)),Times(r,Part($s("lst"),C1),Int(Regularize(Times(u,Part($s("lst"),C2)),x),x))),NonzeroQ(Plus(r,Times(CN1,C1))))),And(And(And(FreeQ(p,x),Not(PowerQ(v))),Not(PowerQ(w))),Not(PowerQ(t))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(x_,n_),b_DEFAULT),a_),CN1),Power(x_,m_DEFAULT),u_),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(CN1,a,Power(b,CN1)),n))),Set(s,Denominator(Rt(Times(CN1,a,Power(b,CN1)),n)))),Dist(Times(Power(r,Plus(m,C1)),Power(Times(a,n,Power(s,m)),CN1)),Sum(Int(Times(u,Power(CN1,Times(C2,k,Plus(m,C1),Power(n,CN1))),Power(Plus(Times(r,Power(CN1,Times(C2,k,Power(n,CN1)))),Times(CN1,s,x)),CN1)),x),List(k,C1,n)))),And(And(And(FreeQ(List(a,b),x),IntIntegerQ(List(m,n))),Less(Less(C0,m),n)),Not(AlgebraicFunctionQ(u,x))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(x_,n_),b_DEFAULT),a_),CN1),u_),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(CN1,a,Power(b,CN1)),n))),Set(s,Denominator(Rt(Times(CN1,a,Power(b,CN1)),n)))),Dist(Times(r,Power(Times(a,n),CN1)),Sum(Int(Times(u,Power(CN1,Times(C2,k,Power(n,CN1))),Power(Plus(Times(r,Power(CN1,Times(C2,k,Power(n,CN1)))),Times(CN1,s,x)),CN1)),x),List(k,C1,n)))),And(And(And(FreeQ(List(a,b),x),OddQ(n)),Greater(n,C1)),Not(AlgebraicFunctionQ(u,x))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(v_,n_),b_DEFAULT),a_),CN1),Power(v_,m_),u_DEFAULT),x_Symbol),
    Condition(Dist(Power(Times(b,n),CN1),Sum(Int(Together(Times(u,Power(Plus(v,Times(CN1,Rt(Times(CN1,a,Power(b,CN1)),n),Power(CN1,Times(C2,k,Power(n,CN1))))),CN1))),x),List(k,C1,n))),And(And(And(And(FreeQ(List(a,b),x),OddQ(n)),Greater(n,C1)),ZeroQ(Plus(m,Times(CN1,n),C1))),Not(And(AlgebraicFunctionQ(u,x),AlgebraicFunctionQ(v,x)))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(v_,n_),b_DEFAULT),a_),CN1),u_DEFAULT),x_Symbol),
    Condition(Dist(Power(Times(a,n),CN1),Sum(Int(Together(Times(u,Power(Plus(C1,Times(CN1,v,Power(Times(Rt(Times(CN1,a,Power(b,CN1)),n),Power(CN1,Times(C2,k,Power(n,CN1)))),CN1))),CN1))),x),List(k,C1,n))),And(And(And(FreeQ(List(a,b),x),OddQ(n)),Greater(n,C1)),Not(And(AlgebraicFunctionQ(u,x),AlgebraicFunctionQ(v,x)))))),
ISetDelayed(Int(u_,x_Symbol),
    Module(List(Set($s("lst"),SubstForInverseLinear(u,x))),Condition(Times(CN1,Dist(Power(Part($s("lst"),C3),CN1),Subst(Int(Times(Part($s("lst"),C1),Power(Power(x,C2),CN1)),x),x,Power(Part($s("lst"),C2),CN1)))),NotFalseQ($s("lst"))))),
ISetDelayed(Int(u_,x_Symbol),
    Module(List(Set($s("lst"),FunctionOfLinear(u,x))),Condition(Dist(Power(Part($s("lst"),C3),CN1),Subst(Int(Part($s("lst"),C1),x),x,Plus(Part($s("lst"),C2),Times(Part($s("lst"),C3),x)))),Not(FalseQ($s("lst")))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(v_,n_),b_DEFAULT),a_),CN1),u_DEFAULT),x_Symbol),
    Condition(Dist(Times(C2,Power(Times(a,n),CN1)),Sum(Int(Together(Times(u,Power(Plus(C1,Times(CN1,Power(v,C2),Power(Times(Rt(Times(CN1,a,Power(b,CN1)),Times(Rational(C1,C2),n)),Power(CN1,Times(C4,k,Power(n,CN1)))),CN1))),CN1))),x),List(k,C1,Times(Rational(C1,C2),n)))),And(And(FreeQ(List(a,b),x),EvenQ(n)),Greater(n,C2)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(v_,n_),b_DEFAULT),a_),m_),u_DEFAULT),x_Symbol),
    Condition(Dist(Power(a,m),Int(Times(u,Product(Power(Plus(C1,Times(CN1,Power(CN1,Times(C4,k,Power(n,CN1))),Rt(Times(CN1,b,Power(a,CN1)),Times(Rational(C1,C2),n)),Power(v,C2))),m),List(k,C1,Times(Rational(C1,C2),n)))),x)),And(And(And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Less(m,CN1)),EvenQ(n)),Greater(n,C2)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(v_,n_),b_DEFAULT),a_),m_),u_DEFAULT),x_Symbol),
    Condition(Dist(Power(a,m),Int(Times(u,Product(Power(Plus(C1,Times(Power(CN1,Times(C2,k,Power(n,CN1))),Rt(Times(b,Power(a,CN1)),n),v)),m),List(k,C1,n))),x)),And(And(And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Less(m,CN1)),OddQ(n)),Greater(n,C1)))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,v_),Times(c_DEFAULT,w_),a_),m_),u_DEFAULT),x_Symbol),
    Condition(Dist(Power(Power(Times(C4,c),m),CN1),Int(Times(u,Power(Plus(b,Times(CN1,Sqrt(Plus(Power(b,C2),Times(CN1,C4,a,c)))),Times(C2,c,v)),m),Power(Plus(b,Sqrt(Plus(Power(b,C2),Times(CN1,C4,a,c))),Times(C2,c,v)),m)),x)),And(And(And(FreeQ(List(a,b,c),x),IntIntegerQ(m)),Less(m,C0)),ZeroQ(Plus(w,Times(CN1,Power(v,C2))))))),
ISetDelayed(Int(Times(Power(Power(v_,m_),p_),u_DEFAULT),x_Symbol),
    Condition(Module(List(Set(q,FractionalPart(p))),Times(Power(Power(v,m),q),Power(Power(v,Times(m,q)),CN1),Int(Times(u,Power(v,Times(m,p))),x))),And(FreeQ(m,x),FractionQ(p)))),
ISetDelayed(Int(Times(Power(Times(Power(v_,m_DEFAULT),a_),p_),u_DEFAULT),x_Symbol),
    Condition(Module(List(Set(q,FractionalPart(p))),Times(Power(a,Plus(p,Times(CN1,q))),Power(Times(a,Power(v,m)),q),Power(Power(v,Times(m,q)),CN1),Int(Times(u,Power(v,Times(m,p))),x))),And(FreeQ(List(a,m),x),FractionQ(p)))),
ISetDelayed(Int(Times(Power(Times(Power(v_,m_DEFAULT),Power(w_,n_DEFAULT),a_DEFAULT),p_),u_DEFAULT),x_Symbol),
    Condition(Module(List(Set(q,FractionalPart(p))),Times(Power(a,Plus(p,Times(CN1,q))),Power(Times(a,Power(v,m),Power(w,n)),q),Power(Times(Power(v,Times(m,q)),Power(w,Times(n,q))),CN1),Int(Times(u,Power(v,Times(m,p)),Power(w,Times(n,p))),x))),And(FreeQ(a,x),RationalQ(List(m,n,p))))),
ISetDelayed(Int(Times(Power(Power(v_,m_),p_),u_DEFAULT),x_Symbol),
    Condition(Int(Times(u,Power(v,Times(m,p))),x),And(And(FreeQ(p,x),Not(PowerQ(v))),ZeroQ(Simplify(Plus(Power(Power(v,m),p),Times(CN1,Power(v,Times(m,p))))))))),
ISetDelayed(Int(Times(Power(Power(v_,m_),p_),u_DEFAULT),x_Symbol),
    Condition(Module(List(Set(r,Simplify(Times(Power(Power(v,m),p),Power(Power(v,Times(m,p)),CN1))))),Condition(Times(r,Int(Regularize(Times(u,Power(v,Times(m,p))),x),x)),NonzeroQ(Plus(r,Times(CN1,C1))))),And(FreeQ(p,x),Not(PowerQ(v))))),
ISetDelayed(Int(Times(Power(Times(Power(v_,m_DEFAULT),Power(w_,n_DEFAULT)),p_),u_DEFAULT),x_Symbol),
    Condition(Int(Times(u,Power(v,Times(m,p)),Power(w,Times(n,p))),x),And(And(And(FreeQ(p,x),Not(PowerQ(v))),Not(PowerQ(w))),ZeroQ(Simplify(Plus(Power(Times(Power(v,m),Power(w,n)),p),Times(CN1,Power(v,Times(m,p)),Power(w,Times(n,p))))))))),
ISetDelayed(Int(Times(Power(Times(Power(v_,m_DEFAULT),Power(w_,n_DEFAULT)),p_),u_DEFAULT),x_Symbol),
    Condition(Module(List(Set(r,Simplify(Times(Power(Times(Power(v,m),Power(w,n)),p),Power(Times(Power(v,Times(m,p)),Power(w,Times(n,p))),CN1)))),$s("lst")),Condition(CompoundExpression(Set($s("lst"),SplitFreeFactors(Times(Power(v,Times(m,p)),Power(w,Times(n,p))),x)),Times(r,Part($s("lst"),C1),Int(Regularize(Times(u,Part($s("lst"),C2)),x),x))),NonzeroQ(Plus(r,Times(CN1,C1))))),And(And(FreeQ(p,x),Not(PowerQ(v))),Not(PowerQ(w))))),
ISetDelayed(Int(Times(Power(v_,m_),Power(w_,n_),u_DEFAULT),x_Symbol),
    Condition(Module(List(Set(q,Cancel(Times(v,Power(w,CN1))))),Condition(Times(Power(v,m),Power(w,n),Power(Power(q,m),CN1),Int(Times(u,Power(q,m)),x)),IntPolynomialQ(q,x))),And(And(FractionQ(List(m,n)),Equal(Plus(m,n),C0)),IntPolynomialQ(List(v,w),x))))
  );
}
