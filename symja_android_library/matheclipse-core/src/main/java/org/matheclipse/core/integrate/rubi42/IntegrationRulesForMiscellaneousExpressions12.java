package org.matheclipse.core.integrate.rubi42;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi42.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi42.UtilityFunctions.*;

import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;
/** 
 * IntegrationRules rules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IntegrationRulesForMiscellaneousExpressions12 { 
  public static IAST RULES = List( 
SetDelayed(Int(Times(Power(Plus(Times(Log(Times(Power(Plus(Times($p(e,true),$p(x)),$p(d,true)),$p(n,true)),$p(c,true))),$p(b,true)),$p(a,true)),$p(p,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(v,ExpandIntegrand(Power(Plus(a,Times(b,Log(Times(c,Power(Plus(d,Times(e,x)),n))))),p),u,x))),Condition(Int(v,x),SumQ(v))),FreeQ(List(a,b,c,d,e,n,p),x))),
SetDelayed(Int(Times(Log(Times(Power(Plus(Times(Power($p(x),$p(n,true)),$p(b,true)),$p(a,true)),$p(p,true)),$p(c,true))),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(v,ExpandIntegrand(Log(Times(c,Power(Plus(a,Times(b,Power(x,n))),p))),u,x))),Condition(Int(v,x),SumQ(v))),FreeQ(List(a,b,c,n,p),x))),
SetDelayed(Int(Times(Power(Log(Times(Power(Times(Power(Plus(Times($p(b,true),$p(x)),$p(a,true)),$p("n1",true)),Power(Plus(Times($p(d,true),$p(x)),$p(c,true)),$p("n2")),$p("e1",true)),$p(n,true)),$p(e,true))),$p(p,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(v,ExpandIntegrand(Power(Log(Times(e,Power(Times($s("e1"),Power(Plus(a,Times(b,x)),$s("n1")),Power(Plus(c,Times(d,x)),$s("n2"))),n))),p),u,x))),Condition(Int(v,x),SumQ(v))),FreeQ(List(a,b,c,d,e,n,$s("e1"),$s("n1"),p),x))),
SetDelayed(Int(Times(Power($p(y),CN1),$p(u)),$p(x,SymbolHead)),
    Module(List(Set(q,DerivativeDivides(y,u,x))),Condition(Times(q,Log(RemoveContent(y,x))),Not(FalseQ(q))))),
SetDelayed(Int(Times(Power($p(w),CN1),Power($p(y),CN1),$p(u)),$p(x,SymbolHead)),
    Module(List(Set(q,DerivativeDivides(Times(y,w),u,x))),Condition(Times(q,Log(RemoveContent(Times(y,w),x))),Not(FalseQ(q))))),
SetDelayed(Int(Times(Power($p(y),$p(m,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(y,u,x))),Condition(Times(q,Power(y,Plus(m,C1)),Power(Plus(m,C1),CN1)),Not(FalseQ(q)))),And(FreeQ(m,x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power($p(y),$p(m,true)),Power($p(z),$p(n,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(Times(y,z),Times(u,Power(z,Plus(n,Times(CN1,m)))),x))),Condition(Times(q,Power(y,Plus(m,C1)),Power(z,Plus(m,C1)),Power(Plus(m,C1),CN1)),Not(FalseQ(q)))),And(FreeQ(List(m,n),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int($p(u),$p(x,SymbolHead)),
    Module(List(Set(v,SimplifyIntegrand(u,x))),Condition(Int(v,x),SimplerIntegrandQ(v,u,x)))),
SetDelayed(Int(Times(Power(Plus(Times(Power(Plus(Times(Power($p(x),$p(n,true)),$p(b,true)),$p(a,true)),C1D2),$p(e,true)),Times(Power(Plus(Times(Power($p(x),$p(n,true)),$p(d,true)),$p(c,true)),C1D2),$p(f,true))),$p(m)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Power(Plus(Times(a,Power(e,C2)),Times(CN1,c,Power(f,C2))),m),Int(ExpandIntegrand(Times(u,Power(Power(Plus(Times(e,Sqrt(Plus(a,Times(b,Power(x,n))))),Times(CN1,f,Sqrt(Plus(c,Times(d,Power(x,n)))))),m),CN1)),x),x)),And(And(FreeQ(List(a,b,c,d,e,f,n),x),NegativeIntegerQ(m)),ZeroQ(Plus(Times(b,Power(e,C2)),Times(CN1,d,Power(f,C2))))))),
SetDelayed(Int(Times(Power(Plus(Times(Power(Plus(Times(Power($p(x),$p(n,true)),$p(b,true)),$p(a,true)),C1D2),$p(e,true)),Times(Power(Plus(Times(Power($p(x),$p(n,true)),$p(d,true)),$p(c,true)),C1D2),$p(f,true))),$p(m)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Power(Plus(Times(b,Power(e,C2)),Times(CN1,d,Power(f,C2))),m),Int(ExpandIntegrand(Times(u,Power(x,Times(m,n)),Power(Power(Plus(Times(e,Sqrt(Plus(a,Times(b,Power(x,n))))),Times(CN1,f,Sqrt(Plus(c,Times(d,Power(x,n)))))),m),CN1)),x),x)),And(And(FreeQ(List(a,b,c,d,e,f,n),x),NegativeIntegerQ(m)),ZeroQ(Plus(Times(a,Power(e,C2)),Times(CN1,c,Power(f,C2))))))),
SetDelayed(Int(Times(Power(Plus(Times($p(d,true),$p(v)),$p(c,true)),$p(n,true)),Power(Plus(Times($p(b,true),$p(y)),$p(a,true)),$p(m,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(y,u,x))),Condition(Times(q,Subst(Int(Times(Power(Plus(a,Times(b,x)),m),Power(Plus(c,Times(d,x)),n)),x),x,y)),Not(FalseQ(q)))),And(FreeQ(List(a,b,c,d,m,n),x),ZeroQ(Plus(y,Times(CN1,v)))))),
SetDelayed(Int(Times(Power(Plus(Times($p(d,true),$p(v)),$p(c,true)),$p(n,true)),Power(Plus(Times($p(f,true),$p(w)),$p(e,true)),$p(p,true)),Power(Plus(Times($p(b,true),$p(y)),$p(a,true)),$p(m,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(y,u,x))),Condition(Times(q,Subst(Int(Times(Power(Plus(a,Times(b,x)),m),Power(Plus(c,Times(d,x)),n),Power(Plus(e,Times(f,x)),p)),x),x,y)),Not(FalseQ(q)))),And(And(FreeQ(List(a,b,c,d,e,f,m,n,p),x),ZeroQ(Plus(y,Times(CN1,v)))),ZeroQ(Plus(y,Times(CN1,w)))))),
SetDelayed(Int(Times(Power(Plus(Times($p(d,true),$p(v)),$p(c,true)),$p(n,true)),Power(Plus(Times($p(f,true),$p(w)),$p(e,true)),$p(p,true)),Power(Plus(Times($p(b,true),$p(y)),$p(a,true)),$p(m,true)),Power(Plus(Times($p(h,true),$p(z)),$p(g,true)),$p(q,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(r,DerivativeDivides(y,u,x))),Condition(Times(r,Subst(Int(Times(Power(Plus(a,Times(b,x)),m),Power(Plus(c,Times(d,x)),n),Power(Plus(e,Times(f,x)),p),Power(Plus(g,Times(h,x)),q)),x),x,y)),Not(FalseQ(r)))),And(And(And(FreeQ(List(a,b,c,d,e,f,g,h,m,n,p,q),x),ZeroQ(Plus(y,Times(CN1,v)))),ZeroQ(Plus(y,Times(CN1,w)))),ZeroQ(Plus(y,Times(CN1,z)))))),
SetDelayed(Int(Times(Plus(Times(Power($p(y),$p(n)),$p(b,true)),$p(a)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(y,u,x))),Condition(Plus(Times(a,Int(u,x)),Times(b,q,Subst(Int(Power(x,n),x),x,y))),Not(FalseQ(q)))),FreeQ(List(a,b,n),x))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(y),$p(n)),$p(b,true)),$p(a,true)),$p(p)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(y,u,x))),Condition(Times(q,Subst(Int(Power(Plus(a,Times(b,Power(x,n))),p),x),x,y)),Not(FalseQ(q)))),FreeQ(List(a,b,n,p),x))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(y),$p(n)),$p(b,true)),$p(a,true)),$p(p,true)),Power($p(v),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Module(List(q,r),Condition(Times(q,r,Subst(Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,n))),p)),x),x,y)),And(Not(FalseQ(Set(r,Divides(Power(y,m),Power(v,m),x)))),Not(FalseQ(Set(q,DerivativeDivides(y,u,x))))))),FreeQ(List(a,b,m,n,p),x))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(y),$p(n)),$p(b,true)),Times(Power($p(v),$p(j,true)),$p(c,true)),$p(a,true)),$p(p)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(y,u,x))),Condition(Times(q,Subst(Int(Power(Plus(a,Times(b,Power(x,n)),Times(c,Power(x,Times(C2,n)))),p),x),x,y)),Not(FalseQ(q)))),And(And(FreeQ(List(a,b,c,n,p),x),ZeroQ(Plus(j,Times(CN1,C2,n)))),ZeroQ(Plus(y,Times(CN1,v)))))),
SetDelayed(Int(Times(Plus(Times(Power($p(y),$p(n)),$p("B",true)),$p("A")),Power(Plus(Times(Power($p(v),$p(n)),$p(b,true)),Times(Power($p(w),$p(j,true)),$p(c,true)),$p(a,true)),$p(p,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(y,u,x))),Condition(Times(q,Subst(Int(Times(Plus($s("A"),Times($s("B"),Power(x,n))),Power(Plus(a,Times(b,Power(x,n)),Times(c,Power(x,Times(C2,n)))),p)),x),x,y)),Not(FalseQ(q)))),And(And(And(FreeQ(List(a,b,c,$s("A"),$s("B"),n,p),x),ZeroQ(Plus(j,Times(CN1,C2,n)))),ZeroQ(Plus(y,Times(CN1,v)))),ZeroQ(Plus(y,Times(CN1,w)))))),
SetDelayed(Int(Times(Plus(Times(Power($p(y),$p(n)),$p("B",true)),$p("A")),Power(Plus(Times(Power($p(w),$p(j,true)),$p(c,true)),$p(a,true)),$p(p,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(y,u,x))),Condition(Times(q,Subst(Int(Times(Plus($s("A"),Times($s("B"),Power(x,n))),Power(Plus(a,Times(c,Power(x,Times(C2,n)))),p)),x),x,y)),Not(FalseQ(q)))),And(And(FreeQ(List(a,c,$s("A"),$s("B"),n,p),x),ZeroQ(Plus(j,Times(CN1,C2,n)))),ZeroQ(Plus(y,Times(CN1,w)))))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(y),$p(n)),$p(b,true)),Times(Power($p(w),$p(j,true)),$p(c,true)),$p(a,true)),$p(p,true)),Power($p(v),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Module(List(q,r),Condition(Times(q,r,Subst(Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,n)),Times(c,Power(x,Times(C2,n)))),p)),x),x,y)),And(Not(FalseQ(Set(r,Divides(Power(y,m),Power(v,m),x)))),Not(FalseQ(Set(q,DerivativeDivides(y,u,x))))))),And(And(FreeQ(List(a,b,c,m,n,p),x),ZeroQ(Plus(j,Times(CN1,C2,n)))),ZeroQ(Plus(y,Times(CN1,w)))))),
SetDelayed(Int(Times(Plus(Times(Power($p(y),$p(n)),$p("B",true)),$p("A")),Power(Plus(Times(Power($p(v),$p(n)),$p(b,true)),Times(Power($p(w),$p(j,true)),$p(c,true)),$p(a,true)),$p(p,true)),Power($p(z),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Module(List(q,r),Condition(Times(q,r,Subst(Int(Times(Power(x,m),Plus($s("A"),Times($s("B"),Power(x,n))),Power(Plus(a,Times(b,Power(x,n)),Times(c,Power(x,Times(C2,n)))),p)),x),x,y)),And(Not(FalseQ(Set(r,Divides(Power(y,m),Power(z,m),x)))),Not(FalseQ(Set(q,DerivativeDivides(y,u,x))))))),And(And(And(FreeQ(List(a,b,c,$s("A"),$s("B"),m,n,p),x),ZeroQ(Plus(j,Times(CN1,C2,n)))),ZeroQ(Plus(y,Times(CN1,v)))),ZeroQ(Plus(y,Times(CN1,w)))))),
SetDelayed(Int(Times(Plus(Times(Power($p(y),$p(n)),$p("B",true)),$p("A")),Power(Plus(Times(Power($p(w),$p(j,true)),$p(c,true)),$p(a,true)),$p(p,true)),Power($p(z),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Module(List(q,r),Condition(Times(q,r,Subst(Int(Times(Power(x,m),Plus($s("A"),Times($s("B"),Power(x,n))),Power(Plus(a,Times(c,Power(x,Times(C2,n)))),p)),x),x,y)),And(Not(FalseQ(Set(r,Divides(Power(y,m),Power(z,m),x)))),Not(FalseQ(Set(q,DerivativeDivides(y,u,x))))))),And(And(FreeQ(List(a,c,$s("A"),$s("B"),m,n,p),x),ZeroQ(Plus(j,Times(CN1,C2,n)))),ZeroQ(Plus(y,Times(CN1,w)))))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(y),$p(n)),$p(b,true)),$p(a,true)),$p(m,true)),Power(Plus(Times(Power($p(v),$p(n)),$p(d,true)),$p(c,true)),$p(p,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(y,u,x))),Condition(Times(q,Subst(Int(Times(Power(Plus(a,Times(b,Power(x,n))),m),Power(Plus(c,Times(d,Power(x,n))),p)),x),x,y)),Not(FalseQ(q)))),And(FreeQ(List(a,b,c,d,m,n,p),x),ZeroQ(Plus(y,Times(CN1,v)))))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(y),$p(n)),$p(b,true)),$p(a,true)),$p(m,true)),Power(Plus(Times(Power($p(v),$p(n)),$p(d,true)),$p(c,true)),$p(p,true)),Power(Plus(Times(Power($p(w),$p(n)),$p(f,true)),$p(e,true)),$p(q,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Module(List(Set(r,DerivativeDivides(y,u,x))),Condition(Times(r,Subst(Int(Times(Power(Plus(a,Times(b,Power(x,n))),m),Power(Plus(c,Times(d,Power(x,n))),p),Power(Plus(e,Times(f,Power(x,n))),q)),x),x,y)),Not(FalseQ(r)))),And(And(FreeQ(List(a,b,c,d,e,f,m,n,p,q),x),ZeroQ(Plus(y,Times(CN1,v)))),ZeroQ(Plus(y,Times(CN1,w)))))),
SetDelayed(Int(Times(Power($p("F"),$p(v)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(v,u,x))),Condition(Times(q,Power($s("§f"),v),Power(Log($s("§f")),CN1)),Not(FalseQ(q)))),FreeQ($s("§f"),x))),
SetDelayed(Int(Times(Power($p("F"),$p(v)),Power($p(w),$p(m,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(q,DerivativeDivides(v,u,x))),Condition(Times(q,Subst(Int(Times(Power(x,m),Power($s("§f"),x)),x),x,v)),Not(FalseQ(q)))),And(FreeQ(List($s("§f"),m),x),ZeroQ(Plus(w,Times(CN1,v)))))),
SetDelayed(Int(Times(Power($p(x),$p(m,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Times(Power(Plus(m,C1),CN1),Subst(Int(SubstFor(Power(x,Plus(m,C1)),u,x),x),x,Power(x,Plus(m,C1)))),And(And(FreeQ(m,x),NonzeroQ(Plus(m,C1))),FunctionOfQ(Power(x,Plus(m,C1)),u,x)))),
SetDelayed(Int($p(u),$p(x,SymbolHead)),
    Module(List(Set($s("lst"),SubstForFractionalPowerOfLinear(u,x))),Condition(Times(Part($s("lst"),C2),Part($s("lst"),C4),Subst(Int(Part($s("lst"),C1),x),x,Power(Part($s("lst"),C3),Power(Part($s("lst"),C2),CN1)))),And(NotFalseQ($s("lst")),SubstForFractionalPowerQ(u,Part($s("lst"),C3),x))))),
SetDelayed(Int($p(u),$p(x,SymbolHead)),
    Module(List(Set($s("lst"),SubstForFractionalPowerOfQuotientOfLinears(u,x))),Condition(Times(Part($s("lst"),C2),Part($s("lst"),C4),Subst(Int(Part($s("lst"),C1),x),x,Power(Part($s("lst"),C3),Power(Part($s("lst"),C2),CN1)))),NotFalseQ($s("lst"))))),
SetDelayed(Int(Times(Power(Times(Power($p(v),$p(m,true)),Power($p(w),$p(n,true)),$p(c,true)),$p(p)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Power(c,Plus(p,Times(CN1,C1D2))),Sqrt(Times(c,Power(v,m),Power(w,n))),Power(Times(Power(v,Times(C1D2,m)),Power(w,Times(C1D2,n))),CN1),Int(Times(u,Power(v,Times(m,p)),Power(w,Times(n,p))),x)),And(And(And(FreeQ(List(c,m,n,p),x),Not(FreeQ(v,x))),Not(FreeQ(w,x))),PositiveIntegerQ(Plus(p,C1D2))))),
SetDelayed(Int(Times(Power(Times(Power($p(v),$p(m,true)),Power($p(w),$p(n,true)),$p(c,true)),$p(p)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Power(c,Plus(p,C1D2)),Power(v,Times(C1D2,m)),Power(w,Times(C1D2,n)),Power(Sqrt(Times(c,Power(v,m),Power(w,n))),CN1),Int(Times(u,Power(v,Times(m,p)),Power(w,Times(n,p))),x)),And(And(And(FreeQ(List(c,m,n,p),x),Not(FreeQ(v,x))),Not(FreeQ(w,x))),NegativeIntegerQ(Plus(p,Times(CN1,C1D2)))))),
SetDelayed(Int(Times(Power(Times(Power($p(v),$p(m,true)),Power($p(w),$p(n,true)),$p(c,true)),$p(p)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Power(Times(c,Power(v,m),Power(w,n)),p),Power(Times(Power(v,Times(m,p)),Power(w,Times(n,p))),CN1),Int(Times(u,Power(v,Times(m,p)),Power(w,Times(n,p))),x)),And(And(And(FreeQ(List(c,m,n,p),x),Not(FreeQ(v,x))),Not(FreeQ(w,x))),Not(IntegerQ(Times(C2,p)))))),
SetDelayed(Int(Times(Power(Times(Power($p(v),$p(m,true)),Power($p(w),$p(n,true)),Power($p(z),$p(q,true)),$p(c,true)),$p(p)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Power(Times(c,Power(v,m),Power(w,n),Power(z,q)),p),Power(Times(Power(v,Times(m,p)),Power(w,Times(n,p)),Power(z,Times(p,q))),CN1),Int(Times(u,Power(v,Times(m,p)),Power(w,Times(n,p)),Power(z,Times(p,q))),x)),And(And(And(And(FreeQ(List(c,m,n,p,q),x),Not(FreeQ(v,x))),Not(FreeQ(w,x))),Not(FreeQ(z,x))),Not(IntegerQ(p))))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(v),$p(n)),$p(b,true)),$p(a,true)),$p(p)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Power(Plus(a,Times(b,Power(v,n))),p),Power(Times(Power(v,Times(n,p)),Power(Plus(b,Times(a,Power(v,Times(CN1,n)))),p)),CN1),Int(Times(u,Power(v,Times(n,p)),Power(Plus(b,Times(a,Power(v,Times(CN1,n)))),p)),x)),And(And(And(And(FreeQ(List(a,b,p),x),BinomialQ(v,x)),Not(LinearQ(v,x))),Not(IntegerQ(p))),NegativeIntegerQ(n)))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(v),$p(n)),Power($p(x),$p(m,true)),$p(b,true)),$p(a,true)),$p(p)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Power(Plus(a,Times(b,Power(x,m),Power(v,n))),p),Power(Times(Power(v,Times(n,p)),Power(Plus(Times(b,Power(x,m)),Times(a,Power(v,Times(CN1,n)))),p)),CN1),Int(Times(u,Power(v,Times(n,p)),Power(Plus(Times(b,Power(x,m)),Times(a,Power(v,Times(CN1,n)))),p)),x)),And(And(And(And(FreeQ(List(a,b,m,p),x),BinomialQ(v,x)),Not(LinearQ(v,x))),Not(IntegerQ(p))),NegativeIntegerQ(n)))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(x),$p(r,true)),$p(a,true)),Times(Power($p(x),$p(s,true)),$p(b,true))),$p(m)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Power(Plus(Times(a,Power(x,r)),Times(b,Power(x,s))),m),Power(Times(Power(x,Times(m,r)),Power(Plus(a,Times(b,Power(x,Plus(s,Times(CN1,r))))),m)),CN1),Int(Times(u,Power(x,Times(m,r)),Power(Plus(a,Times(b,Power(x,Plus(s,Times(CN1,r))))),m)),x)),And(And(FreeQ(List(a,b,m,r,s),x),Not(IntegerQ(m))),PosQ(Plus(s,Times(CN1,r)))))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(x),$p(n)),$p(b,true)),$p(a)),CN1),$p(u)),$p(x,SymbolHead)),
    Condition(Int(RationalFunctionExpand(Times(u,Power(Plus(a,Times(b,Power(x,n))),CN1)),x),x),And(FreeQ(List(a,b),x),PositiveIntegerQ(n)))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(x),$p(n,true)),$p(b,true)),Times(Power($p(x),$p(j,true)),$p(c,true)),$p(a,true)),$p(p,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Times(Power(Times(Power(C4,p),Power(c,p)),CN1),Int(Times(u,Power(Plus(b,Times(C2,c,Power(x,n))),Times(C2,p))),x)),And(And(And(And(FreeQ(List(a,b,c,n),x),ZeroQ(Plus(j,Times(CN1,C2,n)))),ZeroQ(Plus(Power(b,C2),Times(CN1,C4,a,c)))),IntegerQ(p)),Not(AlgebraicFunctionQ(u,x))))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(x),$p(n,true)),$p(b,true)),Times(Power($p(x),$p(j,true)),$p(c,true)),$p(a,true)),$p(p)),$p(u)),$p(x,SymbolHead)),
    Condition(Times(Power(Plus(a,Times(b,Power(x,n)),Times(c,Power(x,Times(C2,n)))),p),Power(Power(Plus(b,Times(C2,c,Power(x,n))),Times(C2,p)),CN1),Int(Times(u,Power(Plus(b,Times(C2,c,Power(x,n))),Times(C2,p))),x)),And(And(And(And(FreeQ(List(a,b,c,n,p),x),ZeroQ(Plus(j,Times(CN1,C2,n)))),ZeroQ(Plus(Power(b,C2),Times(CN1,C4,a,c)))),Not(IntegerQ(p))),Not(AlgebraicFunctionQ(u,x))))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(x),$p(n,true)),$p(b,true)),Times(Power($p(x),$p(j,true)),$p(c,true)),$p(a,true)),CN1),$p(u)),$p(x,SymbolHead)),
    Condition(Int(RationalFunctionExpand(Times(u,Power(Plus(a,Times(b,Power(x,n)),Times(c,Power(x,Times(C2,n)))),CN1)),x),x),And(And(FreeQ(List(a,b,c),x),ZeroQ(Plus(j,Times(CN1,C2,n)))),PositiveIntegerQ(n)))),
SetDelayed(Int(Times(Power($p(v),$p(p)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(m,Exponent(u,x)),Set(n,Exponent(v,x))),Condition(Module(List(Set(c,Times(Coefficient(u,x,m),Power(Times(Coefficient(v,x,n),Plus(m,C1,Times(n,p))),CN1))),w),CompoundExpression(CompoundExpression(Set(c,Times(Coefficient(u,x,m),Power(Times(Coefficient(v,x,n),Plus(m,C1,Times(n,p))),CN1))),Set(w,Apart(Plus(u,Times(CN1,c,Power(x,Plus(m,Times(CN1,n))),Plus(Times(Plus(m,Times(CN1,n),C1),v),Times(Plus(p,C1),x,D(v,x))))),x))),If(ZeroQ(w),Times(c,Power(x,Plus(m,Times(CN1,n),C1)),Power(v,Plus(p,C1))),Plus(Times(c,Power(x,Plus(m,Times(CN1,n),C1)),Power(v,Plus(p,C1))),Int(Times(w,Power(v,p)),x))))),And(And(And(GreaterEqual(Plus(m,C1),n),Greater(n,C1)),Less(Plus(m,Times(n,p)),CN1)),FalseQ(DerivativeDivides(v,u,x))))),And(And(And(And(And(And(RationalQ(p),Less(p,CN1)),PolynomialQ(u,x)),PolynomialQ(v,x)),SumQ(v)),Not(And(MonomialQ(u,x),BinomialQ(v,x)))),Not(And(ZeroQ(Coefficient(u,x,C0)),ZeroQ(Coefficient(v,x,C0))))))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(x),$p(m,true)),$p(a,true)),Times(Power(Times(Power($p(x),$p(n)),$p(c,true)),C1D2),$p(b,true))),CN1),$p(u,true)),$p(x,SymbolHead)),
    Condition(Int(Times(u,Plus(Times(a,Power(x,m)),Times(CN1,b,Sqrt(Times(c,Power(x,n))))),Power(Plus(Times(Power(a,C2),Power(x,Times(C2,m))),Times(CN1,Power(b,C2),c,Power(x,n))),CN1)),x),FreeQ(List(a,b,c,m,n),x))),
SetDelayed(Int($p(u),$p(x,SymbolHead)),
    Module(List(Set($s("lst"),FunctionOfLinear(u,x))),Condition(Dist(Power(Part($s("lst"),C3),CN1),Subst(Int(Part($s("lst"),C1),x),x,Plus(Part($s("lst"),C2),Times(Part($s("lst"),C3),x))),x),Not(FalseQ($s("lst")))))),
SetDelayed(Int(Times(Power($p(x),CN1),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set($s("lst"),PowerVariableExpn(u,C0,x))),Condition(Times(Power(Part($s("lst"),C2),CN1),Subst(Int(NormalizeIntegrand(Simplify(Times(Part($s("lst"),C1),Power(x,CN1))),x),x),x,Power(Times(Part($s("lst"),C3),x),Part($s("lst"),C2)))),And(Not(FalseQ($s("lst"))),NonzeroQ(Part($s("lst"),C2))))),And(NonsumQ(u),Not(RationalFunctionQ(u,x))))),
SetDelayed(Int(Times(Power($p(x),$p(m,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set($s("lst"),PowerVariableExpn(u,Plus(m,C1),x))),Condition(Times(Power(Part($s("lst"),C2),CN1),Subst(Int(NormalizeIntegrand(Simplify(Times(Part($s("lst"),C1),Power(x,CN1))),x),x),x,Power(Times(Part($s("lst"),C3),x),Part($s("lst"),C2)))),And(NotFalseQ($s("lst")),NonzeroQ(Plus(Part($s("lst"),C2),Times(CN1,m),Times(CN1,C1)))))),And(And(And(IntegerQ(m),Unequal(m,CN1)),NonsumQ(u)),Or(Greater(m,C0),Not(AlgebraicFunctionQ(u,x)))))),
SetDelayed(Int(Times(Power($p(x),$p(m)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set(k,Denominator(m))),Times(k,Subst(Int(Times(Power(x,Plus(Times(k,Plus(m,C1)),Times(CN1,C1))),ReplaceAll(u,Rule(x,Power(x,k)))),x),x,Power(x,Power(k,CN1))))),FractionQ(m))),
SetDelayed(Int($p(u),$p(x,SymbolHead)),
    Condition(Module(List(Set($s("lst"),FunctionOfSquareRootOfQuadratic(u,x))),Condition(Times(C2,Subst(Int(Part($s("lst"),C1),x),x,Part($s("lst"),C2))),Not(FalseQ($s("lst"))))),EulerIntegrandQ(u,x))),
SetDelayed(Int($p(u),$p(x,SymbolHead)),
    Condition(Module(List(Set($s("lst"),FunctionOfSquareRootOfQuadratic(u,x))),Condition(Times(C2,Subst(Int(Part($s("lst"),C1),x),x,Part($s("lst"),C2))),Not(FalseQ($s("lst"))))),EulerIntegrandQ(u,x))),
SetDelayed(Int($p(u),$p(x,SymbolHead)),
    Condition(Module(List(Set($s("lst"),FunctionOfSquareRootOfQuadratic(u,x))),Condition(Times(C2,Subst(Int(Part($s("lst"),C1),x),x,Part($s("lst"),C2))),Not(FalseQ($s("lst"))))),EulerIntegrandQ(u,x))),
SetDelayed(Int(Power(Plus(Times(Power($p(v),C2),$p(b,true)),$p(a)),CN1),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(Times(C2,a),CN1),Int(Together(Power(Plus(C1,Times(CN1,v,Power(Rt(Times(CN1,a,Power(b,CN1)),C2),CN1))),CN1)),x)),Times(Power(Times(C2,a),CN1),Int(Together(Power(Plus(C1,Times(v,Power(Rt(Times(CN1,a,Power(b,CN1)),C2),CN1))),CN1)),x))),FreeQ(List(a,b),x)))
  );
}
