package org.matheclipse.core.integrate.rubi;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctions.*;

import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;
/** 
 * IndefiniteIntegrationRules rules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IndefiniteIntegrationRules14 { 
  public static IAST RULES = List( 
ISetDelayed(Int(CosIntegral(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),CosIntegral(Plus(a,Times(b,x))),Power(b,CN1)),Times(CN1,Sin(Plus(a,Times(b,x))),Power(b,CN1))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Power(CosIntegral(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),C2),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Power(CosIntegral(Plus(a,Times(b,x))),C2),Power(b,CN1)),Times(CN1,Dist(C2,Int(Times(Cos(Plus(a,Times(b,x))),CosIntegral(Plus(a,Times(b,x)))),x)))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(CosIntegral(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),CosIntegral(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Cos(Plus(a,Times(b,x))),Power(Plus(a,Times(b,x)),CN1)),x)))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(CosIntegral(Times(b_DEFAULT,x_)),C2),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(CosIntegral(Times(b,x)),C2),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(C2,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Cos(Times(b,x)),CosIntegral(Times(b,x))),x)))),And(And(FreeQ(b,x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Power(CosIntegral(Plus(Times(b_DEFAULT,x_),a_)),C2),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(CosIntegral(Plus(a,Times(b,x))),C2),Power(Plus(m,C1),CN1)),Times(a,Power(x,m),Power(CosIntegral(Plus(a,Times(b,x))),C2),Power(Times(b,Plus(m,C1)),CN1)),Times(CN1,Dist(Times(C2,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Cos(Plus(a,Times(b,x))),CosIntegral(Plus(a,Times(b,x)))),x))),Times(CN1,Dist(Times(a,m,Power(Times(b,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(CosIntegral(Plus(a,Times(b,x))),C2)),x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(CosIntegral(Plus(Times($p(d,true),x_),c_DEFAULT)),Sin(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition(Plus(Times(CN1,Cos(Plus(a,Times(b,x))),CosIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Dist(Times(d,Power(b,CN1)),Int(Times(Cos(Plus(a,Times(b,x))),Cos(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),FreeQ(List(a,b,c,d),x))),
ISetDelayed(Int(Times(CosIntegral(Plus(Times($p(d,true),x_),c_DEFAULT)),Power(x_,m_DEFAULT),Sin(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition(Plus(Times(CN1,Power(x,m),Cos(Plus(a,Times(b,x))),CosIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Dist(Times(d,Power(b,CN1)),Int(Times(Power(x,m),Cos(Plus(a,Times(b,x))),Cos(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x)),Dist(Times(m,Power(b,CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Cos(Plus(a,Times(b,x))),CosIntegral(Plus(c,Times(d,x)))),x))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(CosIntegral(Plus(Times($p(d,true),x_),c_DEFAULT)),Power(x_,m_),Sin(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Sin(Plus(a,Times(b,x))),CosIntegral(Plus(c,Times(d,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(d,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Sin(Plus(a,Times(b,x))),Cos(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Cos(Plus(a,Times(b,x))),CosIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Less(m,CN1)))),
ISetDelayed(Int(Times(Cos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CosIntegral(Plus(Times($p(d,true),x_),c_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Sin(Plus(a,Times(b,x))),CosIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Sin(Plus(a,Times(b,x))),Cos(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x)))),FreeQ(List(a,b,c,d),x))),
ISetDelayed(Int(Times(Cos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CosIntegral(Plus(Times($p(d,true),x_),c_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,m),Sin(Plus(a,Times(b,x))),CosIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Power(x,m),Sin(Plus(a,Times(b,x))),Cos(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),Times(CN1,Dist(Times(m,Power(b,CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Sin(Plus(a,Times(b,x))),CosIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Cos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CosIntegral(Plus(Times($p(d,true),x_),c_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Cos(Plus(a,Times(b,x))),CosIntegral(Plus(c,Times(d,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(d,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Cos(Plus(a,Times(b,x))),Cos(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Sin(Plus(a,Times(b,x))),CosIntegral(Plus(c,Times(d,x)))),x))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Less(m,CN1)))),
ISetDelayed(Int(SinhIntegral(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),SinhIntegral(Plus(a,Times(b,x))),Power(b,CN1)),Times(CN1,Cosh(Plus(a,Times(b,x))),Power(b,CN1))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Power(SinhIntegral(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),C2),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Power(SinhIntegral(Plus(a,Times(b,x))),C2),Power(b,CN1)),Times(CN1,Dist(C2,Int(Times(Sinh(Plus(a,Times(b,x))),SinhIntegral(Plus(a,Times(b,x)))),x)))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),SinhIntegral(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),SinhIntegral(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Sinh(Plus(a,Times(b,x))),Power(Plus(a,Times(b,x)),CN1)),x)))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(SinhIntegral(Times(b_DEFAULT,x_)),C2),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(SinhIntegral(Times(b,x)),C2),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(C2,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Sinh(Times(b,x)),SinhIntegral(Times(b,x))),x)))),And(And(FreeQ(b,x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Power(SinhIntegral(Plus(Times(b_DEFAULT,x_),a_)),C2),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(SinhIntegral(Plus(a,Times(b,x))),C2),Power(Plus(m,C1),CN1)),Times(a,Power(x,m),Power(SinhIntegral(Plus(a,Times(b,x))),C2),Power(Times(b,Plus(m,C1)),CN1)),Times(CN1,Dist(Times(C2,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Sinh(Plus(a,Times(b,x))),SinhIntegral(Plus(a,Times(b,x)))),x))),Times(CN1,Dist(Times(a,m,Power(Times(b,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(SinhIntegral(Plus(a,Times(b,x))),C2)),x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Sinh(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),SinhIntegral(Plus(Times($p(d,true),x_),c_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Cosh(Plus(a,Times(b,x))),SinhIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Cosh(Plus(a,Times(b,x))),Sinh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x)))),FreeQ(List(a,b,c,d),x))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Sinh(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),SinhIntegral(Plus(Times($p(d,true),x_),c_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(x,m),Cosh(Plus(a,Times(b,x))),SinhIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Power(x,m),Cosh(Plus(a,Times(b,x))),Sinh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),Times(CN1,Dist(Times(m,Power(b,CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Cosh(Plus(a,Times(b,x))),SinhIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Power(x_,m_),Sinh(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),SinhIntegral(Plus(Times($p(d,true),x_),c_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Sinh(Plus(a,Times(b,x))),SinhIntegral(Plus(c,Times(d,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(d,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Sinh(Plus(a,Times(b,x))),Sinh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Cosh(Plus(a,Times(b,x))),SinhIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Less(m,CN1)))),
ISetDelayed(Int(Times(Cosh(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),SinhIntegral(Plus(Times($p(d,true),x_),c_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Sinh(Plus(a,Times(b,x))),SinhIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Sinh(Plus(a,Times(b,x))),Sinh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x)))),FreeQ(List(a,b,c,d),x))),
ISetDelayed(Int(Times(Cosh(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Power(x_,m_DEFAULT),SinhIntegral(Plus(Times($p(d,true),x_),c_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(x,m),Sinh(Plus(a,Times(b,x))),SinhIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Power(x,m),Sinh(Plus(a,Times(b,x))),Sinh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),Times(CN1,Dist(Times(m,Power(b,CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Sinh(Plus(a,Times(b,x))),SinhIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Cosh(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Power(x_,m_DEFAULT),SinhIntegral(Plus(Times($p(d,true),x_),c_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Cosh(Plus(a,Times(b,x))),SinhIntegral(Plus(c,Times(d,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(d,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Cosh(Plus(a,Times(b,x))),Sinh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Sinh(Plus(a,Times(b,x))),SinhIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Less(m,CN1)))),
ISetDelayed(Int(CoshIntegral(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),CoshIntegral(Plus(a,Times(b,x))),Power(b,CN1)),Times(CN1,Sinh(Plus(a,Times(b,x))),Power(b,CN1))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Power(CoshIntegral(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),C2),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Power(CoshIntegral(Plus(a,Times(b,x))),C2),Power(b,CN1)),Times(CN1,Dist(C2,Int(Times(Cosh(Plus(a,Times(b,x))),CoshIntegral(Plus(a,Times(b,x)))),x)))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(CoshIntegral(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),CoshIntegral(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Cosh(Plus(a,Times(b,x))),Power(Plus(a,Times(b,x)),CN1)),x)))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(CoshIntegral(Times(b_DEFAULT,x_)),C2),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(CoshIntegral(Times(b,x)),C2),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(C2,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Cosh(Times(b,x)),CoshIntegral(Times(b,x))),x)))),And(And(FreeQ(b,x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Power(CoshIntegral(Plus(Times(b_DEFAULT,x_),a_)),C2),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(CoshIntegral(Plus(a,Times(b,x))),C2),Power(Plus(m,C1),CN1)),Times(a,Power(x,m),Power(CoshIntegral(Plus(a,Times(b,x))),C2),Power(Times(b,Plus(m,C1)),CN1)),Times(CN1,Dist(Times(C2,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Cosh(Plus(a,Times(b,x))),CoshIntegral(Plus(a,Times(b,x)))),x))),Times(CN1,Dist(Times(a,m,Power(Times(b,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(CoshIntegral(Plus(a,Times(b,x))),C2)),x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(CoshIntegral(Plus(Times($p(d,true),x_),c_DEFAULT)),Sinh(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Cosh(Plus(a,Times(b,x))),CoshIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Cosh(Plus(a,Times(b,x))),Cosh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x)))),FreeQ(List(a,b,c,d),x))),
ISetDelayed(Int(Times(CoshIntegral(Plus(Times($p(d,true),x_),c_DEFAULT)),Power(x_,m_DEFAULT),Sinh(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(x,m),Cosh(Plus(a,Times(b,x))),CoshIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Power(x,m),Cosh(Plus(a,Times(b,x))),Cosh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),Times(CN1,Dist(Times(m,Power(b,CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Cosh(Plus(a,Times(b,x))),CoshIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(CoshIntegral(Plus(Times($p(d,true),x_),c_DEFAULT)),Power(x_,m_),Sinh(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Sinh(Plus(a,Times(b,x))),CoshIntegral(Plus(c,Times(d,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(d,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Sinh(Plus(a,Times(b,x))),Cosh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Cosh(Plus(a,Times(b,x))),CoshIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Less(m,CN1)))),
ISetDelayed(Int(Times(Cosh(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CoshIntegral(Plus(Times($p(d,true),x_),c_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Sinh(Plus(a,Times(b,x))),CoshIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Sinh(Plus(a,Times(b,x))),Cosh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x)))),FreeQ(List(a,b,c,d),x))),
ISetDelayed(Int(Times(Cosh(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CoshIntegral(Plus(Times($p(d,true),x_),c_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,m),Sinh(Plus(a,Times(b,x))),CoshIntegral(Plus(c,Times(d,x))),Power(b,CN1)),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Power(x,m),Sinh(Plus(a,Times(b,x))),Cosh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),Times(CN1,Dist(Times(m,Power(b,CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Sinh(Plus(a,Times(b,x))),CoshIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Cosh(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CoshIntegral(Plus(Times($p(d,true),x_),c_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Cosh(Plus(a,Times(b,x))),CoshIntegral(Plus(c,Times(d,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(d,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Cosh(Plus(a,Times(b,x))),Cosh(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1)),x))),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Sinh(Plus(a,Times(b,x))),CoshIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Less(m,CN1)))),
ISetDelayed(Int(LogIntegral(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),LogIntegral(Plus(a,Times(b,x))),Power(b,CN1)),Times(CN1,ExpIntegralEi(Times(C2,Log(Plus(a,Times(b,x))))),Power(b,CN1))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(LogIntegral(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),LogIntegral(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Power(Log(Plus(a,Times(b,x))),CN1)),x)))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Gamma(n_,Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Gamma(n,Plus(a,Times(b,x))),Power(b,CN1)),Times(CN1,Gamma(Plus(n,C1),Plus(a,Times(b,x))),Power(b,CN1))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(Gamma(n_,Times(a_DEFAULT,x_)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Gamma(n,Times(a,x)),Power(Plus(m,C1),CN1)),Times(CN1,Gamma(Plus(m,n,C1),Times(a,x)),Power(Times(Plus(m,C1),Power(a,Plus(m,C1))),CN1))),And(FreeQ(List(a,n),x),Or(IntIntegerQ(m),PositiveQ(a))))),
ISetDelayed(Int(Times(Gamma(n_,Times(a_,x_)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Gamma(n,Times(a,x)),Power(Plus(m,C1),CN1)),Times(CN1,Power(x,Plus(m,C1)),Gamma(Plus(m,n,C1),Times(a,x)),Power(Times(Plus(m,C1),Power(Times(a,x),Plus(m,C1))),CN1))),FreeQ(List(a,m,n),x))),
ISetDelayed(Int(Times(Gamma(n_,Plus(Times(b_DEFAULT,x_),a_)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,m),Plus(a,Times(b,x)),Gamma(n,Plus(a,Times(b,x))),Power(Times(b,Plus(m,C1)),CN1)),Times(CN1,Power(x,m),Gamma(Plus(n,C1),Plus(a,Times(b,x))),Power(Times(b,Plus(m,C1)),CN1)),Times(CN1,Dist(Times(a,m,Power(Times(b,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Gamma(n,Plus(a,Times(b,x)))),x))),Dist(Times(m,Power(Times(b,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Gamma(Plus(n,C1),Plus(a,Times(b,x)))),x))),And(And(FreeQ(List(a,b,n),x),RationalQ(m)),Greater(m,C0)))),
ISetDelayed(Int(LogGamma(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Times(PolyGamma(CN2,Plus(a,Times(b,x))),Power(b,CN1)),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(LogGamma(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,m),PolyGamma(CN2,Plus(a,Times(b,x))),Power(b,CN1)),Times(CN1,Dist(Times(m,Power(b,CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),PolyGamma(CN2,Plus(a,Times(b,x)))),x)))),And(And(FreeQ(List(a,b),x),RationalQ(m)),Greater(m,C0)))),
ISetDelayed(Int(PolyGamma(n_,Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Times(PolyGamma(Plus(n,Times(CN1,C1)),Plus(a,Times(b,x))),Power(b,CN1)),FreeQ(List(a,b,n),x))),
ISetDelayed(Int(Times(PolyGamma(n_,Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,m),PolyGamma(Plus(n,Times(CN1,C1)),Plus(a,Times(b,x))),Power(b,CN1)),Times(CN1,Dist(Times(m,Power(b,CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),PolyGamma(Plus(n,Times(CN1,C1)),Plus(a,Times(b,x)))),x)))),And(And(FreeQ(List(a,b,n),x),RationalQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(PolyGamma(n_,Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),PolyGamma(n,Plus(a,Times(b,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),PolyGamma(Plus(n,C1),Plus(a,Times(b,x)))),x)))),And(And(FreeQ(List(a,b,n),x),RationalQ(m)),Less(m,CN1)))),
ISetDelayed(Int(Times(PolyGamma(C0,Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Power(Gamma(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),n_DEFAULT)),x_Symbol),
    Condition(Times(Power(Gamma(Plus(a,Times(b,x))),n),Power(Times(b,n),CN1)),FreeQ(List(a,b,n),x))),
ISetDelayed(Int(Times(PolyGamma(C0,Plus(Times(b_DEFAULT,x_),c_DEFAULT)),Power(Factorial(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),n_DEFAULT)),x_Symbol),
    Condition(Times(Power(Factorial(Plus(a,Times(b,x))),n),Power(Times(b,n),CN1)),And(FreeQ(List(a,b,c,n),x),ZeroQ(Plus(a,Times(CN1,c),C1))))),
ISetDelayed(Int(Zeta(C2,Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Int(PolyGamma(C1,Plus(a,Times(b,x))),x),FreeQ(List(a,b),x))),
ISetDelayed(Int(Zeta(s_,Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Times(CN1,Zeta(Plus(s,Times(CN1,C1)),Plus(a,Times(b,x))),Power(Times(b,Plus(s,Times(CN1,C1))),CN1)),And(And(FreeQ(List(a,b,s),x),NonzeroQ(Plus(s,Times(CN1,C1)))),NonzeroQ(Plus(s,Times(CN1,C2)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Zeta(C2,Plus(Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition(Int(Times(Power(x,m),PolyGamma(C1,Plus(a,Times(b,x)))),x),And(FreeQ(List(a,b),x),RationalQ(m)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Zeta(s_,Plus(Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition(Plus(Times(CN1,Power(x,m),Zeta(Plus(s,Times(CN1,C1)),Plus(a,Times(b,x))),Power(Times(b,Plus(s,Times(CN1,C1))),CN1)),Dist(Times(m,Power(Times(b,Plus(s,Times(CN1,C1))),CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Zeta(Plus(s,Times(CN1,C1)),Plus(a,Times(b,x)))),x))),And(And(And(And(FreeQ(List(a,b,s),x),RationalQ(m)),Greater(m,C0)),NonzeroQ(Plus(s,Times(CN1,C1)))),NonzeroQ(Plus(s,Times(CN1,C2)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Zeta(s_,Plus(Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Zeta(s,Plus(a,Times(b,x))),Power(Plus(m,C1),CN1)),Dist(Times(b,s,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Zeta(Plus(s,C1),Plus(a,Times(b,x)))),x))),And(And(And(And(FreeQ(List(a,b,s),x),RationalQ(m)),Less(m,CN1)),NonzeroQ(Plus(s,Times(CN1,C1)))),NonzeroQ(Plus(s,Times(CN1,C2)))))),
ISetDelayed(Int(PolyLog(n_,Times(Power(Times(Power(x_,p_DEFAULT),b_DEFAULT),q_DEFAULT),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(x,PolyLog(n,Times(a,Power(Times(b,Power(x,p)),q)))),Times(CN1,Dist(Times(p,q),Int(PolyLog(Plus(n,Times(CN1,C1)),Times(a,Power(Times(b,Power(x,p)),q))),x)))),And(And(FreeQ(List(a,b,p,q),x),RationalQ(n)),Greater(n,C0)))),
ISetDelayed(Int(PolyLog(n_,Times(Power(Times(Power(x_,p_DEFAULT),b_DEFAULT),q_DEFAULT),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(x,PolyLog(Plus(n,C1),Times(a,Power(Times(b,Power(x,p)),q))),Power(Times(p,q),CN1)),Times(CN1,Dist(Power(Times(p,q),CN1),Int(PolyLog(Plus(n,C1),Times(a,Power(Times(b,Power(x,p)),q))),x)))),And(And(FreeQ(List(a,b,p,q),x),RationalQ(n)),Less(n,CN1)))),
ISetDelayed(Int(Times(PolyLog(n_,Times(Power(Times(Power(x_,p_DEFAULT),b_DEFAULT),q_DEFAULT),a_DEFAULT)),Power(x_,CN1)),x_Symbol),
    Condition(Times(PolyLog(Plus(n,C1),Times(a,Power(Times(b,Power(x,p)),q))),Power(Times(p,q),CN1)),FreeQ(List(a,b,n,p,q),x))),
ISetDelayed(Int(Times(PolyLog(n_,Times(Power(Times(Power(x_,p_DEFAULT),b_DEFAULT),q_DEFAULT),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),PolyLog(n,Times(a,Power(Times(b,Power(x,p)),q))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(p,q,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),PolyLog(Plus(n,Times(CN1,C1)),Times(a,Power(Times(b,Power(x,p)),q)))),x)))),And(And(And(FreeQ(List(a,b,m,p,q),x),RationalQ(n)),Greater(n,C0)),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(PolyLog(n_,Times(Power(Times(Power(x_,p_DEFAULT),b_DEFAULT),q_DEFAULT),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),PolyLog(Plus(n,C1),Times(a,Power(Times(b,Power(x,p)),q))),Power(Times(p,q),CN1)),Times(CN1,Dist(Times(Plus(m,C1),Power(Times(p,q),CN1)),Int(Times(Power(x,m),PolyLog(Plus(n,C1),Times(a,Power(Times(b,Power(x,p)),q)))),x)))),And(And(And(FreeQ(List(a,b,m,p,q),x),RationalQ(n)),Less(n,CN1)),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(PolyLog(n_,u_),Power(Plus(Times(b_DEFAULT,x_),a_),CN1)),x_Symbol),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(PolyLog(n,Regularize(Subst(u,x,Plus(Times(CN1,a,Power(b,CN1)),Times(x,Power(b,CN1)))),x)),Power(x,CN1)),x),x,Plus(a,Times(b,x)))),FreeQ(List(a,b,n),x))),
ISetDelayed(Int(PolyLog(n_,Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),p_DEFAULT),c_DEFAULT)),x_Symbol),
    Condition(Plus(Times(x,PolyLog(n,Times(c,Power(Plus(a,Times(b,x)),p)))),Times(CN1,Dist(p,Int(PolyLog(Plus(n,Times(CN1,C1)),Times(c,Power(Plus(a,Times(b,x)),p))),x))),Dist(Times(a,p),Int(Times(PolyLog(Plus(n,Times(CN1,C1)),Times(c,Power(Plus(a,Times(b,x)),p))),Power(Plus(a,Times(b,x)),CN1)),x))),And(And(FreeQ(List(a,b,c,p),x),RationalQ(n)),Greater(n,C0)))),
ISetDelayed(Int(Times(PolyLog(n_,Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),p_DEFAULT),c_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),PolyLog(n,Times(c,Power(Plus(a,Times(b,x)),p))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(b,p,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),PolyLog(Plus(n,Times(CN1,C1)),Times(c,Power(Plus(a,Times(b,x)),p))),Power(Plus(a,Times(b,x)),CN1)),x)))),And(And(And(And(FreeQ(List(a,b,c,m,p),x),RationalQ(n)),Greater(n,C0)),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(PolyLog(q_,Times(Power(x_,m_DEFAULT),b_DEFAULT)),Power(Log(Times(Power(x_,n_DEFAULT),a_DEFAULT)),p_DEFAULT),Power(x_,CN1)),x_Symbol),
    Condition(Plus(Times(Power(Log(Times(a,Power(x,n))),p),PolyLog(Plus(q,C1),Times(b,Power(x,m))),Power(m,CN1)),Times(CN1,Dist(Times(n,p,Power(m,CN1)),Int(Times(Power(Log(Times(a,Power(x,n))),Plus(p,Times(CN1,C1))),PolyLog(Plus(q,C1),Times(b,Power(x,m))),Power(x,CN1)),x)))),And(And(FreeQ(List(a,b,m,n,q),x),RationalQ(p)),Greater(p,C0)))),
ISetDelayed(Int(Power(ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),p_DEFAULT),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Power(ProductLog(Plus(a,Times(b,x))),p),Power(b,CN1)),Times(CN1,Dist(p,Int(Times(Power(ProductLog(Plus(a,Times(b,x))),p),Power(Plus(C1,ProductLog(Plus(a,Times(b,x)))),CN1)),x)))),And(And(FreeQ(List(a,b),x),RationalQ(p)),GreaterEqual(p,CN1)))),
ISetDelayed(Int(Power(ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),p_),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Power(ProductLog(Plus(a,Times(b,x))),p),Power(Times(b,Plus(p,C1)),CN1)),Dist(Times(p,Power(Plus(p,C1),CN1)),Int(Times(Power(ProductLog(Plus(a,Times(b,x))),Plus(p,C1)),Power(Plus(C1,ProductLog(Plus(a,Times(b,x)))),CN1)),x))),And(And(FreeQ(List(a,b),x),RationalQ(p)),Less(p,CN1)))),
ISetDelayed(Int(Power(ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),p_),x_Symbol),
    Condition(Times(Power(ProductLog(Plus(a,Times(b,x))),p),Power(Power(Times(CN1,ProductLog(Plus(a,Times(b,x)))),p),CN1),Int(Power(Times(CN1,ProductLog(Plus(a,Times(b,x)))),p),x)),And(FreeQ(List(a,b,p),x),Not(RationalQ(p))))),
ISetDelayed(Int(Power(Plus(C1,ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),CN1),x_Symbol),
    Condition(Times(Plus(a,Times(b,x)),Power(Times(b,ProductLog(Plus(a,Times(b,x)))),CN1)),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),CN1),ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition(Plus(x,Times(CN1,Int(Power(Plus(C1,ProductLog(Plus(a,Times(b,x)))),CN1),x))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),CN1),Power(ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CN1)),x_Symbol),
    Condition(Times(ExpIntegralEi(ProductLog(Plus(a,Times(b,x)))),Power(b,CN1)),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),CN1),Power(ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CN1D2)),x_Symbol),
    Condition(Times(Sqrt(Pi),Erfi(Sqrt(ProductLog(Plus(a,Times(b,x))))),Power(b,CN1)),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),CN1),Power(ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),p_)),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Power(ProductLog(Plus(a,Times(b,x))),Plus(p,Times(CN1,C1))),Power(b,CN1)),Times(CN1,Dist(p,Int(Times(Power(ProductLog(Plus(a,Times(b,x))),Plus(p,Times(CN1,C1))),Power(Plus(C1,ProductLog(Plus(a,Times(b,x)))),CN1)),x)))),And(And(FreeQ(List(a,b),x),RationalQ(p)),Greater(p,C0)))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT))),CN1),Power(ProductLog(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Power(ProductLog(Plus(a,Times(b,x))),p),Power(Times(b,Plus(p,C1)),CN1)),Times(CN1,Dist(Power(Plus(p,C1),CN1),Int(Times(Power(ProductLog(Plus(a,Times(b,x))),Plus(p,C1)),Power(Plus(C1,ProductLog(Plus(a,Times(b,x)))),CN1)),x)))),And(And(FreeQ(List(a,b),x),RationalQ(p)),Less(p,CN1)))),
ISetDelayed(Int(Times(Power(ProductLog(Times(a_DEFAULT,x_)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(ProductLog(Times(a,x)),p),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(p,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Power(ProductLog(Times(a,x)),p),Power(Plus(C1,ProductLog(Times(a,x))),CN1)),x)))),And(And(And(FreeQ(a,x),RationalQ(List(m,p))),NonzeroQ(Plus(m,C1))),GreaterEqual(Plus(m,p,C1),C0)))),
ISetDelayed(Int(Times(Power(ProductLog(Times(a_DEFAULT,x_)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(ProductLog(Times(a,x)),p),Power(Plus(m,p,C1),CN1)),Dist(Times(p,Power(Plus(m,p,C1),CN1)),Int(Times(Power(x,m),Power(ProductLog(Times(a,x)),Plus(p,C1)),Power(Plus(C1,ProductLog(Times(a,x))),CN1)),x))),And(And(And(FreeQ(a,x),RationalQ(List(m,p))),NonzeroQ(Plus(m,C1))),Less(Plus(m,p,C1),C0)))),
ISetDelayed(Int(Times(Power(ProductLog(Times(a_DEFAULT,x_)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Int(Times(Power(x,m),Power(ProductLog(Times(a,x)),p),Power(Plus(C1,ProductLog(Times(a,x))),CN1)),x),Int(Times(Power(x,m),Power(ProductLog(Times(a,x)),Plus(p,C1)),Power(Plus(C1,ProductLog(Times(a,x))),CN1)),x)),And(FreeQ(a,x),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(ProductLog(Plus(Times(b_DEFAULT,x_),a_)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(Power(Plus(Times(CN1,a,Power(b,CN1)),Times(x,Power(b,CN1))),m),Power(ProductLog(x),p)),x),x,Plus(a,Times(b,x)))),And(And(FreeQ(List(a,b,p),x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(a_DEFAULT,x_))),CN1),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(Times(Plus(m,C1),ProductLog(Times(a,x))),CN1)),Times(CN1,Dist(Times(m,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Power(Times(ProductLog(Times(a,x)),Plus(C1,ProductLog(Times(a,x)))),CN1)),x)))),And(And(FreeQ(a,x),RationalQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(a_DEFAULT,x_))),CN1),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(Plus(m,C1),CN1)),Times(CN1,Int(Times(Power(x,m),ProductLog(Times(a,x)),Power(Plus(C1,ProductLog(Times(a,x))),CN1)),x))),And(And(FreeQ(a,x),RationalQ(m)),Less(m,CN1)))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(a_DEFAULT,x_))),CN1),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(x,m),Gamma(Plus(m,C1),Times(CN1,Plus(m,C1),ProductLog(Times(a,x)))),Power(Times(a,Plus(m,C1),Power(E,Times(m,ProductLog(Times(a,x)))),Power(Times(CN1,Plus(m,C1),ProductLog(Times(a,x))),m)),CN1)),And(FreeQ(a,x),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Plus(Times(b_DEFAULT,x_),a_))),CN1),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(Power(Plus(Times(CN1,a,Power(b,CN1)),Times(x,Power(b,CN1))),m),Power(Plus(C1,ProductLog(x)),CN1)),x),x,Plus(a,Times(b,x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(a_DEFAULT,x_))),CN1),Power(ProductLog(Times(a_DEFAULT,x_)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(x,Plus(m,C1)),Power(ProductLog(Times(a,x)),Plus(p,Times(CN1,C1))),Power(Plus(m,C1),CN1)),And(And(FreeQ(List(a,m,p),x),ZeroQ(Plus(m,p,Times(CN1,C1),C1))),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(a_DEFAULT,x_))),CN1),Power(ProductLog(Times(a_DEFAULT,x_)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(a,p),ExpIntegralEi(Times(CN1,p,ProductLog(Times(a,x))))),And(And(FreeQ(List(a,m),x),IntIntegerQ(p)),ZeroQ(Plus(m,p,C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(a_DEFAULT,x_))),CN1),Power(ProductLog(Times(a_DEFAULT,x_)),p_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(a,Plus(p,Times(CN1,Rational(C1,C2)))),Sqrt(Times(Pi,Power(Plus(p,Times(CN1,Rational(C1,C2))),CN1))),Erf(Sqrt(Times(Plus(p,Times(CN1,Rational(C1,C2))),ProductLog(Times(a,x)))))),And(And(And(FreeQ(List(a,m),x),IntIntegerQ(Plus(p,Times(CN1,Rational(C1,C2))))),Greater(p,C1)),ZeroQ(Plus(m,p,Times(CN1,Rational(C1,C2)),C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(a_DEFAULT,x_))),CN1),Power(ProductLog(Times(a_DEFAULT,x_)),p_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(a,Plus(p,Times(CN1,Rational(C1,C2)))),Sqrt(Times(CN1,Pi,Power(Plus(p,Times(CN1,Rational(C1,C2))),CN1))),Erfi(Sqrt(Times(CN1,Plus(p,Times(CN1,Rational(C1,C2))),ProductLog(Times(a,x)))))),And(And(And(FreeQ(List(a,m),x),IntIntegerQ(Plus(p,Times(CN1,Rational(C1,C2))))),Less(p,C0)),ZeroQ(Plus(m,p,Times(CN1,Rational(C1,C2)),C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(a_DEFAULT,x_))),CN1),Power(ProductLog(Times(a_DEFAULT,x_)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(ProductLog(Times(a,x)),Plus(p,Times(CN1,C1))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(Plus(m,p,Times(CN1,C1),C1),Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Power(ProductLog(Times(a,x)),Plus(p,Times(CN1,C1))),Power(Plus(C1,ProductLog(Times(a,x))),CN1)),x)))),And(And(And(FreeQ(a,x),RationalQ(List(m,p))),NonzeroQ(Plus(m,C1))),Greater(Plus(m,p),C0)))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(a_DEFAULT,x_))),CN1),Power(ProductLog(Times(a_DEFAULT,x_)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(ProductLog(Times(a,x)),p),Power(Plus(m,p,C1),CN1)),Times(CN1,Dist(Times(Plus(m,C1),Power(Plus(m,p,C1),CN1)),Int(Times(Power(x,m),Power(ProductLog(Times(a,x)),Plus(p,C1)),Power(Plus(C1,ProductLog(Times(a,x))),CN1)),x)))),And(And(And(FreeQ(a,x),RationalQ(List(m,p))),NonzeroQ(Plus(m,C1))),Less(Plus(m,p),CN1)))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(a_DEFAULT,x_))),CN1),Power(ProductLog(Times(a_DEFAULT,x_)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(x,m),Gamma(Plus(m,p,C1),Times(CN1,Plus(m,C1),ProductLog(Times(a,x)))),Power(ProductLog(Times(a,x)),p),Power(Times(a,Plus(m,C1),Power(E,Times(m,ProductLog(Times(a,x)))),Power(Times(CN1,Plus(m,C1),ProductLog(Times(a,x))),Plus(m,p))),CN1)),And(FreeQ(a,x),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT),x_Symbol),
    Condition(Plus(Times(x,Power(ProductLog(Times(a,Power(x,n))),p)),Times(CN1,Dist(Times(n,p),Int(Times(Power(ProductLog(Times(a,Power(x,n))),p),Power(Plus(C1,ProductLog(Times(a,Power(x,n)))),CN1)),x)))),And(FreeQ(List(a,n,p),x),Or(ZeroQ(Plus(Times(n,Plus(p,Times(CN1,C1))),C1)),And(IntIntegerQ(Plus(p,Times(CN1,Rational(C1,C2)))),ZeroQ(Plus(Times(n,Plus(p,Times(CN1,Rational(C1,C2)))),C1))))))),
ISetDelayed(Int(Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT),x_Symbol),
    Condition(Plus(Times(x,Power(ProductLog(Times(a,Power(x,n))),p),Power(Plus(Times(n,p),C1),CN1)),Dist(Times(n,p,Power(Plus(Times(n,p),C1),CN1)),Int(Times(Power(ProductLog(Times(a,Power(x,n))),Plus(p,C1)),Power(Plus(C1,ProductLog(Times(a,Power(x,n)))),CN1)),x))),And(FreeQ(List(a,n),x),Or(And(IntIntegerQ(p),ZeroQ(Plus(Times(n,Plus(p,C1)),C1))),And(IntIntegerQ(Plus(p,Times(CN1,Rational(C1,C2)))),ZeroQ(Plus(Times(n,Plus(p,Rational(C1,C2))),C1))))))),
ISetDelayed(Int(Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT),x_Symbol),
    Condition(Times(CN1,Subst(Int(Times(Power(ProductLog(Times(a,Power(x,Times(CN1,n)))),p),Power(Power(x,C2),CN1)),x),x,Power(x,CN1))),And(And(FreeQ(List(a,p),x),IntIntegerQ(n)),Less(n,C0)))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT)),x_Symbol),
    Condition(Times(x,Power(ProductLog(Times(a,Power(x,n))),Plus(p,Times(CN1,C1)))),And(FreeQ(List(a,n,p),x),ZeroQ(Plus(Times(n,Plus(p,Times(CN1,C1))),C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT)),x_Symbol),
    Condition(Times(Power(a,p),ExpIntegralEi(Times(CN1,p,ProductLog(Times(a,Power(x,n))))),Power(n,CN1)),And(And(FreeQ(List(a,n),x),IntIntegerQ(p)),ZeroQ(Plus(Times(n,p),C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_)),x_Symbol),
    Condition(Times(Power(a,Plus(p,Times(CN1,Rational(C1,C2)))),Sqrt(Times(Pi,Power(Plus(p,Times(CN1,Rational(C1,C2))),CN1))),Erf(Sqrt(Times(Plus(p,Times(CN1,Rational(C1,C2))),ProductLog(Times(a,Power(x,n)))))),Power(n,CN1)),And(And(And(FreeQ(List(a,n),x),IntIntegerQ(Plus(p,Times(CN1,Rational(C1,C2))))),Greater(p,C1)),ZeroQ(Plus(Times(n,Plus(p,Times(CN1,Rational(C1,C2)))),C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_)),x_Symbol),
    Condition(Times(Power(a,Plus(p,Times(CN1,Rational(C1,C2)))),Sqrt(Times(CN1,Pi,Power(Plus(p,Times(CN1,Rational(C1,C2))),CN1))),Erfi(Sqrt(Times(CN1,Plus(p,Times(CN1,Rational(C1,C2))),ProductLog(Times(a,Power(x,n)))))),Power(n,CN1)),And(And(And(FreeQ(List(a,n),x),IntIntegerQ(Plus(p,Times(CN1,Rational(C1,C2))))),Less(p,C0)),ZeroQ(Plus(Times(n,Plus(p,Times(CN1,Rational(C1,C2)))),C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT)),x_Symbol),
    Condition(Times(CN1,Subst(Int(Times(Power(ProductLog(Times(a,Power(x,Times(CN1,n)))),p),Power(Times(Power(x,C2),Plus(C1,ProductLog(Times(a,Power(x,Times(CN1,n)))))),CN1)),x),x,Power(x,CN1))),And(And(FreeQ(List(a,p),x),IntIntegerQ(n)),Less(n,C0)))),
ISetDelayed(Int(Times(Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(ProductLog(Times(a,Power(x,n))),p),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(n,p,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Power(ProductLog(Times(a,Power(x,n))),p),Power(Plus(C1,ProductLog(Times(a,Power(x,n)))),CN1)),x)))),And(And(FreeQ(List(a,m,n,p),x),NonzeroQ(Plus(m,C1))),Or(Or(ZeroQ(Plus(m,Times(n,Plus(p,Times(CN1,C1))),C1)),And(IntIntegerQ(p),ZeroQ(Plus(m,Times(n,p),C1)))),And(IntIntegerQ(Plus(p,Times(CN1,Rational(C1,C2)))),ZeroQ(Plus(m,Times(n,Plus(p,Times(CN1,Rational(C1,C2)))),C1))))))),
ISetDelayed(Int(Times(Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(ProductLog(Times(a,Power(x,n))),p),Power(Plus(m,Times(n,p),C1),CN1)),Dist(Times(n,p,Power(Plus(m,Times(n,p),C1),CN1)),Int(Times(Power(x,m),Power(ProductLog(Times(a,Power(x,n))),Plus(p,C1)),Power(Plus(C1,ProductLog(Times(a,Power(x,n)))),CN1)),x))),And(And(FreeQ(List(a,m,n,p),x),NonzeroQ(Plus(m,C1))),Or(And(IntIntegerQ(p),ZeroQ(Plus(m,Times(n,Plus(p,C1)),C1))),And(IntIntegerQ(Plus(p,Times(CN1,Rational(C1,C2)))),ZeroQ(Plus(m,Times(n,Plus(p,Rational(C1,C2))),C1))))))),
ISetDelayed(Int(Times(Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(CN1,Subst(Int(Times(Power(ProductLog(Times(a,Power(x,Times(CN1,n)))),p),Power(Power(x,Plus(m,C2)),CN1)),x),x,Power(x,CN1))),And(And(And(FreeQ(List(a,p),x),IntIntegerQ(List(m,n))),Less(n,C0)),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),x_Symbol),
    Condition(Times(CN1,Subst(Int(Power(Times(Power(x,C2),Plus(C1,ProductLog(Times(a,Power(x,Times(CN1,n)))))),CN1),x),x,Power(x,CN1))),And(And(FreeQ(a,x),IntIntegerQ(n)),Less(n,C0)))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(CN1,Subst(Int(Power(Times(Power(x,Plus(m,C2)),Plus(C1,ProductLog(Times(a,Power(x,Times(CN1,n)))))),CN1),x),x,Power(x,CN1))),And(And(And(FreeQ(a,x),IntIntegerQ(List(m,n))),Less(n,C0)),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(x,Plus(m,C1)),Power(ProductLog(Times(a,Power(x,n))),Plus(p,Times(CN1,C1))),Power(Plus(m,C1),CN1)),And(And(FreeQ(List(a,m,n,p),x),ZeroQ(Plus(m,Times(n,Plus(p,Times(CN1,C1))),C1))),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(a,p),ExpIntegralEi(Times(CN1,p,ProductLog(Times(a,Power(x,n))))),Power(n,CN1)),And(And(FreeQ(List(a,m,n),x),IntIntegerQ(p)),ZeroQ(Plus(m,Times(n,p),C1))))),
ISetDelayed(Int(Times(Power(Plus(C1,ProductLog(Times(Power(x_,n_),a_DEFAULT))),CN1),Power(ProductLog(Times(Power(x_,n_),a_DEFAULT)),p_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(a,Plus(p,Times(CN1,Rational(C1,C2)))),Sqrt(Times(Pi,Power(Plus(p,Times(CN1,Rational(C1,C2))),CN1))),Erf(Sqrt(Times(Plus(p,Times(CN1,Rational(C1,C2))),ProductLog(Times(a,Power(x,n)))))),Power(n,CN1)),And(And(And(FreeQ(List(a,m,n),x),IntIntegerQ(Plus(p,Times(CN1,Rational(C1,C2))))),Greater(p,C1)),ZeroQ(Plus(m,Times(n,Plus(p,Times(CN1,Rational(C1,C2)))),C1)))))
  );
}
