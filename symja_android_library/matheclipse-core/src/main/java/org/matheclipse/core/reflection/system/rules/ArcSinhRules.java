package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://bitbucket.org/axelclk/symja_android_library">bitbucket.org/axelclk/symja_android_library under the tools directory</a>.</p>
 */
public interface ArcSinhRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
	 * </ul>
	 */
  final public static int[] SIZES = { 9, 0 };

  final public static IAST RULES = List(
    IInit(ArcSinh, SIZES),
    // ArcSinh(0)=0
    ISet(ArcSinh(C0),
      C0),
    // ArcSinh(Rational(1,2)*I)=Pi*Rational(1,6)*I
    ISet(ArcSinh(CC(0L,1L,1L,2L)),
      Times(CC(0L,1L,1L,6L),Pi)),
    // ArcSinh(Rational(1,2)*I*Sqrt(2))=Pi*Rational(1,4)*I
    ISet(ArcSinh(Times(CC(0L,1L,1L,2L),CSqrt2)),
      Times(CC(0L,1L,1L,4L),Pi)),
    // ArcSinh(Rational(1,2)*I*Sqrt(3))=Pi*Rational(1,3)*I
    ISet(ArcSinh(Times(CC(0L,1L,1L,2L),CSqrt3)),
      Times(CC(0L,1L,1L,3L),Pi)),
    // ArcSinh(I)=Pi*Rational(1,2)*I
    ISet(ArcSinh(CI),
      Times(CC(0L,1L,1L,2L),Pi)),
    // ArcSinh(1)=Log(Sqrt(2)+1)
    ISet(ArcSinh(C1),
      Log(Plus(C1,CSqrt2))),
    // ArcSinh(Infinity)=Infinity
    ISet(ArcSinh(oo),
      oo),
    // ArcSinh(I*Infinity)=Infinity
    ISet(ArcSinh(DirectedInfinity(CI)),
      oo),
    // ArcSinh(ComplexInfinity)=ComplexInfinity
    ISet(ArcSinh(CComplexInfinity),
      CComplexInfinity)
  );
}
