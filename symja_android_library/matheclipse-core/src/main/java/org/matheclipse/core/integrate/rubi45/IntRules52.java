package org.matheclipse.core.integrate.rubi45;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctions.*;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;

/** 
 * IndefiniteIntegrationRules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IntRules52 { 
  public static IAST RULES = List( 
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),p_)),Times(c_DEFAULT,Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),q_))),pn_),Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),m_)),x_Symbol),
    Condition(Module(List(Set(f,FreeFactors(Cot(Plus(pd,Times(pe,x))),x))),Times(CN1,f,Power(pe,CN1),Subst(Int(Times(Power(ExpandToSum(Plus(c,Times(b,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,q),Times(CN1,C1D2,p)))),Times(a,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Times(C1D2,q)))),x),pn),Power(Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,m),Times(pn,C1D2,q),C1)),CN1)),x),x,Times(Cot(Plus(pd,Times(pe,x))),Power(f,CN1))))),And(And(And(And(And(FreeQ(List(a,b,c,pd,pe),x),EvenQ(m)),EvenQ(p)),EvenQ(q)),IntegerQ(pn)),And(Less(C0,p),LessEqual(p,q))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(c_DEFAULT,Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),q_)),Times(b_DEFAULT,Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),p_))),pn_),Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),m_)),x_Symbol),
    Condition(Module(List(Set(f,FreeFactors(Tan(Plus(pd,Times(pe,x))),x))),Times(f,Power(pe,CN1),Subst(Int(Times(Power(ExpandToSum(Plus(c,Times(b,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,q),Times(CN1,C1D2,p)))),Times(a,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Times(C1D2,q)))),x),pn),Power(Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,m),Times(pn,C1D2,q),C1)),CN1)),x),x,Times(Tan(Plus(pd,Times(pe,x))),Power(f,CN1))))),And(And(And(And(And(FreeQ(List(a,b,c,pd,pe),x),EvenQ(m)),EvenQ(p)),EvenQ(q)),IntegerQ(pn)),And(Less(C0,p),LessEqual(p,q))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),p_)),Times(c_DEFAULT,Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),q_))),pn_),Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),m_)),x_Symbol),
    Condition(Module(List(Set(f,FreeFactors(Cot(Plus(pd,Times(pe,x))),x))),Times(CN1,f,Power(pe,CN1),Subst(Int(Times(Power(ExpandToSum(Plus(Times(a,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Times(C1D2,p))),Times(b,Power(f,p),Power(x,p)),Times(c,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,p),Times(CN1,C1D2,q))))),x),pn),Power(Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,m),Times(pn,C1D2,p),C1)),CN1)),x),x,Times(Cot(Plus(pd,Times(pe,x))),Power(f,CN1))))),And(And(And(And(And(FreeQ(List(a,b,c,pd,pe),x),EvenQ(m)),EvenQ(p)),EvenQ(q)),IntegerQ(pn)),Less(Less(C0,q),p)))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(c_DEFAULT,Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),q_)),Times(b_DEFAULT,Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),p_))),pn_),Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),m_)),x_Symbol),
    Condition(Module(List(Set(f,FreeFactors(Tan(Plus(pd,Times(pe,x))),x))),Times(f,Power(pe,CN1),Subst(Int(Times(Power(ExpandToSum(Plus(Times(a,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Times(C1D2,p))),Times(b,Power(f,p),Power(x,p)),Times(c,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,p),Times(CN1,C1D2,q))))),x),pn),Power(Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,m),Times(pn,C1D2,p),C1)),CN1)),x),x,Times(Tan(Plus(pd,Times(pe,x))),Power(f,CN1))))),And(And(And(And(And(FreeQ(List(a,b,c,pd,pe),x),EvenQ(m)),EvenQ(p)),EvenQ(q)),IntegerQ(pn)),Less(Less(C0,q),p)))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),p_)),Times(c_DEFAULT,Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),q_))),pn_),Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),m_)),x_Symbol),
    Condition(Module(List(Set(f,FreeFactors(Cot(Plus(pd,Times(pe,x))),x))),Times(CN1,f,Power(pe,CN1),Subst(Int(Times(Power(ExpandToSum(Plus(c,Times(b,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,q),Times(CN1,C1D2,p)))),Times(a,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Times(C1D2,q)))),x),pn),Power(Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,m),Times(pn,C1D2,q),C1)),CN1)),x),x,Times(Cot(Plus(pd,Times(pe,x))),Power(f,CN1))))),And(And(And(And(And(FreeQ(List(a,b,c,pd,pe),x),EvenQ(m)),EvenQ(p)),EvenQ(q)),IntegerQ(pn)),And(Less(C0,p),LessEqual(p,q))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(c_DEFAULT,Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),q_)),Times(b_DEFAULT,Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),p_))),pn_),Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),m_)),x_Symbol),
    Condition(Module(List(Set(f,FreeFactors(Tan(Plus(pd,Times(pe,x))),x))),Times(f,Power(pe,CN1),Subst(Int(Times(Power(ExpandToSum(Plus(c,Times(b,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,q),Times(CN1,C1D2,p)))),Times(a,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Times(C1D2,q)))),x),pn),Power(Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,m),Times(pn,C1D2,q),C1)),CN1)),x),x,Times(Tan(Plus(pd,Times(pe,x))),Power(f,CN1))))),And(And(And(And(And(FreeQ(List(a,b,c,pd,pe),x),EvenQ(m)),EvenQ(p)),EvenQ(q)),IntegerQ(pn)),And(Less(C0,p),LessEqual(p,q))))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(b_DEFAULT,Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),p_)),Times(c_DEFAULT,Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),q_))),pn_),Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),m_)),x_Symbol),
    Condition(Module(List(Set(f,FreeFactors(Cot(Plus(pd,Times(pe,x))),x))),Times(CN1,f,Power(pe,CN1),Subst(Int(Times(Power(ExpandToSum(Plus(Times(a,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Times(C1D2,p))),Times(b,Power(f,p),Power(x,p)),Times(c,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,p),Times(CN1,C1D2,q))))),x),pn),Power(Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,m),Times(pn,C1D2,p),C1)),CN1)),x),x,Times(Cot(Plus(pd,Times(pe,x))),Power(f,CN1))))),And(And(And(And(And(FreeQ(List(a,b,c,pd,pe),x),EvenQ(m)),EvenQ(p)),EvenQ(q)),IntegerQ(pn)),Less(Less(C0,q),p)))),
ISetDelayed(Int(Times(Power(Plus(a_,Times(c_DEFAULT,Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),q_)),Times(b_DEFAULT,Power($($s("§sin"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),p_))),pn_),Power($($s("§cos"),Plus(pd_DEFAULT,Times(x_,pe_DEFAULT))),m_)),x_Symbol),
    Condition(Module(List(Set(f,FreeFactors(Tan(Plus(pd,Times(pe,x))),x))),Times(f,Power(pe,CN1),Subst(Int(Times(Power(ExpandToSum(Plus(Times(a,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Times(C1D2,p))),Times(b,Power(f,p),Power(x,p)),Times(c,Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,p),Times(CN1,C1D2,q))))),x),pn),Power(Power(Plus(C1,Times(Sqr(f),Sqr(x))),Plus(Times(C1D2,m),Times(pn,C1D2,p),C1)),CN1)),x),x,Times(Tan(Plus(pd,Times(pe,x))),Power(f,CN1))))),And(And(And(And(And(FreeQ(List(a,b,c,pd,pe),x),EvenQ(m)),EvenQ(p)),EvenQ(q)),IntegerQ(pn)),Less(Less(C0,q),p))))
  );
}
