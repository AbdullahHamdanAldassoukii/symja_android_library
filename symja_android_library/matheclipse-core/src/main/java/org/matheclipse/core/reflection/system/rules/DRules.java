package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://bitbucket.org/axelclk/symja_android_library">bitbucket.org/axelclk/symja_android_library under the tools directory</a>.</p>
 */
public interface DRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
	 * </ul>
	 */
  final public static int[] SIZES = { 0, 38 };

  final public static IAST RULES = List(
    IInit(D, SIZES),
    // D(ArcCos(f_),x_NotListQ):=D(f,x)*(-1)*(1-f^2)^Rational(-1,2)
    ISetDelayed(D(ArcCos(f_),$p(x,NotListQ)),
      Times(D(f,x),CN1,Power(Plus(C1,Negate(Sqr(f))),CN1D2))),
    // D(ArcCosh(f_),x_NotListQ):=D(f,x)*(f^2+(-1)*1)^Rational(-1,2)
    ISetDelayed(D(ArcCosh(f_),$p(x,NotListQ)),
      Times(D(f,x),Power(Plus(Sqr(f),Negate(C1)),CN1D2))),
    // D(ArcCot(f_),x_NotListQ):=(D(f,x)*(-1))/(1+f^2)
    ISetDelayed(D(ArcCot(f_),$p(x,NotListQ)),
      Times(D(f,x),CN1,Power(Plus(C1,Sqr(f)),-1))),
    // D(ArcCoth(f_),x_NotListQ):=D(f,x)/(1-f^2)
    ISetDelayed(D(ArcCoth(f_),$p(x,NotListQ)),
      Times(D(f,x),Power(Plus(C1,Negate(Sqr(f))),-1))),
    // D(ArcCsc(f_),x_NotListQ):=(-D(f,x)*1*(1-1/x^2)^Rational(-1,2))/f^2
    ISetDelayed(D(ArcCsc(f_),$p(x,NotListQ)),
      Times(CN1,D(f,x),C1,Power(f,-2),Power(Plus(C1,Negate(Power(x,-2))),CN1D2))),
    // D(ArcCsch(f_),x_NotListQ):=(D(f,x)*(-1)*(1+f^2)^Rational(-1,2))/Abs(f)
    ISetDelayed(D(ArcCsch(f_),$p(x,NotListQ)),
      Times(D(f,x),CN1,Power(Abs(f),-1),Power(Plus(C1,Sqr(f)),CN1D2))),
    // D(ArcSin(f_),x_NotListQ):=D(f,x)*(1-f^2)^Rational(-1,2)
    ISetDelayed(D(ArcSin(f_),$p(x,NotListQ)),
      Times(D(f,x),Power(Plus(C1,Negate(Sqr(f))),CN1D2))),
    // D(ArcSinh(f_),x_NotListQ):=D(f,x)*(1+f^2)^Rational(-1,2)
    ISetDelayed(D(ArcSinh(f_),$p(x,NotListQ)),
      Times(D(f,x),Power(Plus(C1,Sqr(f)),CN1D2))),
    // D(ArcTan(f_),x_NotListQ):=D(f,x)/(1+f^2)
    ISetDelayed(D(ArcTan(f_),$p(x,NotListQ)),
      Times(D(f,x),Power(Plus(C1,Sqr(f)),-1))),
    // D(ArcTanh(f_),x_NotListQ):=D(f,x)/(1-f^2)
    ISetDelayed(D(ArcTanh(f_),$p(x,NotListQ)),
      Times(D(f,x),Power(Plus(C1,Negate(Sqr(f))),-1))),
    // D(ArcSec(f_),x_NotListQ):=(D(f,x)*(1-1/f^2)^Rational(-1,2))/x^2
    ISetDelayed(D(ArcSec(f_),$p(x,NotListQ)),
      Times(D(f,x),Power(x,-2),Power(Plus(C1,Negate(Power(f,-2))),CN1D2))),
    // D(ArcSech(f_),x_NotListQ):=(D(f,x)*(-1)*(1-f^2)^Rational(-1,2))/f
    ISetDelayed(D(ArcSech(f_),$p(x,NotListQ)),
      Times(D(f,x),CN1,Power(f,-1),Power(Plus(C1,Negate(Sqr(f))),CN1D2))),
    // D(Ceiling(f_),x_NotListQ):=0
    ISetDelayed(D(Ceiling(f_),$p(x,NotListQ)),
      C0),
    // D(Erf(f_),x_NotListQ):=D(f,x)*2*1/(E^f^2*Sqrt(Pi))
    ISetDelayed(D(Erf(f_),$p(x,NotListQ)),
      Times(D(f,x),C2,Power(E,Negate(Sqr(f))),Power(Pi,CN1D2))),
    // D(Erfc(f_),x_NotListQ):=D(f,x)*-2*1/(E^f^2*Sqrt(Pi))
    ISetDelayed(D(Erfc(f_),$p(x,NotListQ)),
      Times(D(f,x),CN2,Power(E,Negate(Sqr(f))),Power(Pi,CN1D2))),
    // D(Erfi(f_),x_NotListQ):=D(f,x)*2*E^f^2/Sqrt(Pi)
    ISetDelayed(D(Erfi(f_),$p(x,NotListQ)),
      Times(D(f,x),C2,Power(E,Sqr(f)),Power(Pi,CN1D2))),
    // D(Floor(f_),x_NotListQ):=0
    ISetDelayed(D(Floor(f_),$p(x,NotListQ)),
      C0),
    // D(FractionalPart(f_),x_NotListQ):=D(f,x)*1
    ISetDelayed(D(FractionalPart(f_),$p(x,NotListQ)),
      Times(D(f,x),C1)),
    // D(FresnelC(f_),x_NotListQ):=D(f,x)*Cos(Rational(1,2)*Pi*f^2)
    ISetDelayed(D(FresnelC(f_),$p(x,NotListQ)),
      Times(D(f,x),Cos(Times(C1D2,Pi,Sqr(f))))),
    // D(FresnelS(f_),x_NotListQ):=D(f,x)*Sin(Rational(1,2)*Pi*f^2)
    ISetDelayed(D(FresnelS(f_),$p(x,NotListQ)),
      Times(D(f,x),Sin(Times(C1D2,Pi,Sqr(f))))),
    // D(Gamma(f_),x_NotListQ):=D(f,x)*Gamma(f)*PolyGamma(f)
    ISetDelayed(D(Gamma(f_),$p(x,NotListQ)),
      Times(D(f,x),Gamma(f),PolyGamma(f))),
    // D(IntegerPart(f_),x_NotListQ):=0
    ISetDelayed(D(IntegerPart(f_),$p(x,NotListQ)),
      C0),
    // D(InverseErf(f_),x_NotListQ):=D(f,x)*Rational(1,2)*Sqrt(Pi)*E^InverseErf(f)^2
    ISetDelayed(D(InverseErf(f_),$p(x,NotListQ)),
      Times(D(f,x),C1D2,Sqrt(Pi),Power(E,Sqr(InverseErf(f))))),
    // D(Log(f_),x_NotListQ):=D(f,x)/f
    ISetDelayed(D(Log(f_),$p(x,NotListQ)),
      Times(D(f,x),Power(f,-1))),
    // D(PolyGamma(f_),x_NotListQ):=D(f,x)*PolyGamma(1,f)
    ISetDelayed(D(PolyGamma(f_),$p(x,NotListQ)),
      Times(D(f,x),PolyGamma(C1,f))),
    // D(Cot(f_),x_NotListQ):=D(f,x)*(-1)*Csc(f)^2
    ISetDelayed(D(Cot(f_),$p(x,NotListQ)),
      Times(D(f,x),CN1,Sqr(Csc(f)))),
    // D(Coth(f_),x_NotListQ):=(D(f,x)*(-1))/Sinh(f)^2
    ISetDelayed(D(Coth(f_),$p(x,NotListQ)),
      Times(D(f,x),CN1,Power(Sinh(f),-2))),
    // D(Cos(f_),x_NotListQ):=D(f,x)*(-1)*Sin(f)
    ISetDelayed(D(Cos(f_),$p(x,NotListQ)),
      Times(D(f,x),CN1,Sin(f))),
    // D(Cosh(f_),x_NotListQ):=D(f,x)*Sinh(f)
    ISetDelayed(D(Cosh(f_),$p(x,NotListQ)),
      Times(D(f,x),Sinh(f))),
    // D(Csc(f_),x_NotListQ):=D(f,x)*(-1)*Cot(f)*Csc(f)
    ISetDelayed(D(Csc(f_),$p(x,NotListQ)),
      Times(D(f,x),CN1,Cot(f),Csc(f))),
    // D(Csch(f_),x_NotListQ):=D(f,x)*(-1)*Coth(f)*Csch(f)
    ISetDelayed(D(Csch(f_),$p(x,NotListQ)),
      Times(D(f,x),CN1,Coth(f),Csch(f))),
    // D(Round(f_),x_NotListQ):=0
    ISetDelayed(D(Round(f_),$p(x,NotListQ)),
      C0),
    // D(Sin(f_),x_NotListQ):=D(f,x)*Cos(f)
    ISetDelayed(D(Sin(f_),$p(x,NotListQ)),
      Times(D(f,x),Cos(f))),
    // D(Sinh(f_),x_NotListQ):=D(f,x)*Cosh(f)
    ISetDelayed(D(Sinh(f_),$p(x,NotListQ)),
      Times(D(f,x),Cosh(f))),
    // D(Tan(f_),x_NotListQ):=D(f,x)*Sec(f)^2
    ISetDelayed(D(Tan(f_),$p(x,NotListQ)),
      Times(D(f,x),Sqr(Sec(f)))),
    // D(Tanh(f_),x_NotListQ):=D(f,x)*Sech(f)^2
    ISetDelayed(D(Tanh(f_),$p(x,NotListQ)),
      Times(D(f,x),Sqr(Sech(f)))),
    // D(Sec(f_),x_NotListQ):=D(f,x)*Sec(f)*Tan(f)
    ISetDelayed(D(Sec(f_),$p(x,NotListQ)),
      Times(D(f,x),Sec(f),Tan(f))),
    // D(Sech(f_),x_NotListQ):=D(f,x)*(-1)*Tanh(f)*Sech(f)
    ISetDelayed(D(Sech(f_),$p(x,NotListQ)),
      Times(D(f,x),CN1,Tanh(f),Sech(f)))
  );
}
