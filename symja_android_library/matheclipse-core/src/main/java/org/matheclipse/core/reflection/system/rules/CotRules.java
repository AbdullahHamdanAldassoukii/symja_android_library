package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface CotRules {
  final public static IAST RULES = List(
    ISet(Cot(C0),
      CComplexInfinity),
    ISet(Cot(Times(QQ(1L,12L),Pi)),
      Plus(C2,CSqrt3)),
    ISet(Cot(Times(QQ(1L,10L),Pi)),
      Sqrt(Plus(C5,Times(C2,CSqrt5)))),
    ISet(Cot(Times(QQ(1L,8L),Pi)),
      Plus(C1,CSqrt2)),
    ISet(Cot(Times(QQ(1L,6L),Pi)),
      CSqrt3),
    ISet(Cot(Times(QQ(1L,5L),Pi)),
      Sqrt(Plus(C1,Times(C2,C1DSqrt5)))),
    ISet(Cot(Times(C1D4,Pi)),
      C1),
    ISet(Cot(Times(QQ(3L,10L),Pi)),
      Sqrt(Plus(C5,Times(CN2,CSqrt5)))),
    ISet(Cot(Times(C1D3,Pi)),
      C1DSqrt3),
    ISet(Cot(Times(QQ(3L,8L),Pi)),
      Plus(CN1,CSqrt2)),
    ISet(Cot(Times(QQ(2L,5L),Pi)),
      Sqrt(Plus(C1,Times(CN2,C1DSqrt5)))),
    ISet(Cot(Times(QQ(5L,12L),Pi)),
      Plus(C2,Times(CN1,CSqrt3))),
    ISet(Cot(Times(C1D2,Pi)),
      C0),
    ISet(Cot(Times(QQ(7L,12L),Pi)),
      Plus(CN2,CSqrt3)),
    ISet(Cot(Times(QQ(3L,5L),Pi)),
      Times(CN1,Sqrt(Plus(C1,Times(CN2,C1DSqrt5))))),
    ISet(Cot(Times(QQ(5L,8L),Pi)),
      Plus(C1,Times(CN1,CSqrt2))),
    ISet(Cot(Times(QQ(2L,3L),Pi)),
      Times(CN1,C1DSqrt3)),
    ISet(Cot(Times(QQ(7L,10L),Pi)),
      Times(CN1,Sqrt(Plus(C5,Times(CN2,CSqrt5))))),
    ISet(Cot(Times(QQ(3L,4L),Pi)),
      CN1),
    ISet(Cot(Times(QQ(4L,5L),Pi)),
      Times(CN1,Sqrt(Plus(C1,Times(C2,C1DSqrt5))))),
    ISet(Cot(Times(QQ(5L,6L),Pi)),
      Times(CN1,CSqrt3)),
    ISet(Cot(Times(QQ(7L,8L),Pi)),
      Plus(CN1,Times(CN1,CSqrt2))),
    ISet(Cot(Times(QQ(9L,10L),Pi)),
      Times(CN1,Sqrt(Plus(C5,Times(C2,CSqrt5))))),
    ISet(Cot(Times(QQ(11L,12L),Pi)),
      Plus(CN2,Times(CN1,CSqrt3))),
    ISet(Cot(Pi),
      CComplexInfinity),
    ISet(Cot(Times(CI,CInfinity)),
      CNI),
    ISet(Cot(Times(CNI,CInfinity)),
      CI),
    ISet(Cot(CComplexInfinity),
      Indeterminate)
  );
}