package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface CscRules {
  final public static IAST RULES = List(
    ISet(Csc(C0),
      CComplexInfinity),
    ISet(Csc(Times(C1D2,Pi)),
      C1),
    ISet(Csc(Times(C1D3,Pi)),
      Times(QQ(2L,3L),Sqrt(C3))),
    ISet(Csc(Times(C1D4,Pi)),
      Sqrt(C2)),
    ISet(Csc(Times(QQ(1L,5L),Pi)),
      Times(QQ(1L,5L),Sqrt(Plus(ZZ(50L),Times(ZZ(10L),Sqrt(C5)))))),
    ISet(Csc(Times(QQ(1L,6L),Pi)),
      C2),
    ISet(Csc(Times(QQ(1L,8L),Pi)),
      Sqrt(Plus(C4,Times(C2,Sqrt(C2))))),
    ISet(Csc(Times(QQ(1L,10L),Pi)),
      Plus(C1,Sqrt(C5))),
    ISet(Csc(Times(QQ(1L,12L),Pi)),
      Plus(Sqrt(C2),Sqrt(ZZ(6L)))),
    ISet(Csc(Times(QQ(3L,8L),Pi)),
      Sqrt(Plus(C4,Times(CN2,Sqrt(C2))))),
    ISet(Csc(Times(QQ(3L,10L),Pi)),
      Plus(CN1,Sqrt(C5))),
    ISet(Csc(Times(QQ(2L,5L),Pi)),
      Times(QQ(1L,5L),Sqrt(Plus(ZZ(50L),Times(ZZ(-10L),Sqrt(C5)))))),
    ISet(Csc(Times(QQ(5L,12L),Pi)),
      Plus(Times(CN1,Sqrt(C2)),Sqrt(ZZ(6L))))
  );
}