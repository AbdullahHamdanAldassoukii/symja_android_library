package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface CscRules {
  final public static IAST RULES = List(
    ISet(Csc(C0),
      CComplexInfinity),
    ISet(Csc(Times(QQ(1L,12L),Pi)),
      Plus(Sqrt(C2),Sqrt(ZZ(6L)))),
    ISet(Csc(Times(QQ(1L,10L),Pi)),
      Plus(C1,Sqrt(C5))),
    ISet(Csc(Times(QQ(1L,8L),Pi)),
      Sqrt(Plus(C4,Times(C2,Sqrt(C2))))),
    ISet(Csc(Times(QQ(1L,6L),Pi)),
      C2),
    ISet(Csc(Times(QQ(1L,5L),Pi)),
      Sqrt(Plus(C2,Times(C2,Power(C5,CN1D2))))),
    ISet(Csc(Times(C1D4,Pi)),
      Sqrt(C2)),
    ISet(Csc(Times(QQ(3L,10L),Pi)),
      Plus(CN1,Sqrt(C5))),
    ISet(Csc(Times(C1D3,Pi)),
      Times(C2,Power(C3,CN1D2))),
    ISet(Csc(Times(QQ(2L,5L),Pi)),
      Sqrt(Plus(C2,Times(CN2,Power(C5,CN1D2))))),
    ISet(Csc(Times(QQ(5L,12L),Pi)),
      Plus(Times(CN1,Sqrt(C2)),Sqrt(ZZ(6L)))),
    ISet(Csc(Times(C1D2,Pi)),
      C1),
    ISet(Csc(Times(QQ(7L,12L),Pi)),
      Plus(Times(CN1,Sqrt(C2)),Sqrt(ZZ(6L)))),
    ISet(Csc(Times(QQ(3L,5L),Pi)),
      Sqrt(Plus(C2,Times(CN2,Power(C5,CN1D2))))),
    ISet(Csc(Times(QQ(2L,3L),Pi)),
      Times(C2,Power(C3,CN1D2))),
    ISet(Csc(Times(QQ(7L,10L),Pi)),
      Plus(CN1,Sqrt(C5))),
    ISet(Csc(Times(QQ(3L,4L),Pi)),
      Sqrt(C2)),
    ISet(Csc(Times(QQ(4L,5L),Pi)),
      Sqrt(Plus(C2,Times(C2,Power(C5,CN1D2))))),
    ISet(Csc(Times(QQ(5L,6L),Pi)),
      C2),
    ISet(Csc(Times(QQ(9L,10L),Pi)),
      Plus(C1,Sqrt(C5))),
    ISet(Csc(Times(QQ(11L,12L),Pi)),
      Plus(Sqrt(C2),Sqrt(ZZ(6L)))),
    ISet(Csc(Pi),
      CComplexInfinity),
    ISet(Csc(Times(QQ(11L,10L),Pi)),
      Plus(CN1,Times(CN1,Sqrt(C5)))),
    ISet(Csc(Times(QQ(7L,6L),Pi)),
      CN2),
    ISet(Csc(Times(QQ(6L,5L),Pi)),
      Times(CN1,Sqrt(Plus(C2,Times(C2,Power(C5,CN1D2)))))),
    ISet(Csc(Times(QQ(5L,4L),Pi)),
      Times(CN1,Sqrt(C2))),
    ISet(Csc(Times(QQ(13L,10L),Pi)),
      Plus(C1,Times(CN1,Sqrt(C5)))),
    ISet(Csc(Times(QQ(4L,3L),Pi)),
      Times(CN2,Power(C3,CN1D2))),
    ISet(Csc(Times(QQ(17L,12L),Pi)),
      Plus(Sqrt(C2),Times(CN1,Sqrt(ZZ(6L))))),
    ISet(Csc(Times(QQ(3L,2L),Pi)),
      CN1),
    ISet(Csc(Times(QQ(19L,12L),Pi)),
      Plus(Sqrt(C2),Times(CN1,Sqrt(ZZ(6L))))),
    ISet(Csc(Times(QQ(8L,5L),Pi)),
      Times(CN1,Sqrt(Plus(C2,Times(CN2,Power(C5,CN1D2)))))),
    ISet(Csc(Times(QQ(5L,3L),Pi)),
      Times(CN2,Power(C3,CN1D2))),
    ISet(Csc(Times(QQ(17L,10L),Pi)),
      Plus(C1,Times(CN1,Sqrt(C5)))),
    ISet(Csc(Times(QQ(7L,4L),Pi)),
      Times(CN1,Sqrt(C2))),
    ISet(Csc(Times(QQ(9L,5L),Pi)),
      Times(CN1,Sqrt(Plus(C2,Times(C2,Power(C5,CN1D2)))))),
    ISet(Csc(Times(QQ(11L,6L),Pi)),
      CN2),
    ISet(Csc(Times(QQ(19L,10L),Pi)),
      Plus(CN1,Times(CN1,Sqrt(C5)))),
    ISet(Csc(Times(QQ(23L,12L),Pi)),
      Times(CN2,Sqrt(Plus(C2,Sqrt(C3))))),
    ISet(Csc(Times(C2,Pi)),
      CComplexInfinity),
    ISet(Csc(Times(CI,CInfinity)),
      C0),
    ISet(Csc(Times(CNI,CInfinity)),
      C0),
    ISet(Csc(CComplexInfinity),
      Indeterminate)
  );
}