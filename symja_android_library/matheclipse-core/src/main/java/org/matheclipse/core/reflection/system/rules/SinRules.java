package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface SinRules {
  final public static IAST RULES = List(
    Set(Sin(C0),
      C0),
    Set(Sin(Times(QQ(1L,6L),Pi)),
      C1D2),
    Set(Sin(Times(C1D4,Pi)),
      Times(C1D2,Sqrt(C2))),
    Set(Sin(Times(C1D3,Pi)),
      Times(C1D2,Sqrt(C3))),
    Set(Sin(Times(C1D2,Pi)),
      C1),
    Set(Sin(Pi),
      C0),
    Set(Sin(Times(QQ(5L,12L),Pi)),
      Times(C1D4,Plus(C1,Times(C1D3,Sqrt(C3))),Sqrt(ZZ(6L)))),
    Set(Sin(Times(QQ(1L,5L),Pi)),
      Times(C1D4,Sqrt(C2),Sqrt(Plus(C5,Times(CN1,Sqrt(C5)))))),
    Set(Sin(Times(QQ(1L,12L),Pi)),
      Times(C1D4,Plus(C1,Times(CN1D3,Sqrt(C3))),Sqrt(ZZ(6L)))),
    Set(Sin(Times(QQ(1L,10L),Pi)),
      Plus(CN1D4,Times(C1D4,Sqrt(C5)))),
    Set(Sin(Times(QQ(2L,5L),Pi)),
      Times(C1D4,Sqrt(C2),Sqrt(Plus(C5,Sqrt(C5))))),
    Set(Sin(Times(QQ(3L,10L),Pi)),
      Plus(C1D4,Times(C1D4,Sqrt(C5)))),
    Set(Sin(Times(QQ(3L,8L),Pi)),
      Times(C1D2,Sqrt(Plus(C2,Sqrt(C2))))),
    Set(Sin(Times(QQ(1L,8L),Pi)),
      Times(C1D2,Sqrt(Plus(C2,Times(CN1,Sqrt(C2)))))),
    Set(Sin(CI),
      Times(CI,Sinh(C1))),
    SetDelayed(Sin(ArcSin(x_)),
      x),
    SetDelayed(Sin(ArcCos(x_)),
      Sqrt(Plus(C1,Times(CN1,Sqr(x))))),
    SetDelayed(Sin(ArcTan(x_)),
      Times(x,Power(Sqrt(Plus(C1,Sqr(x))),CN1))),
    SetDelayed(Sin(Times(Pi,$p(x,NumberQ))),
      Condition(If(Less(x,C1),Sin(Times(Plus(C1,Times(CN1,x)),Pi)),If(Less(x,C2),Times(CN1,Sin(Times(Plus(C2,Times(CN1,x)),Pi))),Sin(Times(Plus(x,Times(CN1,C2,Quotient(IntegerPart(x),C2))),Pi)))),GreaterEqual(x,C1D2)))
  );
}