package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://bitbucket.org/axelclk/symja_android_library">bitbucket.org/axelclk/symja_android_library under the tools directory</a>.</p>
 */
public interface ArcTanhRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
	 * </ul>
	 */
  final public static int[] SIZES = { 8, 0 };

  final public static IAST RULES = List(
    IInit(ArcTanh, SIZES),
    // ArcTanh(0)=0
    ISet(ArcTanh(C0),
      C0),
    // ArcTanh(I/Sqrt(3))=Pi*Rational(1,6)*I
    ISet(ArcTanh(Times(CI,C1DSqrt3)),
      Times(CC(0L,1L,1L,6L),Pi)),
    // ArcTanh(I)=Pi*Rational(1,4)*I
    ISet(ArcTanh(CI),
      Times(CC(0L,1L,1L,4L),Pi)),
    // ArcTanh(I*Sqrt(3))=Pi*Rational(1,3)*I
    ISet(ArcTanh(Times(CI,CSqrt3)),
      Times(CC(0L,1L,1L,3L),Pi)),
    // ArcTanh(1)=Infinity
    ISet(ArcTanh(C1),
      oo),
    // ArcTanh(Infinity)=Rational(-1,2)*Pi*I
    ISet(ArcTanh(oo),
      Times(CC(0L,1L,-1L,2L),Pi)),
    // ArcTanh(I*Infinity)=Rational(1,2)*Pi*I
    ISet(ArcTanh(DirectedInfinity(CI)),
      Times(CC(0L,1L,1L,2L),Pi)),
    // ArcTanh(ComplexInfinity)=Rational(1,2)*Pi
    ISet(ArcTanh(CComplexInfinity),
      Times(C1D2,Pi))
  );
}
