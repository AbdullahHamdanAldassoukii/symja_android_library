package org.matheclipse.core.integrate.rubi45;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctions.*;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;

/** 
 * IndefiniteIntegrationRules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IntRules8 { 
  public static IAST RULES = List( 
ISetDelayed(Int(Times(Plus(Times(Power(x_,pn_),pb_DEFAULT),pa_DEFAULT),Power(Times(Plus(Times(Power(x_,pn_),b_DEFAULT),a_DEFAULT),Plus(Times(Power(x_,pn_),pd_DEFAULT),c_DEFAULT)),CN1)),x_Symbol),
    Condition(Plus(Times(Plus(Times(pa,b),Times(CN1,a,pb)),Power(Plus(Times(b,c),Times(CN1,a,pd)),CN1),Int(Power(Plus(a,Times(b,Power(x,pn))),CN1),x)),Times(Plus(Times(pb,c),Times(CN1,pa,pd)),Power(Plus(Times(b,c),Times(CN1,a,pd)),CN1),Int(Power(Plus(c,Times(pd,Power(x,pn))),CN1),x))),And(And(And(FreeQ(List(a,b,c,pd,pa,pb,pn),x),NonzeroQ(Plus(Times(pa,b),Times(CN1,a,pb)))),NonzeroQ(Plus(Times(pb,c),Times(CN1,pa,pd)))),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))))),
ISetDelayed(Int(Times(Plus(Times(Power(x_,pn_),pb_DEFAULT),pa_DEFAULT),Power(Times(Plus(Times(Power(x_,pn_),b_DEFAULT),a_DEFAULT),Sqrt(Plus(Times(Power(x_,pn_),pd_DEFAULT),c_DEFAULT))),CN1)),x_Symbol),
    Condition(Plus(Times(pb,Power(b,CN1),Int(Power(Plus(c,Times(pd,Power(x,pn))),CN1D2),x)),Times(Plus(Times(pa,b),Times(CN1,a,pb)),Power(b,CN1),Int(Power(Times(Plus(a,Times(b,Power(x,pn))),Sqrt(Plus(c,Times(pd,Power(x,pn))))),CN1),x))),And(And(And(FreeQ(List(a,b,c,pd,pa,pb,pn),x),NonzeroQ(Plus(Times(pa,b),Times(CN1,a,pb)))),NonzeroQ(Plus(Times(pb,c),Times(CN1,pa,pd)))),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))))),
ISetDelayed(Int(Times(Plus(Times(Power(x_,pn_),pb_DEFAULT),pa_DEFAULT),Power(Times(Sqrt(Plus(Times(Power(x_,pn_),b_DEFAULT),a_DEFAULT)),Sqrt(Plus(Times(Power(x_,pn_),pd_DEFAULT),c_DEFAULT))),CN1)),x_Symbol),
    Condition(Plus(Times(pb,Power(b,CN1),Int(Times(Sqrt(Plus(a,Times(b,Power(x,pn)))),Power(Plus(c,Times(pd,Power(x,pn))),CN1D2)),x)),Times(Plus(Times(pa,b),Times(CN1,a,pb)),Power(b,CN1),Int(Power(Times(Sqrt(Plus(a,Times(b,Power(x,pn)))),Sqrt(Plus(c,Times(pd,Power(x,pn))))),CN1),x))),And(And(And(And(FreeQ(List(a,b,c,pd,pa,pb,pn),x),NonzeroQ(Plus(Times(pa,b),Times(CN1,a,pb)))),NonzeroQ(Plus(Times(pb,c),Times(CN1,pa,pd)))),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),Not(And(Equal(pn,C2),SimplerSqrtQ(Times(CN1,b,Power(a,CN1)),Times(CN1,pd,Power(c,CN1)))))))),
ISetDelayed(Int(Times(Plus(Times(Power(x_,pn_),pb_DEFAULT),pa_DEFAULT),Power(Plus(Times(Power(x_,pn_),b_DEFAULT),a_DEFAULT),p_),Power(Plus(Times(Power(x_,pn_),pd_DEFAULT),c_DEFAULT),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(CN1,Plus(Times(pa,b),Times(CN1,a,pb)),x,Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Plus(c,Times(pd,Power(x,pn))),q),Power(Times(a,b,pn,Plus(p,C1)),CN1)),Times(Power(Times(a,b,pn,Plus(p,C1)),CN1),Int(Times(Simp(Plus(Times(c,Plus(Times(pa,b,pn,Plus(p,C1)),Times(pa,b),Times(CN1,a,pb))),Times(pd,Plus(Times(pa,b,pn,Plus(p,C1)),Times(Plus(Times(pa,b),Times(CN1,a,pb)),Plus(Times(pn,q),C1))),Power(x,pn))),x),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Plus(c,Times(pd,Power(x,pn))),Plus(q,Times(CN1,C1)))),x))),And(And(And(And(And(And(FreeQ(List(a,b,c,pd,pa,pb,pn),x),NonzeroQ(Plus(Times(pa,b),Times(CN1,a,pb)))),NonzeroQ(Plus(Times(pb,c),Times(CN1,pa,pd)))),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),RationalQ(p,q)),Less(p,CN1)),Greater(q,C0)))),
ISetDelayed(Int(Times(Plus(Times(Power(x_,pn_),pb_DEFAULT),pa_DEFAULT),Power(Plus(Times(Power(x_,pn_),b_DEFAULT),a_DEFAULT),p_DEFAULT),Power(Plus(Times(Power(x_,pn_),pd_DEFAULT),c_DEFAULT),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(pb,x,Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Plus(c,Times(pd,Power(x,pn))),q),Power(Times(b,Plus(Times(pn,Plus(p,q,C1)),C1)),CN1)),Times(Power(Times(b,Plus(Times(pn,Plus(p,q,C1)),C1)),CN1),Int(Times(Simp(Plus(Times(c,Plus(Times(pa,b),Times(CN1,a,pb),Times(pa,b,pn,Plus(p,q,C1)))),Times(Plus(Times(pd,Plus(Times(pa,b),Times(CN1,a,pb))),Times(pb,pn,q,Plus(Times(b,c),Times(CN1,a,pd))),Times(pa,b,pd,pn,Plus(p,q,C1))),Power(x,pn))),x),Power(Plus(a,Times(b,Power(x,pn))),p),Power(Plus(c,Times(pd,Power(x,pn))),Plus(q,Times(CN1,C1)))),x))),And(And(And(And(And(And(FreeQ(List(a,b,c,pd,pa,pb,pn,p),x),NonzeroQ(Plus(Times(pa,b),Times(CN1,a,pb)))),NonzeroQ(Plus(Times(pb,c),Times(CN1,pa,pd)))),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),RationalQ(q)),Greater(q,C0)),NonzeroQ(Plus(Times(pn,Plus(p,q,C1)),C1))))),
ISetDelayed(Int(Times(Plus(Times(Power(x_,pn_),pb_DEFAULT),pa_DEFAULT),Power(Plus(Times(Power(x_,pn_),b_DEFAULT),a_DEFAULT),p_),Power(Plus(Times(Power(x_,pn_),pd_DEFAULT),c_DEFAULT),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(CN1,Plus(Times(pa,b),Times(CN1,a,pb)),x,Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Plus(c,Times(pd,Power(x,pn))),Plus(q,C1)),Power(Times(a,pn,Plus(Times(b,c),Times(CN1,a,pd)),Plus(p,C1)),CN1)),Times(Power(Times(a,pn,Plus(Times(b,c),Times(CN1,a,pd)),Plus(p,C1)),CN1),Int(Times(Simp(Plus(Times(c,Plus(Times(pa,b),Times(CN1,a,pb))),Times(pa,pn,Plus(Times(b,c),Times(CN1,a,pd)),Plus(p,C1)),Times(pd,Plus(Times(pa,b),Times(CN1,a,pb)),Plus(Times(pn,Plus(p,q,C2)),C1),Power(x,pn))),x),Power(Plus(a,Times(b,Power(x,pn))),Plus(p,C1)),Power(Plus(c,Times(pd,Power(x,pn))),q)),x))),And(And(And(And(And(FreeQ(List(a,b,c,pd,pa,pb,pn,q),x),NonzeroQ(Plus(Times(pa,b),Times(CN1,a,pb)))),NonzeroQ(Plus(Times(pb,c),Times(CN1,pa,pd)))),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),RationalQ(p)),Less(p,CN1)))),
ISetDelayed(Int(Times(Plus(Times(Power(x_,pn_),pb_DEFAULT),pa_),Power(Plus(Times(Power(x_,pn_),b_DEFAULT),a_DEFAULT),p_DEFAULT),Power(Plus(Times(Power(x_,pn_),pd_DEFAULT),c_DEFAULT),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(pa,Int(Times(Power(Plus(a,Times(b,Power(x,pn))),p),Power(Plus(c,Times(pd,Power(x,pn))),q)),x)),Times(pb,Int(Times(Power(x,pn),Power(Plus(a,Times(b,Power(x,pn))),p),Power(Plus(c,Times(pd,Power(x,pn))),q)),x))),And(And(And(FreeQ(List(a,b,c,pd,pa,pb,pn,p,q),x),NonzeroQ(Plus(Times(pa,b),Times(CN1,a,pb)))),NonzeroQ(Plus(Times(pb,c),Times(CN1,pa,pd)))),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(x_,pn_),b_DEFAULT),a_DEFAULT),CN1),Power(Plus(Times(Power(x_,pn_),f_DEFAULT),pe_DEFAULT),q_DEFAULT),Power(Plus(Times(Power(x_,pn_),pd_DEFAULT),c_DEFAULT),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(pd,Power(b,CN1),Int(Times(Power(Plus(c,Times(pd,Power(x,pn))),Plus(p,Times(CN1,C1))),Power(Plus(pe,Times(f,Power(x,pn))),q)),x)),Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1),Int(Times(Power(Plus(c,Times(pd,Power(x,pn))),Plus(p,Times(CN1,C1))),Power(Plus(pe,Times(f,Power(x,pn))),q),Power(Plus(a,Times(b,Power(x,pn))),CN1)),x))),And(And(And(And(And(FreeQ(List(a,b,c,pd,pe,f,pn,q),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),NonzeroQ(Plus(Times(b,pe),Times(CN1,a,f)))),NonzeroQ(Plus(Times(pd,pe),Times(CN1,c,f)))),RationalQ(p)),Greater(p,C0)))),
ISetDelayed(Int(Power(Times(Plus(Times(Sqr(x_),b_DEFAULT),a_DEFAULT),Plus(Times(Sqr(x_),pd_DEFAULT),c_DEFAULT),Sqrt(Plus(Times(Sqr(x_),f_DEFAULT),pe_DEFAULT))),CN1),x_Symbol),
    Condition(Plus(Times(b,Power(Plus(Times(b,c),Times(CN1,a,pd)),CN1),Int(Power(Times(Plus(a,Times(b,Sqr(x))),Sqrt(Plus(pe,Times(f,Sqr(x))))),CN1),x)),Times(CN1,pd,Power(Plus(Times(b,c),Times(CN1,a,pd)),CN1),Int(Power(Times(Plus(c,Times(pd,Sqr(x))),Sqrt(Plus(pe,Times(f,Sqr(x))))),CN1),x))),And(And(And(FreeQ(List(a,b,c,pd,pe,f),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),NonzeroQ(Plus(Times(b,pe),Times(CN1,a,f)))),NonzeroQ(Plus(Times(pd,pe),Times(CN1,c,f)))))),
ISetDelayed(Int(Power(Times(Plus(Times(Sqr(x_),pd_DEFAULT),c_DEFAULT),Sqrt(Plus(Times(Sqr(x_),f_DEFAULT),pe_DEFAULT)),Sqr(x_)),CN1),x_Symbol),
    Condition(Plus(Times(Power(c,CN1),Int(Power(Times(Sqr(x),Sqrt(Plus(pe,Times(f,Sqr(x))))),CN1),x)),Times(CN1,pd,Power(c,CN1),Int(Power(Times(Plus(c,Times(pd,Sqr(x))),Sqrt(Plus(pe,Times(f,Sqr(x))))),CN1),x))),And(FreeQ(List(c,pd,pe,f),x),NonzeroQ(Plus(Times(pd,pe),Times(CN1,c,f)))))),
ISetDelayed(Int(Power(Times(Plus(Times(Sqr(x_),b_DEFAULT),a_),Sqrt(Plus(Times(Sqr(x_),f_DEFAULT),pe_)),Sqrt(Plus(Times(Sqr(x_),pd_DEFAULT),c_))),CN1),x_Symbol),
    Condition(Times(Power(Times(a,Sqrt(c),Sqrt(pe),Rt(Times(CN1,pd,Power(c,CN1)),C2)),CN1),EllipticPi(Times(b,c,Power(Times(a,pd),CN1)),ArcSin(Times(Rt(Times(CN1,pd,Power(c,CN1)),C2),x)),Times(c,f,Power(Times(pe,pd),CN1)))),And(And(And(FreeQ(List(a,b,c,pd,pe,f),x),PositiveQ(c)),PositiveQ(pe)),Or(And(PosQ(Times(CN1,pe,f)),Or(NegQ(Times(CN1,c,pd)),Not(RationalQ(Rt(Times(CN1,c,pd),C2))))),And(And(NegQ(Times(CN1,pe,f)),NegQ(Times(CN1,c,pd))),Not(RationalQ(Rt(Times(c,pd),C2)))))))),
ISetDelayed(Int(Power(Times(Plus(Times(Sqr(x_),b_DEFAULT),a_),Sqrt(Plus(Times(Sqr(x_),f_DEFAULT),pe_)),Sqrt(Plus(Times(Sqr(x_),pd_DEFAULT),c_))),CN1),x_Symbol),
    Condition(Times(Sqrt(Times(Plus(c,Times(pd,Sqr(x))),Power(c,CN1))),Sqrt(Times(Plus(pe,Times(f,Sqr(x))),Power(pe,CN1))),Power(Times(Sqrt(Plus(c,Times(pd,Sqr(x)))),Sqrt(Plus(pe,Times(f,Sqr(x))))),CN1),Int(Power(Times(Plus(a,Times(b,Sqr(x))),Sqrt(Plus(C1,Times(pd,Power(c,CN1),Sqr(x)))),Sqrt(Plus(C1,Times(f,Power(pe,CN1),Sqr(x))))),CN1),x)),And(And(FreeQ(List(a,b,c,pd,pe,f),x),Not(And(PositiveQ(c),PositiveQ(pe)))),Or(And(PosQ(Times(CN1,pe,f)),Or(NegQ(Times(CN1,c,pd)),Not(RationalQ(Rt(Times(CN1,c,pd),C2))))),And(And(NegQ(Times(CN1,pe,f)),NegQ(Times(CN1,c,pd))),Not(RationalQ(Rt(Times(c,pd),C2)))))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(x_,pn_),b_DEFAULT),a_DEFAULT),CN1),Power(Plus(Times(Power(x_,pn_),f_DEFAULT),pe_DEFAULT),q_DEFAULT),Power(Plus(Times(Power(x_,pn_),pd_DEFAULT),c_DEFAULT),p_)),x_Symbol),
    Condition(Plus(Times(CN1,pd,Power(Plus(Times(b,c),Times(CN1,a,pd)),CN1),Int(Times(Power(Plus(c,Times(pd,Power(x,pn))),p),Power(Plus(pe,Times(f,Power(x,pn))),q)),x)),Times(b,Power(Plus(Times(b,c),Times(CN1,a,pd)),CN1),Int(Times(Power(Plus(c,Times(pd,Power(x,pn))),Plus(p,C1)),Power(Plus(pe,Times(f,Power(x,pn))),q),Power(Plus(a,Times(b,Power(x,pn))),CN1)),x))),And(And(And(And(And(FreeQ(List(a,b,c,pd,pe,f,pn,q),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),NonzeroQ(Plus(Times(b,pe),Times(CN1,a,f)))),NonzeroQ(Plus(Times(pd,pe),Times(CN1,c,f)))),RationalQ(p)),Less(p,CN1)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(x_,pn_),b_DEFAULT),a_DEFAULT),m_),Power(Plus(Times(Power(x_,pn_),f_DEFAULT),pe_DEFAULT),q_),Power(Plus(Times(Power(x_,pn_),pd_DEFAULT),c_DEFAULT),p_)),x_Symbol),
    Condition(Module(List(Set(u,ExpandIntegrand(Times(Power(Plus(a,Times(b,Power(x,pn))),m),Power(Plus(c,Times(pd,Power(x,pn))),p),Power(Plus(pe,Times(f,Power(x,pn))),q)),x))),Condition(Int(u,x),SumQ(u))),And(And(And(And(FreeQ(List(a,b,c,pd,pe,f),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),NonzeroQ(Plus(Times(b,pe),Times(CN1,a,f)))),NonzeroQ(Plus(Times(pd,pe),Times(CN1,c,f)))),PositiveIntegerQ(pn)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(x_,pn_),b_DEFAULT),a_DEFAULT),m_DEFAULT),Power(Plus(Times(Power(x_,pn_),f_DEFAULT),pe_),q_DEFAULT),Power(Plus(Times(Power(x_,pn_),pd_DEFAULT),c_DEFAULT),p_DEFAULT)),x_Symbol),
    Condition($(Defer($s("Int")),Times(Power(Plus(a,Times(b,Power(x,pn))),m),Power(Plus(c,Times(pd,Power(x,pn))),p),Power(Plus(pe,Times(f,Power(x,pn))),q)),x),FreeQ(List(a,b,c,pd,pe,f,m,pn,p,q),x))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(u_,pn_),b_DEFAULT),a_DEFAULT),m_DEFAULT),Power(Plus(Times(Power(w_,pn_),f_DEFAULT),pe_),q_DEFAULT),Power(Plus(Times(Power(v_,pn_),pd_DEFAULT),c_DEFAULT),p_DEFAULT)),x_Symbol),
    Condition(Times(Power(Coefficient(u,x,C1),CN1),Subst(Int(Times(Power(Plus(a,Times(b,Power(x,pn))),m),Power(Plus(c,Times(pd,Power(x,pn))),p),Power(Plus(pe,Times(f,Power(x,pn))),q)),x),x,u)),And(And(And(And(FreeQ(List(a,b,c,pd,pe,f,m,pn,p,q),x),ZeroQ(Plus(u,Times(CN1,v)))),ZeroQ(Plus(u,Times(CN1,w)))),LinearQ(u,x)),NonzeroQ(Plus(u,Times(CN1,x)))))),
ISetDelayed(Int(Times(Power(u_,m_DEFAULT),Power(v_,p_DEFAULT),Power(w_,q_DEFAULT)),x_Symbol),
    Condition(Int(Times(Power(ExpandToSum(u,x),m),Power(ExpandToSum(v,x),p),Power(ExpandToSum(w,x),q)),x),And(And(And(And(FreeQ(List(m,p,q),x),BinomialQ(List(u,v,w),x)),ZeroQ(Plus(BinomialDegree(u,x),Times(CN1,BinomialDegree(v,x))))),ZeroQ(Plus(BinomialDegree(u,x),Times(CN1,BinomialDegree(w,x))))),Not(BinomialMatchQ(List(u,v,w),x)))))
  );
}
