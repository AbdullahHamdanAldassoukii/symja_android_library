package org.matheclipse.core.integrate.rubi;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctions.*;

import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;
/** 
 * IndefiniteIntegrationRules rules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IndefiniteIntegrationRules11 { 
  public static IAST RULES = List( 
SetDelayed(Int(Power(Plus(Times(Log(Times(Power(Plus(Times($p(e,true),x_),$p(d,true)),n_DEFAULT),c_DEFAULT)),b_DEFAULT),a_DEFAULT),p_),x_Symbol),
    Condition(Plus(Times(x,Power(Plus(a,Times(b,Log(Times(c,Power(Plus(d,Times(e,x)),n))))),p)),Times(CN1,Dist(Times(b,e,n,p),Int(Times(x,Power(Plus(a,Times(b,Log(Times(c,Power(Plus(d,Times(e,x)),n))))),Plus(p,Times(CN1,C1))),Power(Plus(d,Times(e,x)),CN1)),x)))),And(And(FreeQ(List(a,b,c,d,e,n),x),RationalQ(p)),Greater(p,C0)))),
SetDelayed(Int(Power(Plus(Times(Log(Times(Power(x_,n_DEFAULT),c_DEFAULT)),b_DEFAULT),a_DEFAULT),p_),x_Symbol),
    Condition(Plus(Times(x,Power(Plus(a,Times(b,Log(Times(c,Power(x,n))))),Plus(p,C1)),Power(Times(b,n,Plus(p,C1)),CN1)),Times(CN1,Dist(Power(Times(b,n,Plus(p,C1)),CN1),Int(Power(Plus(a,Times(b,Log(Times(c,Power(x,n))))),Plus(p,C1)),x)))),And(And(FreeQ(List(a,b,c,n),x),RationalQ(p)),Less(p,CN1)))),
SetDelayed(Int(Power(Log(Times(Power(Plus(Times($p(e,true),x_),$p(d,true)),n_DEFAULT),c_DEFAULT)),p_),x_Symbol),
    Condition(Plus(Times(Plus(d,Times(e,x)),Power(Log(Times(c,Power(Plus(d,Times(e,x)),n))),Plus(p,C1)),Power(Times(e,n,Plus(p,C1)),CN1)),Times(CN1,Dist(Power(Times(n,Plus(p,C1)),CN1),Int(Power(Log(Times(c,Power(Plus(d,Times(e,x)),n))),Plus(p,C1)),x)))),And(And(FreeQ(List(c,d,e,n),x),RationalQ(p)),Less(p,CN1)))),
SetDelayed(Int(Power(Plus(Times(Log(Times(Power(Plus(Times($p(e,true),x_),$p(d,true)),n_DEFAULT),c_DEFAULT)),b_DEFAULT),a_DEFAULT),p_),x_Symbol),
    Condition(Times(Plus(d,Times(e,x)),Gamma(Plus(p,C1),Times(CN1,Plus(a,Times(b,Log(Times(c,Power(Plus(d,Times(e,x)),n))))),Power(Times(b,n),CN1))),Power(Plus(a,Times(b,Log(Times(c,Power(Plus(d,Times(e,x)),n))))),p),Power(Times(e,Power(Times(CN1,Plus(a,Times(b,Log(Times(c,Power(Plus(d,Times(e,x)),n))))),Power(Times(b,n),CN1)),p),Power(E,Times(a,Power(Times(b,n),CN1))),Power(Times(c,Power(Plus(d,Times(e,x)),n)),Power(n,CN1))),CN1)),And(FreeQ(List(a,b,c,d,e,n,p),x),NonzeroQ(Plus(p,C1))))),
SetDelayed(Int(Times(Power(Plus(Times(Log(Times(Power(x_,n_DEFAULT),c_DEFAULT)),b_DEFAULT),a_DEFAULT),CN1),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(x,Plus(m,C1)),ExpIntegralEi(Times(Plus(m,C1),Plus(a,Times(b,Log(Times(c,Power(x,n))))),Power(Times(b,n),CN1))),Power(Times(b,n,Power(E,Times(a,Plus(m,C1),Power(Times(b,n),CN1))),Power(Times(c,Power(x,n)),Times(Plus(m,C1),Power(n,CN1)))),CN1)),And(FreeQ(List(a,b,c,m,n),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(Plus(Times(Log(Times(Power(x_,n_DEFAULT),c_DEFAULT)),b_DEFAULT),a_DEFAULT),CN1D2),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Sqrt(Pi),Power(x,Plus(m,C1)),Erfi(Times(Rt(Times(Plus(m,C1),Power(Times(b,n),CN1)),C2),Sqrt(Plus(a,Times(b,Log(Times(c,Power(x,n)))))))),Power(Times(b,n,Rt(Times(Plus(m,C1),Power(Times(b,n),CN1)),C2),Power(E,Times(a,Plus(m,C1),Power(Times(b,n),CN1))),Power(Times(c,Power(x,n)),Times(Plus(m,C1),Power(n,CN1)))),CN1)),And(And(FreeQ(List(a,b,c,m,n),x),NonzeroQ(Plus(m,C1))),PosQ(Times(Plus(m,C1),Power(Times(b,n),CN1)))))),
SetDelayed(Int(Times(Power(Plus(Times(Log(Times(Power(x_,n_DEFAULT),c_DEFAULT)),b_DEFAULT),a_DEFAULT),CN1D2),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Sqrt(Pi),Power(x,Plus(m,C1)),Erf(Times(Rt(Times(CN1,Plus(m,C1),Power(Times(b,n),CN1)),C2),Sqrt(Plus(a,Times(b,Log(Times(c,Power(x,n)))))))),Power(Times(b,n,Rt(Times(CN1,Plus(m,C1),Power(Times(b,n),CN1)),C2),Power(E,Times(a,Plus(m,C1),Power(Times(b,n),CN1))),Power(Times(c,Power(x,n)),Times(Plus(m,C1),Power(n,CN1)))),CN1)),And(And(FreeQ(List(a,b,c,m,n),x),NonzeroQ(Plus(m,C1))),NegQ(Times(Plus(m,C1),Power(Times(b,n),CN1)))))),
SetDelayed(Int(Times(Power(Plus(Times(Log(Times(Power(x_,n_DEFAULT),c_DEFAULT)),b_DEFAULT),a_DEFAULT),p_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Log(Times(c,Power(x,n))))),p),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(b,n,p,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Power(Plus(a,Times(b,Log(Times(c,Power(x,n))))),Plus(p,Times(CN1,C1)))),x)))),And(And(And(FreeQ(List(a,b,c,m,n),x),RationalQ(p)),Greater(p,C0)),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(Plus(Times(Log(Times(Power(x_,n_DEFAULT),c_DEFAULT)),b_DEFAULT),a_DEFAULT),p_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Log(Times(c,Power(x,n))))),Plus(p,C1)),Power(Times(b,n,Plus(p,C1)),CN1)),Times(CN1,Dist(Times(Plus(m,C1),Power(Times(b,n,Plus(p,C1)),CN1)),Int(Times(Power(x,m),Power(Plus(a,Times(b,Log(Times(c,Power(x,n))))),Plus(p,C1))),x)))),And(And(And(FreeQ(List(a,b,c,m,n),x),RationalQ(p)),Less(p,CN1)),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(Plus(Times(Log(Times(Power(x_,n_DEFAULT),c_DEFAULT)),b_DEFAULT),a_DEFAULT),p_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Times(Power(x,Plus(m,C1)),Gamma(Plus(p,C1),Times(CN1,Plus(m,C1),Plus(a,Times(b,Log(Times(c,Power(x,n))))),Power(Times(b,n),CN1))),Power(Plus(a,Times(b,Log(Times(c,Power(x,n))))),p),Power(Times(Plus(m,C1),Power(E,Times(a,Plus(m,C1),Power(Times(b,n),CN1))),Power(Times(c,Power(x,n)),Times(Plus(m,C1),Power(n,CN1))),Power(Times(CN1,Plus(m,C1),Plus(a,Times(b,Log(Times(c,Power(x,n))))),Power(Times(b,n),CN1)),p)),CN1)),And(FreeQ(List(a,b,c,m,n,p),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Power(Log(Times(Power(Times(Power(x_,n_DEFAULT),b_DEFAULT),p_),a_DEFAULT)),q_DEFAULT),x_Symbol),
    Condition(Subst(Int(Power(Log(Power(x,Times(n,p))),q),x),Power(x,Times(n,p)),Times(a,Power(Times(b,Power(x,n)),p))),FreeQ(List(a,b,n,p,q),x))),
SetDelayed(Int(Power(Log(Times(Power(Times(Power(Times(Power(x_,n_DEFAULT),c_DEFAULT),p_),b_DEFAULT),q_),a_DEFAULT)),r_DEFAULT),x_Symbol),
    Condition(Subst(Int(Power(Log(Power(x,Times(n,p,q))),r),x),Power(x,Times(n,p,q)),Times(a,Power(Times(b,Power(Times(c,Power(x,n)),p)),q))),FreeQ(List(a,b,c,n,p,q,r),x))),
SetDelayed(Int(Times(Power(Log(Times(Power(Times(Power(x_,n_DEFAULT),b_DEFAULT),p_),a_DEFAULT)),q_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Subst(Int(Times(Power(x,m),Power(Log(Power(x,Times(n,p))),q)),x),Power(x,Times(n,p)),Times(a,Power(Times(b,Power(x,n)),p))),And(And(FreeQ(List(a,b,m,n,p,q),x),NonzeroQ(Plus(m,C1))),Not(SameQ(Power(x,Times(n,p)),Times(a,Power(Times(b,Power(x,n)),p))))))),
SetDelayed(Int(Times(Power(Log(Times(Power(Times(Power(Times(Power(x_,n_DEFAULT),c_DEFAULT),p_),b_DEFAULT),q_),a_DEFAULT)),r_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Subst(Int(Times(Power(x,m),Power(Log(Power(x,Times(n,p,q))),r)),x),Power(x,Times(n,p,q)),Times(a,Power(Times(b,Power(Times(c,Power(x,n)),p)),q))),And(And(FreeQ(List(a,b,c,m,n,p,q,r),x),NonzeroQ(Plus(m,C1))),Not(SameQ(Power(x,Times(n,p,q)),Times(a,Power(Times(b,Power(Times(c,Power(x,n)),p)),q))))))),
SetDelayed(Int(Times(Power(Log(Times(Power(Plus(Times(b_DEFAULT,x_),a_),n_DEFAULT),c_DEFAULT)),p_DEFAULT),Power(Plus(Times($p(e,true),x_),$p(d,true)),CN1)),x_Symbol),
    Condition(Plus(Times(Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),p),Log(Times(b,Plus(d,Times(e,x)),Power(Plus(Times(b,d),Times(CN1,a,e)),CN1))),Power(e,CN1)),Times(CN1,Dist(Times(b,n,p,Power(e,CN1)),Int(Times(Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),Plus(p,Times(CN1,C1))),Log(Times(b,Plus(d,Times(e,x)),Power(Plus(Times(b,d),Times(CN1,a,e)),CN1))),Power(Plus(a,Times(b,x)),CN1)),x)))),And(And(And(FreeQ(List(a,b,c,d,e,n),x),RationalQ(p)),Greater(p,C0)),NonzeroQ(Plus(Times(b,d),Times(CN1,a,e)))))),
SetDelayed(Int(Times(Log(Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT)),Power(Log(Times(Power(Plus(Times(b_DEFAULT,x_),a_),n_DEFAULT),c_DEFAULT)),p_DEFAULT),Power(Plus(Times($p(e,true),x_),$p(d)),CN1)),x_Symbol),
    Condition(Module(List(Set(q,Simplify(Plus(C1,Times(CN1,h,Plus(f,Times(g,x))))))),Plus(Times(CN1,Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),p),PolyLog(C2,q),Power(e,CN1)),Dist(Times(b,n,p,Power(e,CN1)),Int(Times(Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),Plus(p,Times(CN1,C1))),PolyLog(C2,q),Power(Plus(a,Times(b,x)),CN1)),x)))),And(And(And(And(FreeQ(List(a,b,c,d,e,f,g,h,n),x),RationalQ(p)),Greater(p,C0)),ZeroQ(Plus(Times(a,e),Times(CN1,b,d)))),ZeroQ(Plus(Times(a,g,h),Times(CN1,b,Plus(Times(f,h),Times(CN1,C1)))))))),
SetDelayed(Int(Times(PolyLog(m_,Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT)),Power(Log(Times(Power(Plus(Times(b_DEFAULT,x_),a_),n_DEFAULT),c_DEFAULT)),p_DEFAULT),Power(Plus(Times($p(e,true),x_),$p(d)),CN1)),x_Symbol),
    Condition(Plus(Times(Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),p),PolyLog(Plus(m,C1),Times(h,Plus(f,Times(g,x)))),Power(e,CN1)),Times(CN1,Dist(Times(b,n,p,Power(e,CN1)),Int(Times(Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),Plus(p,Times(CN1,C1))),PolyLog(Plus(m,C1),Times(h,Plus(f,Times(g,x)))),Power(Plus(a,Times(b,x)),CN1)),x)))),And(And(And(And(FreeQ(List(a,b,c,d,e,f,g,h,m,n),x),RationalQ(p)),Greater(p,C0)),ZeroQ(Plus(Times(a,e),Times(CN1,b,d)))),ZeroQ(Plus(Times(a,g),Times(CN1,b,f)))))),
SetDelayed(Int(Times(Power(Log(Times(Power(Plus(Times(b_DEFAULT,x_),a_),n_DEFAULT),c_DEFAULT)),p_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,m),Plus(a,Times(b,x)),Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),p),Power(Times(b,Plus(m,C1)),CN1)),Times(CN1,Dist(Times(a,m,Power(Times(b,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),p)),x))),Times(CN1,Dist(Times(n,p,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),Plus(p,Times(CN1,C1)))),x)))),And(And(And(FreeQ(List(a,b,c,n),x),RationalQ(List(m,p))),Greater(m,C0)),Greater(p,C0)))),
SetDelayed(Int(Times(Power(Log(Times(Power(Plus(Times(b_DEFAULT,x_),a_),n_DEFAULT),c_DEFAULT)),p_),Power(x_,CN2)),x_Symbol),
    Condition(Plus(Times(CN1,Plus(a,Times(b,x)),Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),p),Power(Times(a,x),CN1)),Dist(Times(b,n,p,Power(a,CN1)),Int(Times(Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),Plus(p,Times(CN1,C1))),Power(x,CN1)),x))),And(And(FreeQ(List(a,b,c,n),x),RationalQ(p)),Greater(p,C0)))),
SetDelayed(Int(Times(Power(Log(Times(Power(Plus(Times(b_DEFAULT,x_),a_),n_DEFAULT),c_DEFAULT)),p_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Plus(a,Times(b,x)),Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),p),Power(Times(a,Plus(m,C1)),CN1)),Times(CN1,Dist(Times(b,Plus(m,C2),Power(Times(a,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,C1)),Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),p)),x))),Times(CN1,Dist(Times(b,n,p,Power(Times(a,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,C1)),Power(Log(Times(c,Power(Plus(a,Times(b,x)),n))),Plus(p,Times(CN1,C1)))),x)))),And(And(And(And(FreeQ(List(a,b,c,n),x),RationalQ(List(m,p))),Less(m,CN1)),Unequal(m,CN2)),Greater(p,C0)))),
SetDelayed(Int(Times(Power(Log(Times(Power(Plus(Times(b_DEFAULT,x_),a_),n_DEFAULT),c_DEFAULT)),p_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(Power(Plus(Times(CN1,a,Power(b,CN1)),Times(x,Power(b,CN1))),m),Power(Log(Times(c,Power(x,n))),p)),x),x,Plus(a,Times(b,x)))),And(And(And(FreeQ(List(a,b,c,n,p),x),IntIntegerQ(m)),Greater(m,C0)),Not(And(RationalQ(p),Greater(p,C0)))))),
SetDelayed(Int(Power(Log(Times(Power(Plus(Times(Power(x_,CN1),b_DEFAULT),a_),n_DEFAULT),c_DEFAULT)),p_),x_Symbol),
    Condition(Plus(Times(Plus(b,Times(a,x)),Power(Log(Times(c,Power(Plus(a,Times(b,Power(x,CN1))),n))),p),Power(a,CN1)),Dist(Times(b,Power(a,CN1),n,p),Int(Times(Power(Log(Times(c,Power(Plus(a,Times(b,Power(x,CN1))),n))),Plus(p,Times(CN1,C1))),Power(x,CN1)),x))),And(And(FreeQ(List(a,b,c,n),x),IntIntegerQ(p)),Greater(p,C0)))),
SetDelayed(Int(Power(Log(Times(Power(Plus(Times(Power(x_,C2),b_DEFAULT),a_),n_DEFAULT),c_DEFAULT)),C2),x_Symbol),
    Condition(Plus(Times(x,Power(Log(Times(c,Power(Plus(a,Times(b,Power(x,C2))),n))),C2)),Times(ZZ(8L),Power(n,C2),x),Times(CN1,C4,n,x,Log(Times(c,Power(Plus(a,Times(b,Power(x,C2))),n)))),Times(n,Sqrt(a),Power(Sqrt(Times(CN1,b)),CN1),Plus(Times(C4,n,Log(Times(Plus(Times(CN1,Sqrt(a)),Times(Sqrt(Times(CN1,b)),x)),Power(Plus(Sqrt(a),Times(Sqrt(Times(CN1,b)),x)),CN1)))),Times(CN1,C4,n,ArcTanh(Times(Sqrt(Times(CN1,b)),x,Power(Sqrt(a),CN1))),Plus(Log(Plus(Times(CN1,Sqrt(a),Power(Sqrt(Times(CN1,b)),CN1)),x)),Log(Plus(Times(Sqrt(a),Power(Sqrt(Times(CN1,b)),CN1)),x)))),Times(CN1,n,Power(Log(Plus(Times(CN1,Sqrt(a),Power(Sqrt(Times(CN1,b)),CN1)),x)),C2)),Times(n,Power(Log(Plus(Times(Sqrt(a),Power(Sqrt(Times(CN1,b)),CN1)),x)),C2)),Times(CN1,C2,n,Log(Plus(Times(Sqrt(a),Power(Sqrt(Times(CN1,b)),CN1)),x)),Log(Plus(Rational(C1,C2),Times(CN1,Sqrt(Times(CN1,b)),x,Power(Times(C2,Sqrt(a)),CN1))))),Times(C2,n,Log(Plus(Times(CN1,Sqrt(a),Power(Sqrt(Times(CN1,b)),CN1)),x)),Log(Times(Rational(C1,C2),Plus(C1,Times(Sqrt(Times(CN1,b)),x,Power(Sqrt(a),CN1)))))),Times(C4,ArcTanh(Times(Sqrt(Times(CN1,b)),x,Power(Sqrt(a),CN1))),Log(Times(c,Power(Plus(a,Times(b,Power(x,C2))),n)))),Times(C2,n,PolyLog(C2,Plus(Rational(C1,C2),Times(CN1,Sqrt(Times(CN1,b)),x,Power(Times(C2,Sqrt(a)),CN1))))),Times(CN1,C2,n,PolyLog(C2,Times(Rational(C1,C2),Plus(C1,Times(Sqrt(Times(CN1,b)),x,Power(Sqrt(a),CN1))))))))),FreeQ(List(a,b,c,n),x))),
SetDelayed(Int(Power(Log(Times(Power(Plus(Times(Power(x_,C2),c_DEFAULT),Times(b_DEFAULT,x_),a_DEFAULT),n_DEFAULT),$p(d,true))),C2),x_Symbol),
    Condition(Plus(Times(x,Power(Log(Times(d,Power(Plus(a,Times(b,x),Times(c,Power(x,C2))),n))),C2)),Times(CN1,Dist(Times(C2,b,n),Int(Times(x,Log(Times(d,Power(Plus(a,Times(b,x),Times(c,Power(x,C2))),n))),Power(Plus(a,Times(b,x),Times(c,Power(x,C2))),CN1)),x))),Times(CN1,Dist(Times(C4,c,n),Int(Times(Power(x,C2),Log(Times(d,Power(Plus(a,Times(b,x),Times(c,Power(x,C2))),n))),Power(Plus(a,Times(b,x),Times(c,Power(x,C2))),CN1)),x)))),FreeQ(List(a,b,c,d,n),x))),
SetDelayed(Int(Log(Times(Power(Log(Times(Power(x_,n_DEFAULT),b_DEFAULT)),p_DEFAULT),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(x,Log(Times(a,Power(Log(Times(b,Power(x,n))),p)))),Times(CN1,Dist(Times(n,p),Int(Power(Log(Times(b,Power(x,n))),CN1),x)))),FreeQ(List(a,b,n,p),x))),
SetDelayed(Int(Times(Log(Times(Power(Log(Times(Power(x_,n_DEFAULT),b_DEFAULT)),p_DEFAULT),a_DEFAULT)),Power(x_,CN1)),x_Symbol),
    Condition(Times(Log(Times(b,Power(x,n))),Plus(Times(CN1,p),Log(Times(a,Power(Log(Times(b,Power(x,n))),p)))),Power(n,CN1)),FreeQ(List(a,b,n,p),x))),
SetDelayed(Int(Times(Log(Times(Power(Log(Times(Power(x_,n_DEFAULT),b_DEFAULT)),p_DEFAULT),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Log(Times(a,Power(Log(Times(b,Power(x,n))),p))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(n,p,Power(Plus(m,C1),CN1)),Int(Times(Power(x,m),Power(Log(Times(b,Power(x,n))),CN1)),x)))),And(FreeQ(List(a,b,m,n,p),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(Log(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),Power(Plus(Times($p(d,true),x_),c_),CN1))),m_DEFAULT),Power(x_,CN1)),x_Symbol),
    Condition(Plus(Subst(Int(Times(Power(Log(Plus(Times(a,Power(c,CN1)),Times(x,Power(c,CN1)))),m),Power(x,CN1)),x),x,Times(Plus(Times(b,c),Times(CN1,a,d)),x,Power(Plus(c,Times(d,x)),CN1))),Times(CN1,Subst(Int(Times(Power(Log(Plus(Times(b,Power(d,CN1)),Times(x,Power(d,CN1)))),m),Power(x,CN1)),x),x,Times(CN1,Plus(Times(b,c),Times(CN1,a,d)),Power(Plus(c,Times(d,x)),CN1))))),And(And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Greater(m,C0)),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))))),
SetDelayed(Int(Times(Plus(Times(Log(Plus(Times($p(d,true),x_),c_DEFAULT)),$p("B",true)),$p("A",true)),Power(Plus(Times(Log(Plus(Times($p(d,true),x_),c_DEFAULT)),b_DEFAULT),a_),CN1D2)),x_Symbol),
    Condition(Plus(Dist(Times(Plus(Times(b,$s("A")),Times(CN1,a,$s("B"))),Power(b,CN1)),Int(Power(Sqrt(Plus(a,Times(b,Log(Plus(c,Times(d,x)))))),CN1),x)),Dist(Times($s("B"),Power(b,CN1)),Int(Sqrt(Plus(a,Times(b,Log(Plus(c,Times(d,x)))))),x))),And(FreeQ(List(a,b,c,d,$s("A"),$s("B")),x),NonzeroQ(Plus(Times(b,$s("A")),Times(CN1,a,$s("B"))))))),
SetDelayed(Int(Times(Power(Log(Plus(Times($p(d,true),x_),c_DEFAULT)),n_),Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),Power(Log(Plus(c,Times(d,x))),n),Power(Times(b,Plus(m,C1)),CN1)),Times(CN1,Dist(Times(d,n,Power(Times(b,Plus(m,C1)),CN1)),Int(Regularize(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),Power(Log(Plus(c,Times(d,x))),Plus(n,Times(CN1,C1))),Power(Plus(c,Times(d,x)),CN1)),x),x)))),And(And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(List(m,n))),Less(m,CN1)),Greater(n,C0)))),
SetDelayed(Int(Power(f_,Times(Log(u_),a_DEFAULT)),x_Symbol),
    Condition(Int(Power(u,Times(a,Log(f))),x),FreeQ(List(a,f),x))),
SetDelayed(Int(Power(Plus(Times(a_DEFAULT,x_),Times(Power(Log(Times(Power(x_,n_DEFAULT),c_DEFAULT)),m_DEFAULT),b_DEFAULT,x_)),CN1),x_Symbol),
    Condition(Dist(Power(n,CN1),Subst(Int(Power(Plus(a,Times(b,Power(x,m))),CN1),x),x,Log(Times(c,Power(x,n))))),FreeQ(List(a,b,c,m,n),x))),
SetDelayed(Int(Times(Power(x_,CN1),u_),x_Symbol),
    Condition(Module(List(Set($s("lst"),FunctionOfLog(u,x))),Condition(Dist(Power(Part($s("lst"),C3),CN1),Subst(Int(Part($s("lst"),C1),x),x,Log(Part($s("lst"),C2)))),Not(FalseQ($s("lst"))))),NonsumQ(u))),
SetDelayed(Int(Log(u_),x_Symbol),
    Condition(Plus(Times(x,Log(u)),Times(CN1,Int(Regularize(Times(x,D(u,x),Power(u,CN1)),x),x))),AlgebraicFunctionQ(u,x))),
SetDelayed(Int(ArcSin(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),ArcSin(Plus(a,Times(b,x))),Power(b,CN1)),Times(Sqrt(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2)))),Power(b,CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(ArcSin(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CN1),x_Symbol),
    Condition(Times(CosIntegral(ArcSin(Plus(a,Times(b,x)))),Power(b,CN1)),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(ArcSin(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CN2),x_Symbol),
    Condition(Plus(Times(CN1,Sqrt(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2)))),Power(Times(b,ArcSin(Plus(a,Times(b,x)))),CN1)),Times(CN1,SinIntegral(ArcSin(Plus(a,Times(b,x)))),Power(b,CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(ArcSin(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CN1D2),x_Symbol),
    Condition(Times(Sqrt(Times(C2,Pi)),FresnelC(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(ArcSin(Plus(a,Times(b,x)))))),Power(b,CN1)),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(ArcSin(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),C1D2),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Sqrt(ArcSin(Plus(a,Times(b,x)))),Power(b,CN1)),Times(CN1,Sqrt(Times(Rational(C1,C2),Pi)),FresnelS(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(ArcSin(Plus(a,Times(b,x)))))),Power(b,CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(ArcSin(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),n_),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Power(ArcSin(Plus(a,Times(b,x))),n),Power(b,CN1)),Times(n,Sqrt(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2)))),Power(ArcSin(Plus(a,Times(b,x))),Plus(n,Times(CN1,C1))),Power(b,CN1)),Times(CN1,Dist(Times(n,Plus(n,Times(CN1,C1))),Int(Power(ArcSin(Plus(a,Times(b,x))),Plus(n,Times(CN1,C2))),x)))),And(And(FreeQ(List(a,b),x),RationalQ(n)),Greater(n,C1)))),
SetDelayed(Int(Power(ArcSin(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),n_),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Power(ArcSin(Plus(a,Times(b,x))),Plus(n,C2)),Power(Times(b,Plus(n,C1),Plus(n,C2)),CN1)),Times(Sqrt(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2)))),Power(ArcSin(Plus(a,Times(b,x))),Plus(n,C1)),Power(Times(b,Plus(n,C1)),CN1)),Times(CN1,Dist(Power(Times(Plus(n,C1),Plus(n,C2)),CN1),Int(Power(ArcSin(Plus(a,Times(b,x))),Plus(n,C2)),x)))),And(And(And(FreeQ(List(a,b),x),RationalQ(n)),Less(n,CN1)),Unequal(n,CN2)))),
SetDelayed(Int(Power(ArcSin(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),n_),x_Symbol),
    Condition(Times(CI,Power(ArcSin(Plus(a,Times(b,x))),n),Plus(Times(CN1,Power(Times(CI,ArcSin(Plus(a,Times(b,x)))),n),Gamma(Plus(n,C1),Times(CN1,CI,ArcSin(Plus(a,Times(b,x)))))),Times(Power(Times(CN1,CI,ArcSin(Plus(a,Times(b,x)))),n),Gamma(Plus(n,C1),Times(CI,ArcSin(Plus(a,Times(b,x))))))),Power(Times(C2,b,Power(Power(ArcSin(Plus(a,Times(b,x))),C2),n)),CN1)),And(FreeQ(List(a,b,n),x),Or(Not(RationalQ(n)),Less(Less(CN1,n),C1))))),
SetDelayed(Int(Times(ArcSin(Times(Power(x_,n_DEFAULT),a_DEFAULT)),Power(x_,CN1)),x_Symbol),
    Condition(Plus(Times(CN1,CI,Power(ArcSin(Times(a,Power(x,n))),C2),Power(Times(C2,n),CN1)),Times(ArcSin(Times(a,Power(x,n))),Log(Plus(C1,Times(CN1,Power(Plus(Times(CI,a,Power(x,n)),Sqrt(Plus(C1,Times(CN1,Power(a,C2),Power(x,Times(C2,n)))))),C2)))),Power(n,CN1)),Times(CN1,CI,PolyLog(C2,Power(Plus(Times(CI,a,Power(x,n)),Sqrt(Plus(C1,Times(CN1,Power(a,C2),Power(x,Times(C2,n)))))),C2)),Power(Times(C2,n),CN1))),FreeQ(List(a,n),x))),
SetDelayed(Int(Times(ArcSin(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),ArcSin(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Power(Sqrt(Plus(C1,Times(CN1,Power(a,C2)),Times(CN1,C2,a,b,x),Times(CN1,Power(b,C2),Power(x,C2)))),CN1)),x)))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Power(Plus(Times(ArcSin(Plus(Times($p(d,true),x_),c_DEFAULT)),b_DEFAULT),a_),CN1D2),x_Symbol),
    Condition(Plus(Times(Sqrt(Times(C2,Pi)),Cos(Times(a,Power(b,CN1))),FresnelC(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(Plus(a,Times(b,ArcSin(Plus(c,Times(d,x)))))),Power(Rt(b,C2),CN1))),Power(Times(d,Rt(b,C2)),CN1)),Times(Sqrt(Times(C2,Pi)),Sin(Times(a,Power(b,CN1))),FresnelS(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(Plus(a,Times(b,ArcSin(Plus(c,Times(d,x)))))),Power(Rt(b,C2),CN1))),Power(Times(d,Rt(b,C2)),CN1))),And(FreeQ(List(a,b,c,d),x),PosQ(b)))),
SetDelayed(Int(Power(Plus(Times(ArcSin(Plus(Times($p(d,true),x_),c_DEFAULT)),b_DEFAULT),a_),CN1D2),x_Symbol),
    Condition(Plus(Times(CN1,Sqrt(Times(C2,Pi)),Cos(Times(a,Power(b,CN1))),FresnelC(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(Plus(a,Times(b,ArcSin(Plus(c,Times(d,x)))))),Power(Rt(Times(CN1,b),C2),CN1))),Power(Times(d,Rt(Times(CN1,b),C2)),CN1)),Times(Sqrt(Times(C2,Pi)),Sin(Times(a,Power(b,CN1))),FresnelS(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(Plus(a,Times(b,ArcSin(Plus(c,Times(d,x)))))),Power(Rt(Times(CN1,b),C2),CN1))),Power(Times(d,Rt(Times(CN1,b),C2)),CN1))),And(FreeQ(List(a,b,c,d),x),NegQ(b)))),
SetDelayed(Int(Times(Power(ArcSin(x_),n_DEFAULT),Power(Plus(C1,Times(CN1,Power(x_,C2))),m_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("ShowSteps"),False),Set($s("StepCounter"),Null)),Int(Power(Plus(C1,Times(CN1,Power(x,C2))),m),x)))),Plus(Times(u,Power(ArcSin(x),n)),Times(CN1,Dist(n,Int(Expand(Times(u,Power(ArcSin(x),Plus(n,Times(CN1,C1))),Power(Sqrt(Plus(C1,Times(CN1,Power(x,C2)))),CN1))),x))))),And(And(And(HalfIntegerQ(m),Unequal(m,Rational(CN1,C2))),IntIntegerQ(n)),Greater(n,C0)))),
SetDelayed(Int(Times(Power(ArcSin(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),n_),Power(u_,CN1D2),x_),x_Symbol),
    Condition(Plus(Times(CN1,Sqrt(u),Power(ArcSin(Plus(a,Times(b,x))),n),Power(Power(b,C2),CN1)),Dist(Times(n,Power(b,CN1)),Int(Power(ArcSin(Plus(a,Times(b,x))),Plus(n,Times(CN1,C1))),x)),Times(CN1,Dist(Times(a,Power(b,CN1)),Int(Times(Power(ArcSin(Plus(a,Times(b,x))),n),Power(Sqrt(u),CN1)),x)))),And(And(And(FreeQ(List(a,b),x),ZeroQ(Plus(u,Times(CN1,C1),Power(Plus(a,Times(b,x)),C2)))),RationalQ(n)),Greater(n,C1)))),
SetDelayed(Int(Times(Power(ArcSin(Times(Power(Plus(Times(Power(x_,n_DEFAULT),b_DEFAULT),a_DEFAULT),CN1),c_DEFAULT)),m_DEFAULT),u_DEFAULT),x_Symbol),
    Condition(Int(Times(u,Power(ArcCsc(Plus(Times(a,Power(c,CN1)),Times(b,Power(x,n),Power(c,CN1)))),m)),x),FreeQ(List(a,b,c,n,m),x))),
SetDelayed(Int(ArcSin(u_),x_Symbol),
    Condition(Plus(Times(x,ArcSin(u)),Times(CN1,Int(Regularize(Times(x,D(u,x),Power(Sqrt(Plus(C1,Times(CN1,Power(u,C2)))),CN1)),x),x))),And(InverseFunctionFreeQ(u,x),Not(MatchQ(u,Condition(Plus(c_DEFAULT,Times($p(d,true),Power(f_,Plus(a_DEFAULT,Times(b_DEFAULT,x))))),FreeQ(List(a,b,c,d,f),x))))))),
SetDelayed(Int(Power(f_,Times(ArcSin(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),c_DEFAULT)),x_Symbol),
    Condition(Times(Power(f,Times(c,ArcSin(Plus(a,Times(b,x))))),Plus(a,Times(b,x),Times(c,Sqrt(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2)))),Log(f))),Power(Times(b,Plus(C1,Times(Power(c,C2),Power(Log(f),C2)))),CN1)),And(FreeQ(List(a,b,c,f),x),NonzeroQ(Plus(C1,Times(Power(c,C2),Power(Log(f),C2))))))),
SetDelayed(Int(ArcCos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),ArcCos(Plus(a,Times(b,x))),Power(b,CN1)),Times(CN1,Sqrt(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2)))),Power(b,CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(ArcCos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CN1),x_Symbol),
    Condition(Times(CN1,SinIntegral(ArcCos(Plus(a,Times(b,x)))),Power(b,CN1)),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(ArcCos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CN2),x_Symbol),
    Condition(Plus(Times(Sqrt(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2)))),Power(Times(b,ArcCos(Plus(a,Times(b,x)))),CN1)),Times(CN1,CosIntegral(ArcCos(Plus(a,Times(b,x)))),Power(b,CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(ArcCos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),CN1D2),x_Symbol),
    Condition(Times(CN1,Sqrt(Times(C2,Pi)),FresnelS(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(ArcCos(Plus(a,Times(b,x)))))),Power(b,CN1)),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(ArcCos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),C1D2),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Sqrt(ArcCos(Plus(a,Times(b,x)))),Power(b,CN1)),Times(CN1,Sqrt(Times(Rational(C1,C2),Pi)),FresnelC(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(ArcCos(Plus(a,Times(b,x)))))),Power(b,CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(ArcCos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),n_),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Power(ArcCos(Plus(a,Times(b,x))),n),Power(b,CN1)),Times(CN1,n,Sqrt(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2)))),Power(ArcCos(Plus(a,Times(b,x))),Plus(n,Times(CN1,C1))),Power(b,CN1)),Times(CN1,Dist(Times(n,Plus(n,Times(CN1,C1))),Int(Power(ArcCos(Plus(a,Times(b,x))),Plus(n,Times(CN1,C2))),x)))),And(And(FreeQ(List(a,b),x),RationalQ(n)),Greater(n,C1)))),
SetDelayed(Int(Power(ArcCos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),n_),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),Power(ArcCos(Plus(a,Times(b,x))),Plus(n,C2)),Power(Times(b,Plus(n,C1),Plus(n,C2)),CN1)),Times(CN1,Sqrt(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2)))),Power(ArcCos(Plus(a,Times(b,x))),Plus(n,C1)),Power(Times(b,Plus(n,C1)),CN1)),Times(CN1,Dist(Power(Times(Plus(n,C1),Plus(n,C2)),CN1),Int(Power(ArcCos(Plus(a,Times(b,x))),Plus(n,C2)),x)))),And(And(And(FreeQ(List(a,b),x),RationalQ(n)),Less(n,CN1)),Unequal(n,CN2)))),
SetDelayed(Int(Power(ArcCos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),n_),x_Symbol),
    Condition(Times(Power(ArcCos(Plus(a,Times(b,x))),n),Plus(Times(Power(Times(CI,ArcCos(Plus(a,Times(b,x)))),n),Gamma(Plus(n,C1),Times(CN1,CI,ArcCos(Plus(a,Times(b,x)))))),Times(Power(Times(CN1,CI,ArcCos(Plus(a,Times(b,x)))),n),Gamma(Plus(n,C1),Times(CI,ArcCos(Plus(a,Times(b,x))))))),Power(Times(C2,b,Power(Power(ArcCos(Plus(a,Times(b,x))),C2),n)),CN1)),And(FreeQ(List(a,b,n),x),Or(Not(RationalQ(n)),Less(Less(CN1,n),C1))))),
SetDelayed(Int(Times(ArcCos(Times(Power(x_,n_DEFAULT),a_DEFAULT)),Power(x_,CN1)),x_Symbol),
    Condition(Plus(Times(CN1,CI,Power(ArcCos(Times(a,Power(x,n))),C2),Power(Times(C2,n),CN1)),Times(ArcCos(Times(a,Power(x,n))),Log(Plus(C1,Times(CN1,Power(Power(Plus(Times(CI,a,Power(x,n)),Sqrt(Plus(C1,Times(CN1,Power(a,C2),Power(x,Times(C2,n)))))),C2),CN1)))),Power(n,CN1)),Times(CN1,CI,PolyLog(C2,Power(Power(Plus(Times(CI,a,Power(x,n)),Sqrt(Plus(C1,Times(CN1,Power(a,C2),Power(x,Times(C2,n)))))),C2),CN1)),Power(Times(C2,n),CN1))),FreeQ(List(a,n),x))),
SetDelayed(Int(Times(ArcCos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),ArcCos(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1)),Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Power(Sqrt(Plus(C1,Times(CN1,Power(a,C2)),Times(CN1,C2,a,b,x),Times(CN1,Power(b,C2),Power(x,C2)))),CN1)),x))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Power(Plus(Times(ArcCos(Plus(Times($p(d,true),x_),c_DEFAULT)),b_DEFAULT),a_),CN1D2),x_Symbol),
    Condition(Plus(Times(CN1,Sqrt(Times(C2,Pi)),Cos(Times(a,Power(b,CN1))),FresnelS(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(Plus(a,Times(b,ArcCos(Plus(c,Times(d,x)))))),Power(Rt(b,C2),CN1))),Power(Times(d,Rt(b,C2)),CN1)),Times(Sqrt(Times(C2,Pi)),Sin(Times(a,Power(b,CN1))),FresnelC(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(Plus(a,Times(b,ArcCos(Plus(c,Times(d,x)))))),Power(Rt(b,C2),CN1))),Power(Times(d,Rt(b,C2)),CN1))),And(FreeQ(List(a,b,c,d),x),PosQ(b)))),
SetDelayed(Int(Power(Plus(Times(ArcCos(Plus(Times($p(d,true),x_),c_DEFAULT)),b_DEFAULT),a_),CN1D2),x_Symbol),
    Condition(Plus(Times(CN1,Sqrt(Times(C2,Pi)),Cos(Times(a,Power(b,CN1))),FresnelS(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(Plus(a,Times(b,ArcCos(Plus(c,Times(d,x)))))),Power(Rt(Times(CN1,b),C2),CN1))),Power(Times(d,Rt(Times(CN1,b),C2)),CN1)),Times(CN1,Sqrt(Times(C2,Pi)),Sin(Times(a,Power(b,CN1))),FresnelC(Times(Sqrt(Times(C2,Power(Pi,CN1))),Sqrt(Plus(a,Times(b,ArcCos(Plus(c,Times(d,x)))))),Power(Rt(Times(CN1,b),C2),CN1))),Power(Times(d,Rt(Times(CN1,b),C2)),CN1))),And(FreeQ(List(a,b,c,d),x),NegQ(b)))),
SetDelayed(Int(Times(Power(ArcCos(x_),n_DEFAULT),Power(Plus(C1,Times(CN1,Power(x_,C2))),m_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("ShowSteps"),False),Set($s("StepCounter"),Null)),Int(Power(Plus(C1,Times(CN1,Power(x,C2))),m),x)))),Plus(Times(u,Power(ArcCos(x),n)),Dist(n,Int(Expand(Times(u,Power(ArcCos(x),Plus(n,Times(CN1,C1))),Power(Sqrt(Plus(C1,Times(CN1,Power(x,C2)))),CN1))),x)))),And(And(And(HalfIntegerQ(m),Unequal(m,Rational(CN1,C2))),IntIntegerQ(n)),Greater(n,C0)))),
SetDelayed(Int(Times(Power(ArcCos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),n_),Power(u_,CN1D2),x_),x_Symbol),
    Condition(Plus(Times(CN1,Sqrt(u),Power(ArcCos(Plus(a,Times(b,x))),n),Power(Power(b,C2),CN1)),Times(CN1,Dist(Times(n,Power(b,CN1)),Int(Power(ArcCos(Plus(a,Times(b,x))),Plus(n,Times(CN1,C1))),x))),Times(CN1,Dist(Times(a,Power(b,CN1)),Int(Times(Power(ArcCos(Plus(a,Times(b,x))),n),Power(Sqrt(u),CN1)),x)))),And(And(And(FreeQ(List(a,b),x),ZeroQ(Plus(u,Times(CN1,C1),Power(Plus(a,Times(b,x)),C2)))),RationalQ(n)),Greater(n,C1)))),
SetDelayed(Int(Times(Power(ArcCos(Times(Power(Plus(Times(Power(x_,n_DEFAULT),b_DEFAULT),a_DEFAULT),CN1),c_DEFAULT)),m_DEFAULT),u_DEFAULT),x_Symbol),
    Condition(Int(Times(u,Power(ArcSec(Plus(Times(a,Power(c,CN1)),Times(b,Power(x,n),Power(c,CN1)))),m)),x),FreeQ(List(a,b,c,n,m),x))),
SetDelayed(Int(ArcCos(u_),x_Symbol),
    Condition(Plus(Times(x,ArcCos(u)),Int(Regularize(Times(x,D(u,x),Power(Sqrt(Plus(C1,Times(CN1,Power(u,C2)))),CN1)),x),x)),And(InverseFunctionFreeQ(u,x),Not(MatchQ(u,Condition(Plus(c_DEFAULT,Times($p(d,true),Power(f_,Plus(a_DEFAULT,Times(b_DEFAULT,x))))),FreeQ(List(a,b,c,d,f),x))))))),
SetDelayed(Int(Power(f_,Times(ArcCos(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),c_DEFAULT)),x_Symbol),
    Condition(Times(Power(f,Times(c,ArcCos(Plus(a,Times(b,x))))),Plus(a,Times(b,x),Times(CN1,c,Sqrt(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2)))),Log(f))),Power(Times(b,Plus(C1,Times(Power(c,C2),Power(Log(f),C2)))),CN1)),And(FreeQ(List(a,b,c,f),x),NonzeroQ(Plus(C1,Times(Power(c,C2),Power(Log(f),C2))))))),
SetDelayed(Int(ArcTan(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),ArcTan(Plus(a,Times(b,x))),Power(b,CN1)),Times(CN1,Log(Plus(C1,Power(Plus(a,Times(b,x)),C2))),Power(Times(C2,b),CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(ArcTan(Plus(Times(Power(x_,n_),b_DEFAULT),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(x,ArcTan(Plus(a,Times(b,Power(x,n))))),Times(CN1,Dist(Times(b,n),Int(Times(Power(x,n),Power(Plus(C1,Power(a,C2),Times(C2,a,b,Power(x,n)),Times(Power(b,C2),Power(x,Times(C2,n)))),CN1)),x)))),And(FreeQ(List(a,b),x),IntIntegerQ(n)))),
SetDelayed(Int(Times(ArcTan(Plus(Times(Power(x_,n_DEFAULT),b_DEFAULT),a_DEFAULT)),Power(x_,CN1)),x_Symbol),
    Condition(Plus(Dist(Times(Rational(C1,C2),CI),Int(Times(Log(Plus(C1,Times(CN1,CI,a),Times(CN1,CI,b,Power(x,n)))),Power(x,CN1)),x)),Times(CN1,Dist(Times(Rational(C1,C2),CI),Int(Times(Log(Plus(C1,Times(CI,a),Times(CI,b,Power(x,n)))),Power(x,CN1)),x)))),FreeQ(List(a,b,n),x))),
SetDelayed(Int(Times(ArcTan(Plus(Times(Power(x_,n_DEFAULT),b_DEFAULT),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),ArcTan(Plus(a,Times(b,Power(x,n)))),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Times(b,n,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,n)),Power(Plus(C1,Power(a,C2),Times(C2,a,b,Power(x,n)),Times(Power(b,C2),Power(x,Times(C2,n)))),CN1)),x)))),And(And(And(FreeQ(List(a,b,m),x),IntIntegerQ(n)),NonzeroQ(Plus(m,C1))),NonzeroQ(Plus(m,Times(CN1,n),C1))))),
SetDelayed(Int(Times(Power(ArcTan(x_),n_DEFAULT),Power(Plus(C1,Power(x_,C2)),m_)),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("ShowSteps"),False),Set($s("StepCounter"),Null)),Int(Power(Plus(C1,Power(x,C2)),m),x)))),Plus(Times(u,Power(ArcTan(x),n)),Times(CN1,Dist(n,Int(Times(u,Power(ArcTan(x),Plus(n,Times(CN1,C1))),Power(Plus(C1,Power(x,C2)),CN1)),x))))),And(And(IntIntegerQ(List(m,n)),Less(m,CN1)),Greater(n,C0)))),
SetDelayed(Int(Times(Power(ArcCot(x_),CN1),Power(ArcTan(x_),CN1),Power(Plus(C1,Power(x_,C2)),CN1)),x_Symbol),
    Times(Plus(Times(CN1,Log(ArcCot(x))),Log(ArcTan(x))),Power(Plus(ArcCot(x),ArcTan(x)),CN1))),
SetDelayed(Int(Times(Power(ArcCot(x_),n_DEFAULT),Power(ArcTan(x_),p_DEFAULT),Power(Plus(C1,Power(x_,C2)),CN1)),x_Symbol),
    Condition(Plus(Times(CN1,Power(ArcCot(x),Plus(n,C1)),Power(ArcTan(x),p),Power(Plus(n,C1),CN1)),Dist(Times(p,Power(Plus(n,C1),CN1)),Int(Times(Power(ArcCot(x),Plus(n,C1)),Power(ArcTan(x),Plus(p,Times(CN1,C1))),Power(Plus(C1,Power(x,C2)),CN1)),x))),And(IntIntegerQ(List(n,p)),And(Less(C0,p),LessEqual(p,n))))),
SetDelayed(Int(Times(Power(ArcTan(Times(b_DEFAULT,x_)),n_),x_),x_Symbol),
    Condition(Plus(Times(Plus(Power(Times(b,x),C2),C1),Power(ArcTan(Times(b,x)),n),Power(Times(C2,Power(b,C2)),CN1)),Times(CN1,Dist(Times(n,Power(Times(C2,b),CN1)),Int(Power(ArcTan(Times(b,x)),Plus(n,Times(CN1,C1))),x)))),And(And(FreeQ(b,x),RationalQ(n)),Greater(n,C1)))),
SetDelayed(Int(Times(Power(ArcTan(Plus(Times(b_DEFAULT,x_),a_)),n_),x_),x_Symbol),
    Condition(Plus(Times(Plus(Power(Plus(a,Times(b,x)),C2),C1),Power(ArcTan(Plus(a,Times(b,x))),n),Power(Times(C2,Power(b,C2)),CN1)),Times(CN1,Dist(Times(n,Power(Times(C2,b),CN1)),Int(Power(ArcTan(Plus(a,Times(b,x))),Plus(n,Times(CN1,C1))),x))),Times(CN1,Dist(Times(a,Power(b,CN1)),Int(Power(ArcTan(Plus(a,Times(b,x))),n),x)))),And(And(FreeQ(List(a,b),x),RationalQ(n)),Greater(n,C1)))),
SetDelayed(Int(Times(Power(ArcTan(Times(Power(Plus(Times(Power(x_,n_DEFAULT),b_DEFAULT),a_DEFAULT),CN1),c_DEFAULT)),m_DEFAULT),u_DEFAULT),x_Symbol),
    Condition(Int(Times(u,Power(ArcCot(Plus(Times(a,Power(c,CN1)),Times(b,Power(x,n),Power(c,CN1)))),m)),x),FreeQ(List(a,b,c,n,m),x))),
SetDelayed(Int(Times(Power(Plus(Times(Power(x_,C2),b_DEFAULT),a_),n_),u_),x_Symbol),
    Condition(Dist(Power(a,n),Subst(Int(Regularize(Times(Power(Cos(x),Times(CN2,Plus(n,C1))),SubstFor(ArcTan(x),u,x)),x),x),x,ArcTan(x))),And(And(And(And(FreeQ(List(a,b),x),FunctionOfQ(ArcTan(x),u,x)),ZeroQ(Plus(a,Times(CN1,b)))),IntIntegerQ(n)),Less(n,CN1)))),
SetDelayed(Int(Times(Power(Plus(Times(Power(x_,C2),b_DEFAULT),a_),n_),u_),x_Symbol),
    Condition(Dist(Power(a,n),Subst(Int(Regularize(Times(Power(Cos(x),Times(CN2,Plus(n,C1))),SubstFor(ArcTan(x),u,x)),x),x),x,ArcTan(x))),And(And(And(And(And(FreeQ(List(a,b),x),FunctionOfQ(ArcTan(x),u,x)),ZeroQ(Plus(a,Times(CN1,b)))),HalfIntegerQ(n)),Less(n,CN1)),PositiveQ(a)))),
SetDelayed(Int(Times(Power(Plus(Times(Power(x_,C2),b_DEFAULT),a_),n_),u_),x_Symbol),
    Condition(Dist(Power(a,CN1),Subst(Int(Regularize(Times(Power(Times(a,Power(Sec(x),C2)),Plus(n,C1)),SubstFor(ArcTan(x),u,x)),x),x),x,ArcTan(x))),And(And(And(And(FreeQ(List(a,b),x),FunctionOfQ(ArcTan(x),u,x)),ZeroQ(Plus(a,Times(CN1,b)))),HalfIntegerQ(n)),Less(n,CN1)))),
SetDelayed(Int(Times(Power(Plus(Times(Power(x_,C2),b_DEFAULT),a_),n_),Power(x_,m_DEFAULT),u_),x_Symbol),
    Condition(Dist(Power(a,n),Subst(Int(Regularize(Times(Power(Tan(x),m),Power(Cos(x),Times(CN2,Plus(n,C1))),SubstFor(ArcTan(x),u,x)),x),x),x,ArcTan(x))),And(And(And(And(FreeQ(List(a,b),x),FunctionOfQ(ArcTan(x),u,x)),ZeroQ(Plus(a,Times(CN1,b)))),IntIntegerQ(List(m,n))),Less(n,C0)))),
SetDelayed(Int(Times(Power(Plus(Times(Power(x_,C2),b_DEFAULT),a_),n_),Power(x_,m_DEFAULT),u_),x_Symbol),
    Condition(Dist(Power(a,n),Subst(Int(Regularize(Times(Power(Tan(x),m),Power(Cos(x),Times(CN2,Plus(n,C1))),SubstFor(ArcTan(x),u,x)),x),x),x,ArcTan(x))),And(And(And(And(And(And(FreeQ(List(a,b),x),FunctionOfQ(ArcTan(x),u,x)),ZeroQ(Plus(a,Times(CN1,b)))),HalfIntegerQ(n)),Less(n,CN1)),PositiveQ(a)),IntIntegerQ(m)))),
SetDelayed(Int(ArcTan(u_),x_Symbol),
    Condition(Plus(Times(x,ArcTan(u)),Times(CN1,Int(Regularize(Times(x,D(u,x),Power(Plus(C1,Power(u,C2)),CN1)),x),x))),And(InverseFunctionFreeQ(u,x),Not(MatchQ(u,Condition(Plus(c_DEFAULT,Times($p(d,true),Power(f_,Plus(a_DEFAULT,Times(b_DEFAULT,x))))),FreeQ(List(a,b,c,d,f),x))))))),
SetDelayed(Int(Times(ArcTan(u_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),ArcTan(u),Power(Plus(m,C1),CN1)),Times(CN1,Dist(Power(Plus(m,C1),CN1),Int(Regularize(Times(Power(x,Plus(m,C1)),D(u,x),Power(Plus(C1,Power(u,C2)),CN1)),x),x)))),And(And(And(And(FreeQ(m,x),NonzeroQ(Plus(m,C1))),InverseFunctionFreeQ(u,x)),Not(FunctionOfQ(Power(x,Plus(m,C1)),u,x))),FalseQ(PowerVariableExpn(u,Plus(m,C1),x))))),
SetDelayed(Int(Times(ArcTan(u_),v_),x_Symbol),
    Condition(Module(List(Set(w,Block(List(Set($s("ShowSteps"),False),Set($s("StepCounter"),Null)),Int(v,x)))),Condition(Plus(Times(w,ArcTan(u)),Times(CN1,Int(Regularize(Times(w,D(u,x),Power(Plus(C1,Power(u,C2)),CN1)),x),x))),InverseFunctionFreeQ(w,x))),And(And(InverseFunctionFreeQ(u,x),Not(MatchQ(v,Condition(Power(x,m_DEFAULT),FreeQ(m,x))))),FalseQ(FunctionOfLinear(Times(v,ArcTan(u)),x))))),
SetDelayed(Int(Times(ArcTan(Times(b_DEFAULT,x_)),Power(Plus(Times(Power(x_,n_DEFAULT),$p(d,true)),c_),CN1)),x_Symbol),
    Condition(Plus(Dist(Times(Rational(C1,C2),CI),Int(Times(Log(Plus(C1,Times(CN1,CI,b,x))),Power(Plus(c,Times(d,Power(x,n))),CN1)),x)),Times(CN1,Dist(Times(Rational(C1,C2),CI),Int(Times(Log(Plus(C1,Times(CI,b,x))),Power(Plus(c,Times(d,Power(x,n))),CN1)),x)))),And(And(FreeQ(List(b,c,d),x),IntIntegerQ(n)),Not(And(Equal(n,C2),ZeroQ(Plus(Times(Power(b,C2),c),Times(CN1,d)))))))),
SetDelayed(Int(Times(ArcTan(Plus(Times(b_DEFAULT,x_),a_)),Power(Plus(Times(Power(x_,n_DEFAULT),$p(d,true)),c_),CN1)),x_Symbol),
    Condition(Plus(Dist(Times(Rational(C1,C2),CI),Int(Times(Log(Plus(C1,Times(CN1,CI,a),Times(CN1,CI,b,x))),Power(Plus(c,Times(d,Power(x,n))),CN1)),x)),Times(CN1,Dist(Times(Rational(C1,C2),CI),Int(Times(Log(Plus(C1,Times(CI,a),Times(CI,b,x))),Power(Plus(c,Times(d,Power(x,n))),CN1)),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(n)),Not(And(Equal(n,C1),ZeroQ(Plus(Times(a,d),Times(CN1,b,c)))))))),
SetDelayed(Int(ArcCot(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),ArcCot(Plus(a,Times(b,x))),Power(b,CN1)),Times(Log(Plus(C1,Power(Plus(a,Times(b,x)),C2))),Power(Times(C2,b),CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(ArcCot(Plus(Times(Power(x_,n_),b_DEFAULT),a_DEFAULT)),x_Symbol),
    Condition(Plus(Times(x,ArcCot(Plus(a,Times(b,Power(x,n))))),Dist(Times(b,n),Int(Times(Power(x,n),Power(Plus(C1,Power(a,C2),Times(C2,a,b,Power(x,n)),Times(Power(b,C2),Power(x,Times(C2,n)))),CN1)),x))),And(FreeQ(List(a,b),x),IntIntegerQ(n)))),
SetDelayed(Int(Times(ArcCot(Plus(Times(Power(x_,n_DEFAULT),b_DEFAULT),a_DEFAULT)),Power(x_,CN1)),x_Symbol),
    Condition(Plus(Dist(Times(Rational(C1,C2),CI),Int(Times(Log(Plus(C1,Times(CN1,CI,Power(Plus(a,Times(b,Power(x,n))),CN1)))),Power(x,CN1)),x)),Times(CN1,Dist(Times(Rational(C1,C2),CI),Int(Times(Log(Plus(C1,Times(CI,Power(Plus(a,Times(b,Power(x,n))),CN1)))),Power(x,CN1)),x)))),FreeQ(List(a,b,n),x))),
SetDelayed(Int(Times(ArcCot(Plus(Times(Power(x_,n_DEFAULT),b_DEFAULT),a_DEFAULT)),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),ArcCot(Plus(a,Times(b,Power(x,n)))),Power(Plus(m,C1),CN1)),Dist(Times(b,n,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,n)),Power(Plus(C1,Power(a,C2),Times(C2,a,b,Power(x,n)),Times(Power(b,C2),Power(x,Times(C2,n)))),CN1)),x))),And(And(And(FreeQ(List(a,b,m),x),IntIntegerQ(n)),NonzeroQ(Plus(m,C1))),NonzeroQ(Plus(m,Times(CN1,n),C1))))),
SetDelayed(Int(Times(Power(ArcCot(x_),n_DEFAULT),Power(Plus(C1,Power(x_,C2)),m_)),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("ShowSteps"),False),Set($s("StepCounter"),Null)),Int(Power(Plus(C1,Power(x,C2)),m),x)))),Plus(Times(u,Power(ArcCot(x),n)),Dist(n,Int(Times(u,Power(ArcCot(x),Plus(n,Times(CN1,C1))),Power(Plus(C1,Power(x,C2)),CN1)),x)))),And(And(IntIntegerQ(List(m,n)),Less(m,CN1)),Greater(n,C0)))),
SetDelayed(Int(Times(Power(ArcCot(x_),n_DEFAULT),Power(ArcTan(x_),p_),Power(Plus(C1,Power(x_,C2)),CN1)),x_Symbol),
    Condition(Plus(Times(Power(ArcCot(x),n),Power(ArcTan(x),Plus(p,C1)),Power(Plus(p,C1),CN1)),Dist(Times(n,Power(Plus(p,C1),CN1)),Int(Times(Power(ArcCot(x),Plus(n,Times(CN1,C1))),Power(ArcTan(x),Plus(p,C1)),Power(Plus(C1,Power(x,C2)),CN1)),x))),And(IntIntegerQ(List(n,p)),Less(Less(C0,n),p)))),
SetDelayed(Int(Times(Power(ArcCot(x_),n_DEFAULT),Power(ArcTan(x_),p_DEFAULT),Power(Plus(C1,Power(x_,C2)),m_)),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("ShowSteps"),False),Set($s("StepCounter"),Null)),Int(Power(Plus(C1,Power(x,C2)),m),x)))),Plus(Times(u,Power(ArcCot(x),n),Power(ArcTan(x),p)),Times(CN1,Dist(p,Int(Times(u,Power(ArcCot(x),n),Power(ArcTan(x),Plus(p,Times(CN1,C1))),Power(Plus(C1,Power(x,C2)),CN1)),x))),Dist(n,Int(Times(u,Power(ArcCot(x),Plus(n,Times(CN1,C1))),Power(ArcTan(x),p),Power(Plus(C1,Power(x,C2)),CN1)),x)))),And(And(And(IntIntegerQ(List(m,p,n)),Less(m,CN1)),Greater(p,C0)),Greater(n,C0)))),
SetDelayed(Int(Times(Power(ArcCot(Times(b_DEFAULT,x_)),n_),x_),x_Symbol),
    Condition(Plus(Times(Plus(Power(Times(b,x),C2),C1),Power(ArcCot(Times(b,x)),n),Power(Times(C2,Power(b,C2)),CN1)),Dist(Times(n,Power(Times(C2,b),CN1)),Int(Power(ArcCot(Times(b,x)),Plus(n,Times(CN1,C1))),x))),And(And(FreeQ(b,x),RationalQ(n)),Greater(n,C1)))),
SetDelayed(Int(Times(Power(ArcCot(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),n_),x_),x_Symbol),
    Condition(Plus(Times(Plus(Power(Plus(a,Times(b,x)),C2),C1),Power(ArcCot(Plus(a,Times(b,x))),n),Power(Times(C2,Power(b,C2)),CN1)),Dist(Times(n,Power(Times(C2,b),CN1)),Int(Power(ArcCot(Plus(a,Times(b,x))),Plus(n,Times(CN1,C1))),x)),Times(CN1,Dist(Times(a,Power(b,CN1)),Int(Power(ArcCot(Plus(a,Times(b,x))),n),x)))),And(And(FreeQ(List(a,b),x),RationalQ(n)),Greater(n,C1)))),
SetDelayed(Int(Times(Power(ArcCot(Times(Power(Plus(Times(Power(x_,n_DEFAULT),b_DEFAULT),a_DEFAULT),CN1),c_DEFAULT)),m_DEFAULT),u_DEFAULT),x_Symbol),
    Condition(Int(Times(u,Power(ArcTan(Plus(Times(a,Power(c,CN1)),Times(b,Power(x,n),Power(c,CN1)))),m)),x),FreeQ(List(a,b,c,n,m),x))),
SetDelayed(Int(Times(Power(Plus(Times(Power(x_,C2),b_DEFAULT),a_),n_),u_),x_Symbol),
    Condition(Dist(Times(CN1,Power(a,n)),Subst(Int(Regularize(Times(Power(Sin(x),Times(CN2,Plus(n,C1))),SubstFor(ArcCot(x),u,x)),x),x),x,ArcCot(x))),And(And(And(And(FreeQ(List(a,b),x),FunctionOfQ(ArcCot(x),u,x)),ZeroQ(Plus(a,Times(CN1,b)))),IntIntegerQ(n)),Less(n,CN1)))),
SetDelayed(Int(Times(Power(Plus(Times(Power(x_,C2),b_DEFAULT),a_),n_),u_),x_Symbol),
    Condition(Dist(Times(CN1,Power(a,CN1)),Subst(Int(Regularize(Times(Power(Times(a,Power(Csc(x),C2)),Plus(n,C1)),SubstFor(ArcCot(x),u,x)),x),x),x,ArcCot(x))),And(And(And(And(FreeQ(List(a,b),x),FunctionOfQ(ArcCot(x),u,x)),ZeroQ(Plus(a,Times(CN1,b)))),HalfIntegerQ(n)),Less(n,CN1))))
  );
}
