package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface DerivativeRules {
  final public static IAST RULES1 = List(
    Rule(ArcCos,
      Function(Negate(Power(Plus(C1,Negate(Sqr(Slot1))),CN1D2)))),
    Rule(ArcCosh,
      Function(Power(Plus(Sqr(Slot1),Negate(C1)),CN1D2))),
    Rule(ArcCot,
      Function(Negate(Power(Plus(C1,Sqr(Slot1)),-1)))),
    Rule(ArcCoth,
      Function(Power(Plus(C1,Negate(Sqr(Slot1))),-1))),
    Rule(ArcCsc,
      Function(Times(CN1,Power(Slot1,-2),Power(Plus(C1,Negate(Power(Slot1,-2))),CN1D2)))),
    Rule(ArcCsch,
      Function(Times(CN1,Power(Abs(Slot1),-1),Power(Plus(C1,Sqr(Slot1)),CN1D2)))),
    Rule(ArcSin,
      Function(Power(Plus(C1,Negate(Sqr(Slot1))),CN1D2))),
    Rule(ArcSinh,
      Function(Power(Plus(C1,Sqr(Slot1)),CN1D2))),
    Rule(ArcTan,
      Function(Power(Plus(C1,Sqr(Slot1)),-1))),
    Rule(ArcTanh,
      Function(Power(Plus(C1,Negate(Sqr(Slot1))),-1))),
    Rule(ArcSec,
      Function(Times(Power(Slot1,-2),Power(Plus(C1,Negate(Power(Slot1,-2))),CN1D2)))),
    Rule(ArcSech,
      Function(Times(CN1,Power(Slot1,-1),Power(Plus(C1,Negate(Sqr(Slot1))),CN1D2)))),
    Rule(Erf,
      Function(Times(C2,Power(E,Negate(Sqr(Slot1))),Power(Pi,CN1D2)))),
    Rule(Erfc,
      Function(Times(CN2,Power(E,Negate(Sqr(Slot1))),Power(Pi,CN1D2)))),
    Rule(Erfi,
      Function(Times(C2,Power(E,Sqr(Slot1)),Power(Pi,CN1D2)))),
    Rule(InverseErf,
      Function(Times(C1D2,Sqrt(Pi),Power(E,Sqr(InverseErf(x)))))),
    Rule(Log,
      Function(Power(Slot1,-1))),
    Rule(Cot,
      Function(Negate(Sqr(Csc(Slot1))))),
    Rule(Coth,
      Function(Negate(Power(Sinh(Slot1),-2)))),
    Rule(Cos,
      Function(Negate(Sin(Slot1)))),
    Rule(Cosh,
      Function(Sinh(Slot1))),
    Rule(Csc,
      Function(Times(CN1,Cot(Slot1),Csc(Slot1)))),
    Rule(Csch,
      Function(Times(CN1,Coth(Slot1),Csch(Slot1)))),
    Rule(Sin,
      Function(Cos(Slot1))),
    Rule(Sinh,
      Function(Cosh(Slot1))),
    Rule(Tan,
      Function(Sqr(Sec(Slot1)))),
    Rule(Tanh,
      Function(Sqr(Sech(Slot1)))),
    Rule(Sec,
      Function(Times(Sec(Slot1),Tan(Slot1)))),
    Rule(Sech,
      Function(Times(CN1,Tanh(Slot1),Sech(Slot1))))
  );
  final public static IAST RULES2 = List(
    Rule(ArcSin,
      Function(Times(Slot1,Power(Plus(C1,Negate(Sqr(Slot1))),QQ(-3L,2L))))),
    Rule(Log,
      Function(Negate(Power(Slot1,-2)))),
    Rule(Cot,
      Function(Times(C2,Sqr(Csc(Slot1)),Cot(Slot1)))),
    Rule(Tan,
      Function(Times(C2,Sqr(Sec(Slot1)),Tan(Slot1))))
  );
  final public static IAST RULES3 = List(
    Rule(Log,
      Function(Times(Power(CN1,Plus(Slot2,Negate(C1))),Factorial(Plus(Slot2,Negate(C1))),Power(Slot1,Negate(Slot2))))),
    Rule(Cos,
      Function(Cos(Plus(Slot1,Times(C1D2,Pi,Slot2))))),
    Rule(Sin,
      Function(Sin(Plus(Slot1,Times(C1D2,Pi,Slot2)))))
  );
}
