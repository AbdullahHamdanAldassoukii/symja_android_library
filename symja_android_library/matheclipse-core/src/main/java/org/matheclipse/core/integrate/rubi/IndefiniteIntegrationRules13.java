package org.matheclipse.core.integrate.rubi;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctions.*;

import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;
/** 
 * IndefiniteIntegrationRules rules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IndefiniteIntegrationRules13 { 
  public static IAST RULES = List( 
SetDelayed(Int(Times(Power(ArcCoth(Times(Power(Plus(Times(Power($p(x),$p(n,true)),$p(b,true)),$p(a,true)),CN1),$p(c,true))),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Int(Times(u,Power(ArcTanh(Plus(Times(a,Power(c,CN1)),Times(b,Times(Power(x,n),Power(c,CN1))))),m)),x),FreeQ(List(a,b,c,n,m),x))),
SetDelayed(Int(Times(Power($p(v),$p(n,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Module(List(Set($s("tmp"),InverseFunctionOfLinear(u,x))),Condition(Dist(Times(Power(Times(Times(CN1,Discriminant(v,x)),Power(Times(C4,Coefficient(v,x,C2)),CN1)),n),Power(Coefficient(Part($s("tmp"),C1),x,C1),CN1)),Subst(Int(Regularize(Times(SubstForInverseFunction(u,$s("tmp"),x),Power(Times(CN1,Power(Csch(x),C2)),Plus(n,C1))),x),x),x,$s("tmp"))),And(And(NotFalseQ($s("tmp")),SameQ(Head($s("tmp")),$s("ArcCoth"))),ZeroQ(Plus(Times(Discriminant(v,x),Power(Part($s("tmp"),C1),C2)),Times(CN1,Power(D(v,x),C2))))))),And(And(And(QuadraticQ(v,x),IntIntegerQ(n)),Less(n,C0)),PosQ(Discriminant(v,x))))),
SetDelayed(Int(Times(Power(E,Times(ArcCoth($p(v)),$p(n,true))),$p(u,true)),$p(x,SymbolHead)),
    Condition(Int(Times(u,Times(Power(Plus(C1,v),Times(C1D2,n)),Power(Power(Plus(CN1,v),Times(C1D2,n)),CN1))),x),EvenQ(n))),
SetDelayed(Int(Power(E,Times(ArcCoth($p(v)),$p(n,true))),$p(x,SymbolHead)),
    Condition(Int(Expand(Power(Plus(Power(Sqrt(Plus(C1,Times(CN1,Power(Power(v,C2),CN1)))),CN1),Power(Times(x,Sqrt(Plus(C1,Times(CN1,Power(Power(v,C2),CN1))))),CN1)),n)),x),OddQ(n))),
SetDelayed(Int(Power(E,Times(C1D2,ArcCoth(Plus(Times($p(b,true),$p(x)),$p(a,true))))),$p(x,SymbolHead)),
    Condition(Plus(Times(x,Power(E,Times(C1D2,ArcCoth(Plus(a,Times(b,x)))))),Times(CN1,Dist(Times(C1D2,b),Int(Times(x,Times(Power(E,Times(C1D2,ArcCoth(Plus(a,Times(b,x))))),Power(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2))),CN1))),x)))),FreeQ(List(a,b),x))),
SetDelayed(Int(Times(Power(E,Times(C1D2,ArcCoth(Plus(Times($p(b,true),$p(x)),$p(a,true))))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(Power(E,Times(C1D2,ArcCoth(Plus(a,Times(b,x))))),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(b,Power(Times(C2,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,C1)),Times(Power(E,Times(C1D2,ArcCoth(Plus(a,Times(b,x))))),Power(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),C2))),CN1))),x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(Power(E,Times(ArcCoth($p(v)),$p(n,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Int(Expand(Times(Power(x,m),Power(Plus(Power(Sqrt(Plus(C1,Times(CN1,Power(Power(v,C2),CN1)))),CN1),Power(Times(x,Sqrt(Plus(C1,Times(CN1,Power(Power(v,C2),CN1))))),CN1)),n))),x),And(RationalQ(m),OddQ(n)))),
SetDelayed(Int(Times(Power(E,Times(ArcCoth($p(v)),$p(n,true))),Power(Plus(C1,Times(CN1,Power($p(v),C2))),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Times(Times(Times(CN1,Power(CN1,Times(C1D2,Plus(n,Times(CN1,C1))))),v),Times(Sqrt(Plus(C1,Times(CN1,Power(Power(v,C2),CN1)))),Power(Sqrt(Plus(C1,Times(CN1,Power(v,C2)))),CN1))),Int(Times(Times(u,Power(Plus(C1,Times(CN1,v)),Plus(m,Times(CN1,Times(C1D2,n))))),Power(Plus(C1,v),Plus(m,Times(C1D2,n)))),x)),And(OddQ(n),HalfIntegerQ(m)))),
SetDelayed(Int(Times(Power(E,ArcCoth($p(v))),Power(Plus(C1,Times(CN1,Power($p(v),C2))),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(CN1,Int(Expand(Times(Times(Times(Times(u,v),Plus(C1,v)),Sqrt(Plus(C1,Times(CN1,Power(Power(v,C2),CN1))))),Power(Plus(C1,Times(CN1,Power(v,C2))),Plus(m,Times(CN1,C1)))),x),x)),And(IntIntegerQ(m),Greater(m,C0)))),
SetDelayed(Int(Times(Power(E,ArcCoth($p(v))),Power(Plus(Times(Power($p(v),C2),$p(b,true)),$p(a)),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Times(Power(Plus(a,Times(b,Power(v,C2))),m),Power(Power(Plus(C1,Times(CN1,Power(v,C2))),m),CN1)),Int(Times(Times(u,Power(E,ArcCoth(v))),Power(Plus(C1,Times(CN1,Power(v,C2))),m)),x)),And(And(FreeQ(List(a,b),x),ZeroQ(Plus(a,b))),NonzeroQ(Plus(a,Times(CN1,C1)))))),
SetDelayed(Int(Times(Power(E,Times(ArcCoth($p(v)),$p(n,true))),Power(Plus(C1,Times(CN1,Power($p(v),integer(-2L)))),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Int(Times(Times(u,Power(Plus(C1,v),Plus(m,Times(C1D2,n)))),Times(Power(Plus(CN1,v),Plus(m,Times(CN1,Times(C1D2,n)))),Power(Power(v,Times(C2,m)),CN1))),x),And(IntIntegerQ(n),IntIntegerQ(Plus(m,Times(CN1,Times(C1D2,n))))))),
SetDelayed(Int(Times(Power(E,Times(ArcCoth($p(v)),$p(n,true))),Power(Plus(C1,Times(CN1,Power($p(v),integer(-2L)))),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Int(Expand(Times(Times(u,Power(Plus(C1,Power(v,CN1)),n)),Power(Plus(C1,Times(CN1,Power(Power(v,C2),CN1))),Plus(m,Times(CN1,Times(C1D2,n))))),x),x),And(RationalQ(n),IntIntegerQ(Times(C2,m))))),
SetDelayed(Int(Times(Power(E,ArcCoth($p(v))),Power(Plus(Times(Power($p(v),integer(-2L)),$p(b,true)),$p(a)),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Times(Int(Times(Times(u,Plus(C1,Power(v,CN1))),Power(Plus(C1,Times(CN1,Power(v,integer(-2L)))),Plus(m,Times(CN1,C1D2)))),x),Times(Power(Plus(a,Times(b,Power(v,integer(-2L)))),m),Power(Power(Plus(C1,Times(CN1,Power(v,integer(-2L)))),m),CN1))),And(And(FreeQ(List(a,b),x),ZeroQ(Plus(a,b))),IntIntegerQ(Times(C2,m))))),
SetDelayed(Int(Times(Power(Plus(Times(Power($p(x),C2),$p(b,true)),$p(a)),$p(n)),Power($p(x),$p(m,true)),$p(u)),$p(x,SymbolHead)),
    Condition(Dist(Times(CN1,Power(b,n)),Subst(Int(Regularize(Times(Times(Power(Coth(x),m),Power(Sinh(x),Times(integer(-2L),Plus(n,C1)))),SubstFor(ArcCoth(x),u,x)),x),x),x,ArcCoth(x))),And(And(And(And(And(And(FreeQ(List(a,b),x),FunctionOfQ(ArcCoth(x),u,x)),ZeroQ(Plus(a,b))),HalfIntegerQ(n)),Less(n,CN1)),PositiveQ(a)),IntIntegerQ(m)))),
SetDelayed(Int(ArcCoth($p(u)),$p(x,SymbolHead)),
    Condition(Plus(Times(x,ArcCoth(u)),Times(CN1,Int(Regularize(Times(x,Times(D(u,x),Power(Plus(C1,Times(CN1,Power(u,C2))),CN1))),x),x))),InverseFunctionFreeQ(u,x))),
SetDelayed(Int(Times(ArcCoth($p(u)),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(ArcCoth(u),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Power(Plus(m,C1),CN1),Int(Regularize(Times(Power(x,Plus(m,C1)),Times(D(u,x),Power(Plus(C1,Times(CN1,Power(u,C2))),CN1))),x),x)))),And(And(And(And(FreeQ(m,x),NonzeroQ(Plus(m,C1))),InverseFunctionFreeQ(u,x)),Not(FunctionOfQ(Power(x,Plus(m,C1)),u,x))),FalseQ(PowerVariableExpn(u,Plus(m,C1),x))))),
SetDelayed(Int(Times(ArcCoth($p(u)),$p(v)),$p(x,SymbolHead)),
    Condition(Module(List(Set(w,Block(List(Set($s("ShowSteps"),False),Set($s("StepCounter"),Null)),Int(v,x)))),Condition(Plus(Times(w,ArcCoth(u)),Times(CN1,Int(Regularize(Times(w,Times(D(u,x),Power(Plus(C1,Times(CN1,Power(u,C2))),CN1))),x),x))),InverseFunctionFreeQ(w,x))),And(And(InverseFunctionFreeQ(u,x),Not(MatchQ(v,Condition(Power(x,$p(m,true)),FreeQ(m,x))))),FalseQ(FunctionOfLinear(Times(v,ArcCoth(u)),x))))),
SetDelayed(Int(Times(ArcCoth(Times($p(b,true),$p(x))),Power(Plus(Times(Power($p(x),$p(n,true)),$p(d,true)),$p(c)),CN1)),$p(x,SymbolHead)),
    Condition(Plus(Dist(C1D2,Int(Times(Log(Plus(C1,Power(Times(b,x),CN1))),Power(Plus(c,Times(d,Power(x,n))),CN1)),x)),Times(CN1,Dist(C1D2,Int(Times(Log(Plus(C1,Times(CN1,Power(Times(b,x),CN1)))),Power(Plus(c,Times(d,Power(x,n))),CN1)),x)))),And(And(FreeQ(List(b,c,d),x),IntIntegerQ(n)),Not(And(Equal(n,C2),ZeroQ(Plus(Times(Power(b,C2),c),d))))))),
SetDelayed(Int(Times(ArcCoth(Plus(Times($p(b,true),$p(x)),$p(a))),Power(Plus(Times(Power($p(x),$p(n,true)),$p(d,true)),$p(c)),CN1)),$p(x,SymbolHead)),
    Condition(Plus(Dist(C1D2,Int(Times(Log(Plus(C1,Power(Plus(a,Times(b,x)),CN1))),Power(Plus(c,Times(d,Power(x,n))),CN1)),x)),Times(CN1,Dist(C1D2,Int(Times(Log(Plus(C1,Times(CN1,Power(Plus(a,Times(b,x)),CN1)))),Power(Plus(c,Times(d,Power(x,n))),CN1)),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(n)),Not(And(Equal(n,C1),ZeroQ(Plus(Times(a,d),Times(CN1,Times(b,c))))))))),
SetDelayed(Int(ArcSech(Plus(Times($p(b,true),$p(x)),$p(a,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(ArcSech(Plus(a,Times(b,x))),Power(b,CN1))),Times(CN1,Times(C2,Times(ArcTan(Sqrt(Times(Plus(Plus(C1,Times(CN1,a)),Times(CN1,Times(b,x))),Power(Plus(Plus(C1,a),Times(b,x)),CN1)))),Power(b,CN1))))),FreeQ(List(a,b),x))),
SetDelayed(Int(Times(ArcSech(Times(Power($p(x),$p(n,true)),$p(a,true))),Power($p(x),CN1)),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(CN1,Power(ArcSech(Times(a,Power(x,n))),C2)),Power(Times(C2,n),CN1)),Times(CN1,Times(ArcSech(Times(a,Power(x,n))),Times(Log(Plus(C1,Power(E,Times(integer(-2L),ArcSech(Times(a,Power(x,n))))))),Power(n,CN1))))),Times(PolyLog(C2,Times(CN1,Power(E,Times(integer(-2L),ArcSech(Times(a,Power(x,n))))))),Power(Times(C2,n),CN1))),FreeQ(List(a,n),x))),
SetDelayed(Int(Times(ArcSech(Plus(Times($p(b,true),$p(x)),$p(a))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(Power(Plus(Times(Times(CN1,a),Power(b,CN1)),Times(x,Power(b,CN1))),m),ArcSech(x)),x),x,Plus(a,Times(b,x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(ArcSech(Times($p(a,true),$p(x))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(ArcSech(Times(a,x)),Power(Plus(m,C1),CN1))),Dist(Power(Plus(m,C1),CN1),Int(Times(Power(x,m),Power(Times(Sqrt(Times(Plus(C1,Times(CN1,Times(a,x))),Power(Plus(C1,Times(a,x)),CN1))),Plus(C1,Times(a,x))),CN1)),x))),And(FreeQ(List(a,m),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(ArcSech(Times(Power(Plus(Times(Power($p(x),$p(n,true)),$p(b,true)),$p(a,true)),CN1),$p(c,true))),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Int(Times(u,Power(ArcCosh(Plus(Times(a,Power(c,CN1)),Times(b,Times(Power(x,n),Power(c,CN1))))),m)),x),FreeQ(List(a,b,c,n,m),x))),
SetDelayed(Int(Power(E,Times(ArcSech($p(v)),$p(n,true))),$p(x,SymbolHead)),
    Condition(Int(Power(Plus(Plus(Power(v,CN1),Sqrt(Times(Plus(C1,Times(CN1,v)),Power(Plus(C1,v),CN1)))),Times(Sqrt(Times(Plus(C1,Times(CN1,v)),Power(Plus(C1,v),CN1))),Power(v,CN1))),n),x),And(IntIntegerQ(n),IntPolynomialQ(v,x)))),
SetDelayed(Int(Times(Power(E,Times(ArcSech($p(v)),$p(n,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Int(Times(Power(x,m),Power(Plus(Plus(Power(v,CN1),Sqrt(Times(Plus(C1,Times(CN1,v)),Power(Plus(C1,v),CN1)))),Times(Sqrt(Times(Plus(C1,Times(CN1,v)),Power(Plus(C1,v),CN1))),Power(v,CN1))),n)),x),And(And(RationalQ(m),IntIntegerQ(n)),IntPolynomialQ(v,x)))),
SetDelayed(Int(ArcCsch(Plus(Times($p(b,true),$p(x)),$p(a,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(ArcCsch(Plus(a,Times(b,x))),Power(b,CN1))),Times(ArcTanh(Sqrt(Plus(C1,Power(Power(Plus(a,Times(b,x)),C2),CN1)))),Power(b,CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(Times(ArcCsch(Times(Power($p(x),$p(n,true)),$p(a,true))),Power($p(x),CN1)),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(CN1,Power(ArcCsch(Times(a,Power(x,n))),C2)),Power(Times(C2,n),CN1)),Times(CN1,Times(ArcCsch(Times(a,Power(x,n))),Times(Log(Plus(C1,Times(CN1,Power(E,Times(integer(-2L),ArcCsch(Times(a,Power(x,n)))))))),Power(n,CN1))))),Times(PolyLog(C2,Power(E,Times(integer(-2L),ArcCsch(Times(a,Power(x,n)))))),Power(Times(C2,n),CN1))),FreeQ(List(a,n),x))),
SetDelayed(Int(Times(ArcCsch(Plus(Times($p(b,true),$p(x)),$p(a))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(Power(Plus(Times(Times(CN1,a),Power(b,CN1)),Times(x,Power(b,CN1))),m),ArcCsch(x)),x),x,Plus(a,Times(b,x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(ArcCsch(Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(ArcCsch(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1))),Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Power(Times(Power(Plus(a,Times(b,x)),C2),Sqrt(Plus(C1,Power(Power(Plus(a,Times(b,x)),C2),CN1)))),CN1)),x))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(ArcCsch(Times(Power(Plus(Times(Power($p(x),$p(n,true)),$p(b,true)),$p(a,true)),CN1),$p(c,true))),$p(m,true)),$p(u,true)),$p(x,SymbolHead)),
    Condition(Int(Times(u,Power(ArcSinh(Plus(Times(a,Power(c,CN1)),Times(b,Times(Power(x,n),Power(c,CN1))))),m)),x),FreeQ(List(a,b,c,n,m),x))),
SetDelayed(Int(ArcCsch($p(u)),$p(x,SymbolHead)),
    Condition(Plus(Times(x,ArcCsch(u)),Int(Regularize(Times(x,Times(D(u,x),Power(Times(Power(u,C2),Sqrt(Plus(C1,Power(Power(u,C2),CN1)))),CN1))),x),x)),And(InverseFunctionFreeQ(u,x),Not(MatchQ(u,Condition(Plus($p(c,true),Times($p(d,true),Power($p(f),Plus($p(a,true),Times($p(b,true),x))))),FreeQ(List(a,b,c,d,f),x))))))),
SetDelayed(Int(Power(E,Times(ArcCsch($p(v)),$p(n,true))),$p(x,SymbolHead)),
    Condition(Int(Power(Plus(Power(v,CN1),Sqrt(Plus(C1,Power(Power(v,C2),CN1)))),n),x),And(IntIntegerQ(n),IntPolynomialQ(v,x)))),
SetDelayed(Int(Times(Power(E,Times(ArcCsch($p(v)),$p(n,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Int(Times(Power(x,m),Power(Plus(Power(v,CN1),Sqrt(Plus(C1,Power(Power(v,C2),CN1)))),n)),x),And(And(RationalQ(m),IntIntegerQ(n)),IntPolynomialQ(v,x)))),
SetDelayed(Int(Erf(Plus(Times($p(b,true),$p(x)),$p(a,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(Erf(Plus(a,Times(b,x))),Power(b,CN1))),Power(Times(Times(b,Sqrt(Pi)),Exp(Power(Plus(a,Times(b,x)),C2))),CN1)),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(Erf(Plus(Times($p(b,true),$p(x)),$p(a,true))),C2),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(Power(Erf(Plus(a,Times(b,x))),C2),Power(b,CN1))),Times(CN1,Dist(Times(C4,Power(Sqrt(Pi),CN1)),Int(Times(Plus(a,Times(b,x)),Times(Erf(Plus(a,Times(b,x))),Power(Power(E,Power(Plus(a,Times(b,x)),C2)),CN1))),x)))),FreeQ(List(a,b),x))),
SetDelayed(Int(Times(Erf(Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(Erf(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(C2,Times(b,Power(Times(Sqrt(Pi),Plus(m,C1)),CN1))),Int(Times(Power(x,Plus(m,C1)),Power(Exp(Power(Plus(a,Times(b,x)),C2)),CN1)),x)))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(Erf(Times($p(b,true),$p(x))),C2),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(Power(Erf(Times(b,x)),C2),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(C4,Times(b,Power(Times(Sqrt(Pi),Plus(m,C1)),CN1))),Int(Times(Times(Power(x,Plus(m,C1)),Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Erf(Times(b,x))),x)))),And(And(And(FreeQ(b,x),IntIntegerQ(m)),Unequal(Plus(m,C1),C0)),Or(Greater(m,C0),OddQ(m))))),
SetDelayed(Int(Times(Power(Erf(Plus(Times($p(b,true),$p(x)),$p(a))),C2),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(Power(Plus(Times(Times(CN1,a),Power(b,CN1)),Times(x,Power(b,CN1))),m),Power(Erf(x),C2)),x),x,Plus(a,Times(b,x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(Erf(Times($p(b,true),$p(x))),Power(E,Times(Power($p(x),C2),$p(c,true))),$p(x)),$p(x,SymbolHead)),
    Condition(Plus(Times(Times(CN1,Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Times(Erf(Times(b,x)),Power(Times(C2,Power(b,C2)),CN1))),Dist(Power(Times(b,Sqrt(Pi)),CN1),Int(Power(E,Times(Times(integer(-2L),Power(b,C2)),Power(x,C2))),x))),And(FreeQ(List(b,c),x),SameQ(c,Times(CN1,Power(b,C2)))))),
SetDelayed(Int(Times(Erf(Times($p(b,true),$p(x))),Power(E,Times(Power($p(x),C2),$p(c,true))),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Times(CN1,Power(x,Plus(m,Times(CN1,C1)))),Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Times(Erf(Times(b,x)),Power(Times(C2,Power(b,C2)),CN1))),Dist(Power(Times(b,Sqrt(Pi)),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(E,Times(Times(integer(-2L),Power(b,C2)),Power(x,C2)))),x))),Dist(Times(Plus(m,Times(CN1,C1)),Power(Times(C2,Power(b,C2)),CN1)),Int(Times(Times(Power(x,Plus(m,Times(CN1,C2))),Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Erf(Times(b,x))),x))),And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(CN1,Power(b,C2)))),IntIntegerQ(m)),Greater(m,C1)))),
SetDelayed(Int(Times(Erf(Times($p(b,true),$p(x))),Power(E,Times(Power($p(x),C2),$p(c,true))),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,Plus(m,C1)),Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Times(Erf(Times(b,x)),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(C2,Times(b,Power(Times(Sqrt(Pi),Plus(m,C1)),CN1))),Int(Times(Power(x,Plus(m,C1)),Power(E,Times(Times(integer(-2L),Power(b,C2)),Power(x,C2)))),x)))),Dist(Times(C2,Times(Power(b,C2),Power(Plus(m,C1),CN1))),Int(Times(Times(Power(x,Plus(m,C2)),Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Erf(Times(b,x))),x))),And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(CN1,Power(b,C2)))),EvenQ(m)),Less(m,CN1)))),
SetDelayed(Int(Erfc(Plus(Times($p(b,true),$p(x)),$p(a,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(Erfc(Plus(a,Times(b,x))),Power(b,CN1))),Times(CN1,Power(Times(Times(b,Sqrt(Pi)),Exp(Power(Plus(a,Times(b,x)),C2))),CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(Erfc(Plus(Times($p(b,true),$p(x)),$p(a,true))),C2),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(Power(Erfc(Plus(a,Times(b,x))),C2),Power(b,CN1))),Dist(Times(C4,Power(Sqrt(Pi),CN1)),Int(Times(Plus(a,Times(b,x)),Times(Erfc(Plus(a,Times(b,x))),Power(Power(E,Power(Plus(a,Times(b,x)),C2)),CN1))),x))),FreeQ(List(a,b),x))),
SetDelayed(Int(Times(Erfc(Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(Erfc(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1))),Dist(Times(C2,Times(b,Power(Times(Sqrt(Pi),Plus(m,C1)),CN1))),Int(Times(Power(x,Plus(m,C1)),Power(Exp(Power(Plus(a,Times(b,x)),C2)),CN1)),x))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(Erfc(Times($p(b,true),$p(x))),C2),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(Power(Erfc(Times(b,x)),C2),Power(Plus(m,C1),CN1))),Dist(Times(C4,Times(b,Power(Times(Sqrt(Pi),Plus(m,C1)),CN1))),Int(Times(Times(Power(x,Plus(m,C1)),Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Erfc(Times(b,x))),x))),And(And(And(FreeQ(b,x),IntIntegerQ(m)),Unequal(Plus(m,C1),C0)),Or(Greater(m,C0),OddQ(m))))),
SetDelayed(Int(Times(Power(Erfc(Plus(Times($p(b,true),$p(x)),$p(a))),C2),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(Power(Plus(Times(Times(CN1,a),Power(b,CN1)),Times(x,Power(b,CN1))),m),Power(Erfc(x),C2)),x),x,Plus(a,Times(b,x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(Erfc(Times($p(b,true),$p(x))),Power(E,Times(Power($p(x),C2),$p(c,true))),$p(x)),$p(x,SymbolHead)),
    Condition(Plus(Times(Times(CN1,Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Times(Erfc(Times(b,x)),Power(Times(C2,Power(b,C2)),CN1))),Times(CN1,Dist(Power(Times(b,Sqrt(Pi)),CN1),Int(Power(E,Times(Times(integer(-2L),Power(b,C2)),Power(x,C2))),x)))),And(FreeQ(List(b,c),x),SameQ(c,Times(CN1,Power(b,C2)))))),
SetDelayed(Int(Times(Erfc(Times($p(b,true),$p(x))),Power(E,Times(Power($p(x),C2),$p(c,true))),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Times(CN1,Power(x,Plus(m,Times(CN1,C1)))),Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Times(Erfc(Times(b,x)),Power(Times(C2,Power(b,C2)),CN1))),Times(CN1,Dist(Power(Times(b,Sqrt(Pi)),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(E,Times(Times(integer(-2L),Power(b,C2)),Power(x,C2)))),x)))),Dist(Times(Plus(m,Times(CN1,C1)),Power(Times(C2,Power(b,C2)),CN1)),Int(Times(Times(Power(x,Plus(m,Times(CN1,C2))),Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Erfc(Times(b,x))),x))),And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(CN1,Power(b,C2)))),IntIntegerQ(m)),Greater(m,C1)))),
SetDelayed(Int(Times(Erfc(Times($p(b,true),$p(x))),Power(E,Times(Power($p(x),C2),$p(c,true))),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,Plus(m,C1)),Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Times(Erfc(Times(b,x)),Power(Plus(m,C1),CN1))),Dist(Times(C2,Times(b,Power(Times(Sqrt(Pi),Plus(m,C1)),CN1))),Int(Times(Power(x,Plus(m,C1)),Power(E,Times(Times(integer(-2L),Power(b,C2)),Power(x,C2)))),x))),Dist(Times(C2,Times(Power(b,C2),Power(Plus(m,C1),CN1))),Int(Times(Times(Power(x,Plus(m,C2)),Power(E,Times(Times(CN1,Power(b,C2)),Power(x,C2)))),Erfc(Times(b,x))),x))),And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(CN1,Power(b,C2)))),EvenQ(m)),Less(m,CN1)))),
SetDelayed(Int(Erfi(Plus(Times($p(b,true),$p(x)),$p(a,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(Erfi(Plus(a,Times(b,x))),Power(b,CN1))),Times(CN1,Times(Exp(Power(Plus(a,Times(b,x)),C2)),Power(Times(b,Sqrt(Pi)),CN1)))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(Erfi(Plus(Times($p(b,true),$p(x)),$p(a,true))),C2),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(Power(Erfi(Plus(a,Times(b,x))),C2),Power(b,CN1))),Times(CN1,Dist(Times(C4,Power(Sqrt(Pi),CN1)),Int(Times(Times(Plus(a,Times(b,x)),Power(E,Power(Plus(a,Times(b,x)),C2))),Erfi(Plus(a,Times(b,x)))),x)))),FreeQ(List(a,b),x))),
SetDelayed(Int(Times(Erfi(Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(Erfi(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(C2,Times(b,Power(Times(Sqrt(Pi),Plus(m,C1)),CN1))),Int(Times(Power(x,Plus(m,C1)),Exp(Power(Plus(a,Times(b,x)),C2))),x)))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(Erfi(Times($p(b,true),$p(x))),C2),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(Power(Erfi(Times(b,x)),C2),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(C4,Times(b,Power(Times(Sqrt(Pi),Plus(m,C1)),CN1))),Int(Times(Times(Power(x,Plus(m,C1)),Power(E,Times(Power(b,C2),Power(x,C2)))),Erfi(Times(b,x))),x)))),And(And(And(FreeQ(b,x),IntIntegerQ(m)),Unequal(Plus(m,C1),C0)),Or(Greater(m,C0),OddQ(m))))),
SetDelayed(Int(Times(Power(Erfi(Plus(Times($p(b,true),$p(x)),$p(a))),C2),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Dist(Power(b,CN1),Subst(Int(Times(Power(Plus(Times(Times(CN1,a),Power(b,CN1)),Times(x,Power(b,CN1))),m),Power(Erfi(x),C2)),x),x,Plus(a,Times(b,x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(Erfi(Times($p(b,true),$p(x))),Power(E,Times(Power($p(x),C2),$p(c,true))),$p(x)),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(E,Times(Power(b,C2),Power(x,C2))),Times(Erfi(Times(b,x)),Power(Times(C2,Power(b,C2)),CN1))),Times(CN1,Dist(Power(Times(b,Sqrt(Pi)),CN1),Int(Power(E,Times(Times(C2,Power(b,C2)),Power(x,C2))),x)))),And(FreeQ(List(b,c),x),SameQ(c,Power(b,C2))))),
SetDelayed(Int(Times(Erfi(Times($p(b,true),$p(x))),Power(E,Times(Power($p(x),C2),$p(c,true))),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,Plus(m,Times(CN1,C1))),Power(E,Times(Power(b,C2),Power(x,C2)))),Times(Erfi(Times(b,x)),Power(Times(C2,Power(b,C2)),CN1))),Times(CN1,Dist(Power(Times(b,Sqrt(Pi)),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(E,Times(Times(C2,Power(b,C2)),Power(x,C2)))),x)))),Times(CN1,Dist(Times(Plus(m,Times(CN1,C1)),Power(Times(C2,Power(b,C2)),CN1)),Int(Times(Times(Power(x,Plus(m,Times(CN1,C2))),Power(E,Times(Power(b,C2),Power(x,C2)))),Erfi(Times(b,x))),x)))),And(And(And(FreeQ(List(b,c),x),SameQ(c,Power(b,C2))),IntIntegerQ(m)),Greater(m,C1)))),
SetDelayed(Int(Times(Erfi(Times($p(b,true),$p(x))),Power(E,Times(Power($p(x),C2),$p(c,true))),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,Plus(m,C1)),Power(E,Times(Power(b,C2),Power(x,C2)))),Times(Erfi(Times(b,x)),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(C2,Times(b,Power(Times(Sqrt(Pi),Plus(m,C1)),CN1))),Int(Times(Power(x,Plus(m,C1)),Power(E,Times(Times(C2,Power(b,C2)),Power(x,C2)))),x)))),Times(CN1,Dist(Times(C2,Times(Power(b,C2),Power(Plus(m,C1),CN1))),Int(Times(Times(Power(x,Plus(m,C2)),Power(E,Times(Power(b,C2),Power(x,C2)))),Erfi(Times(b,x))),x)))),And(And(And(FreeQ(List(b,c),x),SameQ(c,Power(b,C2))),EvenQ(m)),Less(m,CN1)))),
SetDelayed(Int(FresnelS(Plus(Times($p(b,true),$p(x)),$p(a,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(FresnelS(Plus(a,Times(b,x))),Power(b,CN1))),Times(Cos(Times(Times(C1D2,Pi),Power(Plus(a,Times(b,x)),C2))),Power(Times(b,Pi),CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(FresnelS(Plus(Times($p(b,true),$p(x)),$p(a,true))),C2),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(Power(FresnelS(Plus(a,Times(b,x))),C2),Power(b,CN1))),Times(CN1,Dist(C2,Int(Times(Times(Plus(a,Times(b,x)),Sin(Times(Times(C1D2,Pi),Power(Plus(a,Times(b,x)),C2)))),FresnelS(Plus(a,Times(b,x)))),x)))),FreeQ(List(a,b),x))),
SetDelayed(Int(Times(FresnelS(Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(FresnelS(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Sin(Times(Times(C1D2,Pi),Power(Plus(a,Times(b,x)),C2)))),x)))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(FresnelS(Times($p(b,true),$p(x))),C2),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(Power(FresnelS(Times(b,x)),C2),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(C2,Times(b,Power(Plus(m,C1),CN1))),Int(Times(Times(Power(x,Plus(m,C1)),Sin(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),FresnelS(Times(b,x))),x)))),And(And(And(FreeQ(b,x),IntIntegerQ(m)),Unequal(Plus(m,C1),C0)),Or(And(Greater(m,C0),EvenQ(m)),Equal(Mod(m,C4),C3))))),
SetDelayed(Int(Times(FresnelS(Times($p(b,true),$p(x))),Sin(Times(Power($p(x),C2),$p(c,true))),$p(x)),$p(x,SymbolHead)),
    Condition(Plus(Times(Times(CN1,Cos(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),Times(FresnelS(Times(b,x)),Power(Times(Pi,Power(b,C2)),CN1))),Dist(Power(Times(Times(C2,b),Pi),CN1),Int(Sin(Times(Times(Pi,Power(b,C2)),Power(x,C2))),x))),And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))))),
SetDelayed(Int(Times(FresnelS(Times($p(b,true),$p(x))),Power($p(x),$p(m)),Sin(Times(Power($p(x),C2),$p(c,true)))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Times(CN1,Power(x,Plus(m,Times(CN1,C1)))),Cos(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),Times(FresnelS(Times(b,x)),Power(Times(Pi,Power(b,C2)),CN1))),Dist(Power(Times(Times(C2,b),Pi),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Sin(Times(Times(Pi,Power(b,C2)),Power(x,C2)))),x))),Dist(Times(Plus(m,Times(CN1,C1)),Power(Times(Pi,Power(b,C2)),CN1)),Int(Times(Times(Power(x,Plus(m,Times(CN1,C2))),Cos(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),FresnelS(Times(b,x))),x))),And(And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))),IntIntegerQ(m)),Greater(m,C1)),Not(Equal(Mod(m,C4),C2))))),
SetDelayed(Int(Times(FresnelS(Times($p(b,true),$p(x))),Power($p(x),$p(m)),Sin(Times(Power($p(x),C2),$p(c,true)))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Plus(Times(Times(Power(x,Plus(m,C1)),Sin(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),Times(FresnelS(Times(b,x)),Power(Plus(m,C1),CN1))),Times(CN1,Times(b,Times(Power(x,Plus(m,C2)),Power(Times(Times(C2,Plus(m,C1)),Plus(m,C2)),CN1))))),Dist(Times(b,Power(Times(C2,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,C1)),Cos(Times(Times(Pi,Power(b,C2)),Power(x,C2)))),x))),Times(CN1,Dist(Times(Pi,Times(Power(b,C2),Power(Plus(m,C1),CN1))),Int(Times(Times(Power(x,Plus(m,C2)),Cos(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),FresnelS(Times(b,x))),x)))),And(And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))),IntIntegerQ(m)),Less(m,integer(-2L))),Equal(Mod(m,C4),C0)))),
SetDelayed(Int(Times(Cos(Times(Power($p(x),C2),$p(c,true))),FresnelS(Times($p(b,true),$p(x))),$p(x)),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Sin(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2))),Times(FresnelS(Times(b,x)),Power(Times(Pi,Power(b,C2)),CN1))),Times(CN1,Times(x,Power(Times(Times(C2,b),Pi),CN1)))),Dist(Power(Times(Times(C2,b),Pi),CN1),Int(Cos(Times(Times(Pi,Power(b,C2)),Power(x,C2))),x))),And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))))),
SetDelayed(Int(Times(Cos(Times(Power($p(x),C2),$p(c,true))),FresnelS(Times($p(b,true),$p(x))),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Plus(Times(Times(Power(x,Plus(m,Times(CN1,C1))),Sin(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),Times(FresnelS(Times(b,x)),Power(Times(Pi,Power(b,C2)),CN1))),Times(CN1,Times(Power(x,m),Power(Times(Times(Times(C2,b),m),Pi),CN1)))),Dist(Power(Times(Times(C2,b),Pi),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Cos(Times(Times(Pi,Power(b,C2)),Power(x,C2)))),x))),Times(CN1,Dist(Times(Plus(m,Times(CN1,C1)),Power(Times(Pi,Power(b,C2)),CN1)),Int(Times(Times(Power(x,Plus(m,Times(CN1,C2))),Sin(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),FresnelS(Times(b,x))),x)))),And(And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))),IntIntegerQ(m)),Greater(m,C1)),Not(Equal(Mod(m,C4),C0))))),
SetDelayed(Int(Times(Cos(Times(Power($p(x),C2),$p(c,true))),FresnelS(Times($p(b,true),$p(x))),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,Plus(m,C1)),Cos(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),Times(FresnelS(Times(b,x)),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(b,Power(Times(C2,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,C1)),Sin(Times(Times(Pi,Power(b,C2)),Power(x,C2)))),x)))),Dist(Times(Pi,Times(Power(b,C2),Power(Plus(m,C1),CN1))),Int(Times(Times(Power(x,Plus(m,C2)),Sin(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),FresnelS(Times(b,x))),x))),And(And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))),IntIntegerQ(m)),Less(m,CN1)),Equal(Mod(m,C4),C2)))),
SetDelayed(Int(FresnelC(Plus(Times($p(b,true),$p(x)),$p(a,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(FresnelC(Plus(a,Times(b,x))),Power(b,CN1))),Times(CN1,Times(Sin(Times(Times(C1D2,Pi),Power(Plus(a,Times(b,x)),C2))),Power(Times(b,Pi),CN1)))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(FresnelC(Plus(Times($p(b,true),$p(x)),$p(a,true))),C2),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(Power(FresnelC(Plus(a,Times(b,x))),C2),Power(b,CN1))),Times(CN1,Dist(C2,Int(Times(Times(Plus(a,Times(b,x)),Cos(Times(Times(C1D2,Pi),Power(Plus(a,Times(b,x)),C2)))),FresnelC(Plus(a,Times(b,x)))),x)))),FreeQ(List(a,b),x))),
SetDelayed(Int(Times(FresnelC(Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(FresnelC(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Cos(Times(Times(C1D2,Pi),Power(Plus(a,Times(b,x)),C2)))),x)))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(FresnelC(Times($p(b,true),$p(x))),C2),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(Power(FresnelC(Times(b,x)),C2),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(C2,Times(b,Power(Plus(m,C1),CN1))),Int(Times(Times(Power(x,Plus(m,C1)),Cos(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),FresnelC(Times(b,x))),x)))),And(And(And(FreeQ(b,x),IntIntegerQ(m)),Unequal(Plus(m,C1),C0)),Or(And(Greater(m,C0),EvenQ(m)),Equal(Mod(m,C4),C3))))),
SetDelayed(Int(Times(FresnelC(Times($p(b,true),$p(x))),Sin(Times(Power($p(x),C2),$p(c,true))),$p(x)),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(CN1,Cos(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),Times(FresnelC(Times(b,x)),Power(Times(Pi,Power(b,C2)),CN1))),Times(x,Power(Times(Times(C2,b),Pi),CN1))),Dist(Power(Times(Times(C2,b),Pi),CN1),Int(Cos(Times(Times(Pi,Power(b,C2)),Power(x,C2))),x))),And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))))),
SetDelayed(Int(Times(FresnelC(Times($p(b,true),$p(x))),Power($p(x),$p(m)),Sin(Times(Power($p(x),C2),$p(c,true)))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Plus(Times(Times(Times(CN1,Power(x,Plus(m,Times(CN1,C1)))),Cos(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),Times(FresnelC(Times(b,x)),Power(Times(Pi,Power(b,C2)),CN1))),Times(Power(x,m),Power(Times(Times(Times(C2,b),m),Pi),CN1))),Dist(Power(Times(Times(C2,b),Pi),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Cos(Times(Times(Pi,Power(b,C2)),Power(x,C2)))),x))),Dist(Times(Plus(m,Times(CN1,C1)),Power(Times(Pi,Power(b,C2)),CN1)),Int(Times(Times(Power(x,Plus(m,Times(CN1,C2))),Cos(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),FresnelC(Times(b,x))),x))),And(And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))),IntIntegerQ(m)),Greater(m,C1)),Not(Equal(Mod(m,C4),C0))))),
SetDelayed(Int(Times(FresnelC(Times($p(b,true),$p(x))),Power($p(x),$p(m)),Sin(Times(Power($p(x),C2),$p(c,true)))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,Plus(m,C1)),Sin(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),Times(FresnelC(Times(b,x)),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(b,Power(Times(C2,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,C1)),Sin(Times(Times(Pi,Power(b,C2)),Power(x,C2)))),x)))),Times(CN1,Dist(Times(Pi,Times(Power(b,C2),Power(Plus(m,C1),CN1))),Int(Times(Times(Power(x,Plus(m,C2)),Cos(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),FresnelC(Times(b,x))),x)))),And(And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))),IntIntegerQ(m)),Less(m,CN1)),Equal(Mod(m,C4),C2)))),
SetDelayed(Int(Times(Cos(Times(Power($p(x),C2),$p(c,true))),FresnelC(Times($p(b,true),$p(x))),$p(x)),$p(x,SymbolHead)),
    Condition(Plus(Times(Sin(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2))),Times(FresnelC(Times(b,x)),Power(Times(Pi,Power(b,C2)),CN1))),Times(CN1,Dist(Power(Times(Times(C2,b),Pi),CN1),Int(Sin(Times(Times(Pi,Power(b,C2)),Power(x,C2))),x)))),And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))))),
SetDelayed(Int(Times(Cos(Times(Power($p(x),C2),$p(c,true))),FresnelC(Times($p(b,true),$p(x))),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,Plus(m,Times(CN1,C1))),Sin(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),Times(FresnelC(Times(b,x)),Power(Times(Pi,Power(b,C2)),CN1))),Times(CN1,Dist(Power(Times(Times(C2,b),Pi),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Sin(Times(Times(Pi,Power(b,C2)),Power(x,C2)))),x)))),Times(CN1,Dist(Times(Plus(m,Times(CN1,C1)),Power(Times(Pi,Power(b,C2)),CN1)),Int(Times(Times(Power(x,Plus(m,Times(CN1,C2))),Sin(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),FresnelC(Times(b,x))),x)))),And(And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))),IntIntegerQ(m)),Greater(m,C1)),Not(Equal(Mod(m,C4),C2))))),
SetDelayed(Int(Times(Cos(Times(Power($p(x),C2),$p(c,true))),FresnelC(Times($p(b,true),$p(x))),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Plus(Times(Times(Power(x,Plus(m,C1)),Cos(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),Times(FresnelC(Times(b,x)),Power(Plus(m,C1),CN1))),Times(CN1,Times(b,Times(Power(x,Plus(m,C2)),Power(Times(Times(C2,Plus(m,C1)),Plus(m,C2)),CN1))))),Times(CN1,Dist(Times(b,Power(Times(C2,Plus(m,C1)),CN1)),Int(Times(Power(x,Plus(m,C1)),Cos(Times(Times(Pi,Power(b,C2)),Power(x,C2)))),x)))),Dist(Times(Pi,Times(Power(b,C2),Power(Plus(m,C1),CN1))),Int(Times(Times(Power(x,Plus(m,C2)),Sin(Times(Times(Times(C1D2,Pi),Power(b,C2)),Power(x,C2)))),FresnelC(Times(b,x))),x))),And(And(And(And(FreeQ(List(b,c),x),SameQ(c,Times(Times(C1D2,Pi),Power(b,C2)))),IntIntegerQ(m)),Less(m,integer(-2L))),Equal(Mod(m,C4),C0)))),
SetDelayed(Int(ExpIntegralE($p(n),Plus(Times($p(b,true),$p(x)),$p(a,true))),$p(x,SymbolHead)),
    Condition(Times(Times(CN1,ExpIntegralE(Plus(n,C1),Plus(a,Times(b,x)))),Power(b,CN1)),FreeQ(List(a,b,n),x))),
SetDelayed(Int(Times(ExpIntegralE($p(n),Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(ExpIntegralE(n,Plus(a,Times(b,x))),Power(Plus(m,C1),CN1))),Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),ExpIntegralE(Plus(n,Times(CN1,C1)),Plus(a,Times(b,x)))),x))),And(And(FreeQ(List(a,b,m),x),IntIntegerQ(n)),Greater(n,C0)))),
SetDelayed(Int(Times(ExpIntegralE($p(n),Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Times(CN1,Power(x,m)),Times(ExpIntegralE(Plus(n,C1),Plus(a,Times(b,x))),Power(b,CN1))),Dist(Times(m,Power(b,CN1)),Int(Times(Power(x,Plus(m,Times(CN1,C1))),ExpIntegralE(Plus(n,C1),Plus(a,Times(b,x)))),x))),And(And(FreeQ(List(a,b,m),x),IntIntegerQ(n)),Less(n,C0)))),
SetDelayed(Int(ExpIntegralEi(Plus(Times($p(b,true),$p(x)),$p(a,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(ExpIntegralEi(Plus(a,Times(b,x))),Power(b,CN1))),Times(CN1,Times(Power(E,Plus(a,Times(b,x))),Power(b,CN1)))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(ExpIntegralEi(Plus(Times($p(b,true),$p(x)),$p(a,true))),C2),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(Power(ExpIntegralEi(Plus(a,Times(b,x))),C2),Power(b,CN1))),Times(CN1,Dist(C2,Int(Times(Power(E,Plus(a,Times(b,x))),ExpIntegralEi(Plus(a,Times(b,x)))),x)))),FreeQ(List(a,b),x))),
SetDelayed(Int(Times(ExpIntegralEi(Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(ExpIntegralEi(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Times(Power(E,Plus(a,Times(b,x))),Power(Plus(a,Times(b,x)),CN1))),x)))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(ExpIntegralEi(Times($p(b,true),$p(x))),C2),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(Power(ExpIntegralEi(Times(b,x)),C2),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(C2,Power(Plus(m,C1),CN1)),Int(Times(Times(Power(x,m),Power(E,Times(b,x))),ExpIntegralEi(Times(b,x))),x)))),And(And(FreeQ(b,x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(Power(ExpIntegralEi(Plus(Times($p(b,true),$p(x)),$p(a))),C2),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Plus(Times(Power(x,Plus(m,C1)),Times(Power(ExpIntegralEi(Plus(a,Times(b,x))),C2),Power(Plus(m,C1),CN1))),Times(Times(a,Power(x,m)),Times(Power(ExpIntegralEi(Plus(a,Times(b,x))),C2),Power(Times(b,Plus(m,C1)),CN1)))),Times(CN1,Dist(Times(C2,Power(Plus(m,C1),CN1)),Int(Times(Times(Power(x,m),Power(E,Plus(a,Times(b,x)))),ExpIntegralEi(Plus(a,Times(b,x)))),x)))),Times(CN1,Dist(Times(a,Times(m,Power(Times(b,Plus(m,C1)),CN1))),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(ExpIntegralEi(Plus(a,Times(b,x))),C2)),x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(ExpIntegralEi(Plus(Times($p(d,true),$p(x)),$p(c,true))),Power(E,Plus(Times($p(b,true),$p(x)),$p(a,true)))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(E,Plus(a,Times(b,x))),Times(ExpIntegralEi(Plus(c,Times(d,x))),Power(b,CN1))),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Power(E,Plus(a,Times(b,x))),Times(Power(E,Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1))),x)))),FreeQ(List(a,b,c,d),x))),
SetDelayed(Int(Times(ExpIntegralEi(Plus(Times($p(d,true),$p(x)),$p(c,true))),Power(E,Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,m),Power(E,Plus(a,Times(b,x)))),Times(ExpIntegralEi(Plus(c,Times(d,x))),Power(b,CN1))),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Times(Power(x,m),Power(E,Plus(a,Times(b,x)))),Times(Power(E,Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1))),x)))),Times(CN1,Dist(Times(m,Power(b,CN1)),Int(Times(Times(Power(x,Plus(m,Times(CN1,C1))),Power(E,Plus(a,Times(b,x)))),ExpIntegralEi(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(ExpIntegralEi(Plus(Times($p(d,true),$p(x)),$p(c,true))),Power(E,Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,Plus(m,C1)),Power(E,Plus(a,Times(b,x)))),Times(ExpIntegralEi(Plus(c,Times(d,x))),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(d,Power(Plus(m,C1),CN1)),Int(Times(Times(Power(x,Plus(m,C1)),Power(E,Plus(a,Times(b,x)))),Times(Power(E,Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1))),x)))),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Times(Power(x,Plus(m,C1)),Power(E,Plus(a,Times(b,x)))),ExpIntegralEi(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Less(m,CN1)))),
SetDelayed(Int(SinIntegral(Plus(Times($p(b,true),$p(x)),$p(a,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(SinIntegral(Plus(a,Times(b,x))),Power(b,CN1))),Times(Cos(Plus(a,Times(b,x))),Power(b,CN1))),FreeQ(List(a,b),x))),
SetDelayed(Int(Power(SinIntegral(Plus(Times($p(b,true),$p(x)),$p(a,true))),C2),$p(x,SymbolHead)),
    Condition(Plus(Times(Plus(a,Times(b,x)),Times(Power(SinIntegral(Plus(a,Times(b,x))),C2),Power(b,CN1))),Times(CN1,Dist(C2,Int(Times(Sin(Plus(a,Times(b,x))),SinIntegral(Plus(a,Times(b,x)))),x)))),FreeQ(List(a,b),x))),
SetDelayed(Int(Times(Power($p(x),$p(m,true)),SinIntegral(Plus(Times($p(b,true),$p(x)),$p(a,true)))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(SinIntegral(Plus(a,Times(b,x))),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Power(x,Plus(m,C1)),Times(Sin(Plus(a,Times(b,x))),Power(Plus(a,Times(b,x)),CN1))),x)))),And(FreeQ(List(a,b,m),x),NonzeroQ(Plus(m,C1))))),
SetDelayed(Int(Times(Power(SinIntegral(Times($p(b,true),$p(x))),C2),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Times(Power(SinIntegral(Times(b,x)),C2),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(C2,Power(Plus(m,C1),CN1)),Int(Times(Times(Power(x,m),Sin(Times(b,x))),SinIntegral(Times(b,x))),x)))),And(And(FreeQ(b,x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(Power(SinIntegral(Plus(Times($p(b,true),$p(x)),$p(a))),C2),Power($p(x),$p(m,true))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Plus(Times(Power(x,Plus(m,C1)),Times(Power(SinIntegral(Plus(a,Times(b,x))),C2),Power(Plus(m,C1),CN1))),Times(Times(a,Power(x,m)),Times(Power(SinIntegral(Plus(a,Times(b,x))),C2),Power(Times(b,Plus(m,C1)),CN1)))),Times(CN1,Dist(Times(C2,Power(Plus(m,C1),CN1)),Int(Times(Times(Power(x,m),Sin(Plus(a,Times(b,x)))),SinIntegral(Plus(a,Times(b,x)))),x)))),Times(CN1,Dist(Times(a,Times(m,Power(Times(b,Plus(m,C1)),CN1))),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(SinIntegral(Plus(a,Times(b,x))),C2)),x)))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(Sin(Plus(Times($p(b,true),$p(x)),$p(a,true))),SinIntegral(Plus(Times($p(d,true),$p(x)),$p(c,true)))),$p(x,SymbolHead)),
    Condition(Plus(Times(Times(CN1,Cos(Plus(a,Times(b,x)))),Times(SinIntegral(Plus(c,Times(d,x))),Power(b,CN1))),Dist(Times(d,Power(b,CN1)),Int(Times(Cos(Plus(a,Times(b,x))),Times(Sin(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1))),x))),FreeQ(List(a,b,c,d),x))),
SetDelayed(Int(Times(Power($p(x),$p(m,true)),Sin(Plus(Times($p(b,true),$p(x)),$p(a,true))),SinIntegral(Plus(Times($p(d,true),$p(x)),$p(c,true)))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Times(CN1,Power(x,m)),Cos(Plus(a,Times(b,x)))),Times(SinIntegral(Plus(c,Times(d,x))),Power(b,CN1))),Dist(Times(d,Power(b,CN1)),Int(Times(Times(Power(x,m),Cos(Plus(a,Times(b,x)))),Times(Sin(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1))),x))),Dist(Times(m,Power(b,CN1)),Int(Times(Times(Power(x,Plus(m,Times(CN1,C1))),Cos(Plus(a,Times(b,x)))),SinIntegral(Plus(c,Times(d,x)))),x))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(Power($p(x),$p(m)),Sin(Plus(Times($p(b,true),$p(x)),$p(a,true))),SinIntegral(Plus(Times($p(d,true),$p(x)),$p(c,true)))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,Plus(m,C1)),Sin(Plus(a,Times(b,x)))),Times(SinIntegral(Plus(c,Times(d,x))),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(d,Power(Plus(m,C1),CN1)),Int(Times(Times(Power(x,Plus(m,C1)),Sin(Plus(a,Times(b,x)))),Times(Sin(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1))),x)))),Times(CN1,Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Times(Power(x,Plus(m,C1)),Cos(Plus(a,Times(b,x)))),SinIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Less(m,CN1)))),
SetDelayed(Int(Times(Cos(Plus(Times($p(b,true),$p(x)),$p(a,true))),SinIntegral(Plus(Times($p(d,true),$p(x)),$p(c,true)))),$p(x,SymbolHead)),
    Condition(Plus(Times(Sin(Plus(a,Times(b,x))),Times(SinIntegral(Plus(c,Times(d,x))),Power(b,CN1))),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Sin(Plus(a,Times(b,x))),Times(Sin(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1))),x)))),FreeQ(List(a,b,c,d),x))),
SetDelayed(Int(Times(Cos(Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true)),SinIntegral(Plus(Times($p(d,true),$p(x)),$p(c,true)))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,m),Sin(Plus(a,Times(b,x)))),Times(SinIntegral(Plus(c,Times(d,x))),Power(b,CN1))),Times(CN1,Dist(Times(d,Power(b,CN1)),Int(Times(Times(Power(x,m),Sin(Plus(a,Times(b,x)))),Times(Sin(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1))),x)))),Times(CN1,Dist(Times(m,Power(b,CN1)),Int(Times(Times(Power(x,Plus(m,Times(CN1,C1))),Sin(Plus(a,Times(b,x)))),SinIntegral(Plus(c,Times(d,x)))),x)))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Greater(m,C0)))),
SetDelayed(Int(Times(Cos(Plus(Times($p(b,true),$p(x)),$p(a,true))),Power($p(x),$p(m,true)),SinIntegral(Plus(Times($p(d,true),$p(x)),$p(c,true)))),$p(x,SymbolHead)),
    Condition(Plus(Plus(Times(Times(Power(x,Plus(m,C1)),Cos(Plus(a,Times(b,x)))),Times(SinIntegral(Plus(c,Times(d,x))),Power(Plus(m,C1),CN1))),Times(CN1,Dist(Times(d,Power(Plus(m,C1),CN1)),Int(Times(Times(Power(x,Plus(m,C1)),Cos(Plus(a,Times(b,x)))),Times(Sin(Plus(c,Times(d,x))),Power(Plus(c,Times(d,x)),CN1))),x)))),Dist(Times(b,Power(Plus(m,C1),CN1)),Int(Times(Times(Power(x,Plus(m,C1)),Sin(Plus(a,Times(b,x)))),SinIntegral(Plus(c,Times(d,x)))),x))),And(And(FreeQ(List(a,b,c,d),x),IntIntegerQ(m)),Less(m,CN1))))
  );
}
