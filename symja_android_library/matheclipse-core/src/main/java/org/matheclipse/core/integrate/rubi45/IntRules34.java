package org.matheclipse.core.integrate.rubi45;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctions.*;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;

/** 
 * IndefiniteIntegrationRules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IntRules34 { 
  public static IAST RULES = List( 
ISetDelayed(Int(Times(Power(Plus(Times(x_,pe_DEFAULT),pd_DEFAULT),m_DEFAULT),Power(pf_,Plus(Times(Sqr(x_),c_DEFAULT),Times(b_DEFAULT,x_),a_DEFAULT))),x_Symbol),
    Condition($(Defer($s("Int")),Times(Power(Plus(pd,Times(pe,x)),m),Power(pf,Plus(a,Times(b,x),Times(c,Sqr(x))))),x),FreeQ(List(pf,a,b,c,pd,pe,m),x))),
ISetDelayed(Int(Times(Power(u_,m_DEFAULT),Power(pf_,v_)),x_Symbol),
    Condition(Int(Times(Power(ExpandToSum(u,x),m),Power(pf,ExpandToSum(v,x))),x),And(And(And(FreeQ(List(pf,m),x),LinearQ(u,x)),QuadraticQ(v,x)),Not(And(LinearMatchQ(u,x),QuadraticMatchQ(v,x)))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(x,m),Power(Plus(a,Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),pn)),x),x),And(FreeQ(List(pf,a,b,c,pd,pe,m),x),PositiveIntegerQ(pn)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),CN1),Power(Plus(Times(g_DEFAULT,x_),f_DEFAULT),m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(Plus(f,Times(g,x)),Plus(m,C1)),Power(Times(a,g,Plus(m,C1)),CN1)),Times(CN1,b,Power(a,CN1),Int(Times(Power(Plus(f,Times(g,x)),m),Power(pf,Times(pe,Plus(c,Times(pd,x)))),Power(Plus(a,Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),CN1)),x))),And(And(FreeQ(List(pf,a,b,c,pd,pe,f,g),x),RationalQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_),Power(Plus(Times(g_DEFAULT,x_),f_DEFAULT),m_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("§showsteps"),False),Set($s("§stepcounter"),Null)),Int(Power(Plus(a,Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),pn),x)))),Plus(Dist(Power(Plus(f,Times(g,x)),m),u,x),Times(CN1,g,m,Int(Times(Power(Plus(f,Times(g,x)),Plus(m,Times(CN1,C1))),u),x)))),And(And(And(FreeQ(List(pf,a,b,c,pd,pe,f,g),x),RationalQ(m,pn)),Greater(m,C0)),Less(pn,CN1)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),CN1),Power(Plus(Times(g_DEFAULT,x_),f_DEFAULT),m_DEFAULT),Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(Plus(f,Times(g,x)),m),Log(Plus(C1,Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))),Power(a,CN1)))),Power(Times(b,pd,pe,Log(pf)),CN1)),Times(CN1,g,m,Power(Times(b,pd,pe,Log(pf)),CN1),Int(Times(Power(Plus(f,Times(g,x)),Plus(m,Times(CN1,C1))),Log(Plus(C1,Times(b,Power(a,CN1),Power(pf,Times(pe,Plus(c,Times(pd,x)))))))),x))),And(And(FreeQ(List(pf,a,b,c,pd,pe,f,g),x),RationalQ(m)),GreaterEqual(m,C1)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_DEFAULT),p_DEFAULT),Power(Plus(Times(g_DEFAULT,x_),f_DEFAULT),m_DEFAULT),Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(Plus(f,Times(g,x)),m),Power(Plus(a,Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),Plus(p,C1)),Power(Times(b,pd,pe,Plus(p,C1),Log(pf)),CN1)),Times(CN1,g,m,Power(Times(b,pd,pe,Plus(p,C1),Log(pf)),CN1),Int(Times(Power(Plus(f,Times(g,x)),Plus(m,Times(CN1,C1))),Power(Plus(a,Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),Plus(p,C1))),x))),And(FreeQ(List(pf,a,b,c,pd,pe,f,g,m,p),x),NonzeroQ(Plus(p,C1))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,v_),b_DEFAULT),a_DEFAULT),pn_),Power(x_,m_DEFAULT),Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT))),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("§showsteps"),False),Set($s("§stepcounter"),Null)),Int(Times(Power(pf,Times(pe,Plus(c,Times(pd,x)))),Power(Plus(a,Times(b,Power(pf,v))),pn)),x)))),Plus(Dist(Power(x,m),u,x),Times(CN1,m,Int(Times(Power(x,Plus(m,Times(CN1,C1))),u),x)))),And(And(And(And(FreeQ(List(pf,a,b,c,pd,pe),x),ZeroQ(Plus(Times(C2,pe,Plus(c,Times(pd,x))),Times(CN1,v)))),RationalQ(m)),Greater(m,C0)),NegativeIntegerQ(pn)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_DEFAULT),Power(pg_,Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT))),x_Symbol),
    Condition(Module(List(Set(m,FullSimplify(Times(g,h,Log(pg),Power(Times(pd,pe,Log(pf)),CN1))))),Condition(Times(Denominator(m),Power(pg,Plus(Times(f,h),Times(CN1,c,g,h,Power(pd,CN1)))),Power(Times(pd,pe,Log(pf)),CN1),Subst(Int(Times(Power(x,Plus(Numerator(m),Times(CN1,C1))),Power(Plus(a,Times(b,Power(x,Denominator(m)))),pn)),x),x,Power(pf,Times(pe,Plus(c,Times(pd,x)),Power(Denominator(m),CN1))))),And(RationalQ(m),GreaterEqual(Abs(m),C1)))),FreeQ(List(pf,pg,a,b,c,pd,pe,f,g,h,pn),x))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_DEFAULT),Power(pg_,Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT))),x_Symbol),
    Condition(Module(List(Set(m,FullSimplify(Times(pd,pe,Log(pf),Power(Times(g,h,Log(pg)),CN1))))),Condition(Times(Denominator(m),Power(Times(g,h,Log(pg)),CN1),Subst(Int(Times(Power(x,Plus(Denominator(m),Times(CN1,C1))),Power(Plus(a,Times(b,Power(pf,Plus(Times(c,pe),Times(CN1,pd,pe,f,Power(g,CN1)))),Power(x,Numerator(m)))),pn)),x),x,Power(pg,Times(h,Plus(f,Times(g,x)),Power(Denominator(m),CN1))))),And(RationalQ(m),Greater(Abs(m),C1)))),FreeQ(List(pf,pg,a,b,c,pd,pe,f,g,h,pn),x))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_DEFAULT),Power(pg_,Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT))),x_Symbol),
    Condition(Int(Expand(Times(Power(pg,Times(h,Plus(f,Times(g,x)))),Power(Plus(a,Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),pn)),x),x),And(And(FreeQ(List(pf,pg,a,b,c,pd,pe,f,g,h),x),Not(RationalQ(FullSimplify(Times(g,h,Log(pg),Power(Times(pd,pe,Log(pf)),CN1)))))),PositiveIntegerQ(pn)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_),Power(pg_,Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT))),x_Symbol),
    Condition(Times(Power(a,pn),Power(pg,Times(h,Plus(f,Times(g,x)))),Power(Times(g,h,Log(pg)),CN1),Hypergeometric2F1(Times(CN1,pn),Times(g,h,Log(pg),Power(Times(pd,pe,Log(pf)),CN1)),Plus(Times(g,h,Log(pg),Power(Times(pd,pe,Log(pf)),CN1)),C1),Simplify(Times(CN1,b,Power(a,CN1),Power(pf,Times(pe,Plus(c,Times(pd,x)))))))),And(And(FreeQ(List(pf,pg,a,b,c,pd,pe,f,g,h),x),Not(RationalQ(FullSimplify(Times(g,h,Log(pg),Power(Times(pd,pe,Log(pf)),CN1)))))),NegativeIntegerQ(pn)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_),Power(pg_,Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT))),x_Symbol),
    Condition(Times(Power(pg,Times(h,Plus(f,Times(g,x)))),Power(Plus(a,Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),Plus(pn,C1)),Power(Times(a,g,h,Log(pg)),CN1),Hypergeometric2F1(C1,Plus(pn,Times(g,h,Log(pg),Power(Times(pd,pe,Log(pf)),CN1)),C1),Plus(Times(g,h,Log(pg),Power(Times(pd,pe,Log(pf)),CN1)),C1),Times(CN1,b,Power(pf,Times(pe,Plus(c,Times(pd,x)))),Power(a,CN1)))),And(And(FreeQ(List(pf,pg,a,b,c,pd,pe,f,g,h,pn),x),Not(RationalQ(FullSimplify(Times(g,h,Log(pg),Power(Times(pd,pe,Log(pf)),CN1)))))),Not(IntegerQ(pn))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(v_,pe_DEFAULT)),b_DEFAULT),a_),pn_),Power(pg_,Times(h_DEFAULT,u_))),x_Symbol),
    Condition(Int(Times(Power(pg,Times(h,ExpandToSum(u,x))),Power(Plus(a,Times(b,Power(pf,Times(pe,ExpandToSum(v,x))))),pn)),x),And(And(FreeQ(List(pf,pg,a,b,pe,h,pn),x),LinearQ(List(u,v),x)),Not(LinearMatchQ(List(u,v),x))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_DEFAULT),Power(pg_,Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT)),Power(ph_,Times(Plus(Times(s_DEFAULT,x_),r_DEFAULT),t_DEFAULT))),x_Symbol),
    Condition(Module(List(Set(m,FullSimplify(Times(Plus(Times(g,h,Log(pg)),Times(s,t,Log(ph))),Power(Times(pd,pe,Log(pf)),CN1))))),Condition(Times(Denominator(m),Power(pg,Plus(Times(f,h),Times(CN1,c,g,h,Power(pd,CN1)))),Power(ph,Plus(Times(r,t),Times(CN1,c,s,t,Power(pd,CN1)))),Power(Times(pd,pe,Log(pf)),CN1),Subst(Int(Times(Power(x,Plus(Numerator(m),Times(CN1,C1))),Power(Plus(a,Times(b,Power(x,Denominator(m)))),pn)),x),x,Power(pf,Times(pe,Plus(c,Times(pd,x)),Power(Denominator(m),CN1))))),RationalQ(m))),FreeQ(List(pf,pg,ph,a,b,c,pd,pe,f,g,h,r,s,t,pn),x))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_DEFAULT),Power(pg_,Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT)),Power(ph_,Times(Plus(Times(s_DEFAULT,x_),r_DEFAULT),t_DEFAULT))),x_Symbol),
    Condition(Times(Power(pg,Times(Plus(f,Times(CN1,c,g,Power(pd,CN1))),h)),Int(Times(Power(ph,Times(t,Plus(r,Times(s,x)))),Power(Plus(b,Times(a,Power(pf,Times(CN1,pe,Plus(c,Times(pd,x)))))),pn)),x)),And(And(FreeQ(List(pf,pg,ph,a,b,c,pd,pe,f,g,h,r,s,t),x),ZeroQ(Plus(Times(pd,pe,pn,Log(pf)),Times(g,h,Log(pg))))),IntegerQ(pn)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_DEFAULT),Power(pg_,Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT)),Power(ph_,Times(Plus(Times(s_DEFAULT,x_),r_DEFAULT),t_DEFAULT))),x_Symbol),
    Condition(Int(Expand(Times(Power(pg,Times(h,Plus(f,Times(g,x)))),Power(ph,Times(t,Plus(r,Times(s,x)))),Power(Plus(a,Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),pn)),x),x),And(And(FreeQ(List(pf,pg,ph,a,b,c,pd,pe,f,g,h,r,s,t),x),Not(RationalQ(FullSimplify(Times(Plus(Times(g,h,Log(pg)),Times(s,t,Log(ph))),Power(Times(pd,pe,Log(pf)),CN1)))))),PositiveIntegerQ(pn)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_),Power(pg_,Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT)),Power(ph_,Times(Plus(Times(s_DEFAULT,x_),r_DEFAULT),t_DEFAULT))),x_Symbol),
    Condition(Times(Power(a,pn),Power(pg,Times(h,Plus(f,Times(g,x)))),Power(ph,Times(t,Plus(r,Times(s,x)))),Power(Plus(Times(g,h,Log(pg)),Times(s,t,Log(ph))),CN1),Hypergeometric2F1(Times(CN1,pn),Times(Plus(Times(g,h,Log(pg)),Times(s,t,Log(ph))),Power(Times(pd,pe,Log(pf)),CN1)),Plus(Times(Plus(Times(g,h,Log(pg)),Times(s,t,Log(ph))),Power(Times(pd,pe,Log(pf)),CN1)),C1),Simplify(Times(CN1,b,Power(a,CN1),Power(pf,Times(pe,Plus(c,Times(pd,x)))))))),And(And(FreeQ(List(pf,pg,ph,a,b,c,pd,pe,f,g,h,r,s,t),x),Not(RationalQ(FullSimplify(Times(Plus(Times(g,h,Log(pg)),Times(s,t,Log(ph))),Power(Times(pd,pe,Log(pf)),CN1)))))),NegativeIntegerQ(pn)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT),a_),pn_),Power(pg_,Times(Plus(Times(g_DEFAULT,x_),f_DEFAULT),h_DEFAULT)),Power(ph_,Times(Plus(Times(s_DEFAULT,x_),r_DEFAULT),t_DEFAULT))),x_Symbol),
    Condition(Times(Power(pg,Times(h,Plus(f,Times(g,x)))),Power(ph,Times(t,Plus(r,Times(s,x)))),Power(Plus(a,Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),pn),Power(Times(Plus(Times(g,h,Log(pg)),Times(s,t,Log(ph))),Power(Times(Plus(a,Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),Power(a,CN1)),pn)),CN1),Hypergeometric2F1(Times(CN1,pn),Times(Plus(Times(g,h,Log(pg)),Times(s,t,Log(ph))),Power(Times(pd,pe,Log(pf)),CN1)),Plus(Times(Plus(Times(g,h,Log(pg)),Times(s,t,Log(ph))),Power(Times(pd,pe,Log(pf)),CN1)),C1),Simplify(Times(CN1,b,Power(a,CN1),Power(pf,Times(pe,Plus(c,Times(pd,x)))))))),And(And(FreeQ(List(pf,pg,ph,a,b,c,pd,pe,f,g,h,r,s,t,pn),x),Not(RationalQ(FullSimplify(Times(Plus(Times(g,h,Log(pg)),Times(s,t,Log(ph))),Power(Times(pd,pe,Log(pf)),CN1)))))),Not(IntegerQ(pn))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Times(v_,pe_DEFAULT)),b_DEFAULT),a_),pn_),Power(pg_,Times(h_DEFAULT,u_)),Power(ph_,Times(t_DEFAULT,w_))),x_Symbol),
    Condition(Int(Times(Power(pg,Times(h,ExpandToSum(u,x))),Power(ph,Times(t,ExpandToSum(w,x))),Power(Plus(a,Times(b,Power(pf,Times(pe,ExpandToSum(v,x))))),pn)),x),And(And(FreeQ(List(pf,pg,ph,a,b,pe,h,t,pn),x),LinearQ(List(u,v,w),x)),Not(LinearMatchQ(List(u,v,w),x))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(x_,pn_DEFAULT),a_DEFAULT),Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT)),p_DEFAULT),Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(Plus(Times(a,Power(x,pn)),Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),Plus(p,C1)),Power(Times(b,pd,pe,Plus(p,C1),Log(pf)),CN1)),Times(CN1,a,pn,Power(Times(b,pd,pe,Log(pf)),CN1),Int(Times(Power(x,Plus(pn,Times(CN1,C1))),Power(Plus(Times(a,Power(x,pn)),Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),p)),x))),And(FreeQ(List(pf,a,b,c,pd,pe,pn,p),x),NonzeroQ(Plus(p,C1))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(x_,pn_DEFAULT),a_DEFAULT),Times(Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT)),b_DEFAULT)),p_DEFAULT),Power(x_,m_DEFAULT),Power(pf_,Times(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pe_DEFAULT))),x_Symbol),
    Condition(Plus(Times(Power(x,m),Power(Plus(Times(a,Power(x,pn)),Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),Plus(p,C1)),Power(Times(b,pd,pe,Plus(p,C1),Log(pf)),CN1)),Times(CN1,a,pn,Power(Times(b,pd,pe,Log(pf)),CN1),Int(Times(Power(x,Plus(m,pn,Times(CN1,C1))),Power(Plus(Times(a,Power(x,pn)),Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),p)),x)),Times(CN1,m,Power(Times(b,pd,pe,Plus(p,C1),Log(pf)),CN1),Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(Plus(Times(a,Power(x,pn)),Times(b,Power(pf,Times(pe,Plus(c,Times(pd,x)))))),Plus(p,C1))),x))),And(FreeQ(List(pf,a,b,c,pd,pe,m,pn,p),x),NonzeroQ(Plus(p,C1))))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,u_),b_DEFAULT),Times(Power(pf_,v_),c_DEFAULT),a_DEFAULT),CN1),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(q,Rt(Plus(Sqr(b),Times(CN1,C4,a,c)),C2))),Condition(Plus(Times(C2,c,Power(q,CN1),Int(Times(Power(x,m),Power(Plus(b,Times(CN1,q),Times(C2,c,Power(pf,u))),CN1)),x)),Times(CN1,C2,c,Power(q,CN1),Int(Times(Power(x,m),Power(Plus(b,q,Times(C2,c,Power(pf,u))),CN1)),x))),NonzeroQ(q))),And(And(And(FreeQ(List(pf,a,b,c),x),ZeroQ(Plus(v,Times(CN1,C2,u)))),LinearQ(u,x)),PositiveIntegerQ(m)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,u_),b_DEFAULT),Times(Power(pf_,v_),c_DEFAULT),a_DEFAULT),CN1),Power(x_,m_DEFAULT),Power(pf_,u_)),x_Symbol),
    Condition(Module(List(Set(q,Rt(Plus(Sqr(b),Times(CN1,C4,a,c)),C2))),Condition(Plus(Times(Plus(C1,Times(CN1,b,Power(q,CN1))),Int(Times(Power(x,m),Power(Plus(b,Times(CN1,q),Times(C2,c,Power(pf,u))),CN1)),x)),Times(Plus(C1,Times(b,Power(q,CN1))),Int(Times(Power(x,m),Power(Plus(b,q,Times(C2,c,Power(pf,u))),CN1)),x))),NonzeroQ(q))),And(And(And(FreeQ(List(pf,a,b,c),x),ZeroQ(Plus(v,Times(CN1,C2,u)))),LinearQ(u,x)),PositiveIntegerQ(m)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,Plus(Times(x_,pd_DEFAULT),c_DEFAULT)),a_DEFAULT),Times(Power(pf_,v_),b_DEFAULT)),CN1),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("§showsteps"),False),Set($s("§stepcounter"),Null)),Int(Power(Plus(Times(a,Power(pf,Plus(c,Times(pd,x)))),Times(b,Power(pf,v))),CN1),x)))),Plus(Times(Power(x,m),u),Times(CN1,m,Int(Times(Power(x,Plus(m,Times(CN1,C1))),u),x)))),And(And(And(FreeQ(List(pf,a,b,c,pd),x),ZeroQ(Plus(c,Times(pd,x),v))),RationalQ(m)),Greater(m,C0)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,v_),b_DEFAULT),Times(Power(pf_,w_),c_DEFAULT),a_),CN1),u_),x_Symbol),
    Condition(Int(Times(u,Power(pf,v),Power(Plus(c,Times(a,Power(pf,v)),Times(b,Power(pf,Times(C2,v)))),CN1)),x),And(And(And(And(FreeQ(List(pf,a,b,c),x),LinearQ(v,x)),LinearQ(w,x)),ZeroQ(Plus(v,w))),If(RationalQ(Coefficient(v,x,C1)),Greater(Coefficient(v,x,C1),C0),Less(LeafCount(v),LeafCount(w)))))),
ISetDelayed(Int(Times(Power(Plus(Times(Sqr(x_),c_DEFAULT),Times(b_DEFAULT,x_),a_DEFAULT),CN1),Power(pf_,Times(Power(Plus(Times(x_,pe_DEFAULT),pd_DEFAULT),pn_DEFAULT),g_DEFAULT))),x_Symbol),
    Condition(Int(ExpandIntegrand(Power(pf,Times(g,Power(Plus(pd,Times(pe,x)),pn))),Power(Plus(a,Times(b,x),Times(c,Sqr(x))),CN1),x),x),FreeQ(List(pf,a,b,c,pd,pe,g,pn),x))),
ISetDelayed(Int(Times(Power(Plus(Times(Sqr(x_),c_DEFAULT),a_),CN1),Power(pf_,Times(Power(Plus(Times(x_,pe_DEFAULT),pd_DEFAULT),pn_DEFAULT),g_DEFAULT))),x_Symbol),
    Condition(Int(ExpandIntegrand(Power(pf,Times(g,Power(Plus(pd,Times(pe,x)),pn))),Power(Plus(a,Times(c,Sqr(x))),CN1),x),x),FreeQ(List(pf,a,c,pd,pe,g,pn),x))),
ISetDelayed(Int(Times(Power(Plus(Times(Sqr(x_),c_),Times(b_DEFAULT,x_),a_DEFAULT),CN1),Power(u_,m_DEFAULT),Power(pf_,Times(Power(Plus(Times(x_,pe_DEFAULT),pd_DEFAULT),pn_DEFAULT),g_DEFAULT))),x_Symbol),
    Condition(Int(ExpandIntegrand(Power(pf,Times(g,Power(Plus(pd,Times(pe,x)),pn))),Times(Power(u,m),Power(Plus(a,Times(b,x),Times(c,Sqr(x))),CN1)),x),x),And(And(FreeQ(List(pf,a,b,c,pd,pe,g,pn),x),PolynomialQ(u,x)),IntegerQ(m)))),
ISetDelayed(Int(Times(Power(Plus(Times(Sqr(x_),c_),a_),CN1),Power(u_,m_DEFAULT),Power(pf_,Times(Power(Plus(Times(x_,pe_DEFAULT),pd_DEFAULT),pn_DEFAULT),g_DEFAULT))),x_Symbol),
    Condition(Int(ExpandIntegrand(Power(pf,Times(g,Power(Plus(pd,Times(pe,x)),pn))),Times(Power(u,m),Power(Plus(a,Times(c,Sqr(x))),CN1)),x),x),And(And(FreeQ(List(pf,a,c,pd,pe,g,pn),x),PolynomialQ(u,x)),IntegerQ(m)))),
ISetDelayed(Int(Power(pf_,Times(Plus(Times(Power(x_,C4),b_DEFAULT),a_DEFAULT),Power(x_,CN2))),x_Symbol),
    Condition(Plus(Times(Sqrt(Pi),Power(E,Times(C2,Sqrt(Times(CN1,a,Log(pf))),Sqrt(Times(CN1,b,Log(pf))))),Erf(Times(Plus(Sqrt(Times(CN1,a,Log(pf))),Times(Sqrt(Times(CN1,b,Log(pf))),Sqr(x))),Power(x,CN1))),Power(Times(C4,Sqrt(Times(CN1,b,Log(pf)))),CN1)),Times(CN1,Sqrt(Pi),Power(E,Times(CN2,Sqrt(Times(CN1,a,Log(pf))),Sqrt(Times(CN1,b,Log(pf))))),Erf(Times(Plus(Sqrt(Times(CN1,a,Log(pf))),Times(CN1,Sqrt(Times(CN1,b,Log(pf))),Sqr(x))),Power(x,CN1))),Power(Times(C4,Sqrt(Times(CN1,b,Log(pf)))),CN1))),FreeQ(List(pf,a,b),x))),
ISetDelayed(Int(Times(Power(Plus(Power(E,x_),Power(x_,m_DEFAULT)),pn_),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(CN1,Power(Plus(Power(E,x),Power(x,m)),Plus(pn,C1)),Power(Plus(pn,C1),CN1)),Int(Power(Plus(Power(E,x),Power(x,m)),Plus(pn,C1)),x),Times(m,Int(Times(Power(x,Plus(m,Times(CN1,C1))),Power(Plus(Power(E,x),Power(x,m)),pn)),x))),And(And(And(RationalQ(m,pn),Greater(m,C0)),Less(pn,C0)),Unequal(pn,CN1)))),
ISetDelayed(Int(Log(Plus(Times(Power(Power(pf_,Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),c_DEFAULT)),pn_DEFAULT),pe_DEFAULT),pd_)),x_Symbol),
    Condition(Plus(Times(x,Log(Plus(pd,Times(pe,Power(Power(pf,Times(c,Plus(a,Times(b,x)))),pn))))),Times(CN1,x,Log(Plus(C1,Times(pe,Power(pd,CN1),Power(Power(pf,Times(c,Plus(a,Times(b,x)))),pn))))),Int(Log(Plus(C1,Times(pe,Power(pd,CN1),Power(Power(pf,Times(c,Plus(a,Times(b,x)))),pn)))),x)),And(FreeQ(List(pf,a,b,c,pd,pe,pn),x),NonzeroQ(Plus(pd,Times(CN1,C1)))))),
ISetDelayed(Int(Times(Power(Times(Power(pf_,v_),a_DEFAULT),pn_),u_DEFAULT),x_Symbol),
    Condition(Times(Power(Times(a,Power(pf,v)),pn),Power(Power(pf,Times(pn,v)),CN1),Int(Times(u,Power(pf,Times(pn,v))),x)),And(FreeQ(List(pf,a,pn),x),Not(IntegerQ(pn))))),
ISetDelayed(Int(u_,x_Symbol),
    Condition(Module(List(Set(v,FunctionOfExponential(u,x))),Times(v,Power(D(v,x),CN1),Subst(Int(Times(FunctionOfExponentialFunction(u,x),Power(x,CN1)),x),x,v))),FunctionOfExponentialQ(u,x))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,v_),a_DEFAULT),Times(Power(pf_,w_),b_DEFAULT)),pn_),u_DEFAULT),x_Symbol),
    Condition(Int(Times(u,Power(pf,Times(pn,v)),Power(Plus(a,Times(b,Power(pf,ExpandToSum(Plus(w,Times(CN1,v)),x)))),pn)),x),And(And(FreeQ(List(pf,a,b,pn),x),NegativeIntegerQ(pn)),LinearQ(List(v,w),x)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,v_),a_DEFAULT),Times(Power(pg_,w_),b_DEFAULT)),pn_),u_DEFAULT),x_Symbol),
    Condition(Int(Times(u,Power(pf,Times(pn,v)),Power(Plus(a,Times(b,Power(E,ExpandToSum(Plus(Times(Log(pg),w),Times(CN1,Log(pf),v)),x)))),pn)),x),And(And(FreeQ(List(pf,pg,a,b,pn),x),NegativeIntegerQ(pn)),LinearQ(List(v,w),x)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,v_),a_DEFAULT),Times(Power(pf_,w_),b_DEFAULT)),pn_),u_DEFAULT),x_Symbol),
    Condition(Times(Power(Plus(Times(a,Power(pf,v)),Times(b,Power(pf,w))),pn),Power(Times(Power(pf,Times(pn,v)),Power(Plus(a,Times(b,Power(pf,ExpandToSum(Plus(w,Times(CN1,v)),x)))),pn)),CN1),Int(Times(u,Power(pf,Times(pn,v)),Power(Plus(a,Times(b,Power(pf,ExpandToSum(Plus(w,Times(CN1,v)),x)))),pn)),x)),And(And(FreeQ(List(pf,a,b,pn),x),Not(IntegerQ(pn))),LinearQ(List(v,w),x)))),
ISetDelayed(Int(Times(Power(Plus(Times(Power(pf_,v_),a_DEFAULT),Times(Power(pg_,w_),b_DEFAULT)),pn_),u_DEFAULT),x_Symbol),
    Condition(Times(Power(Plus(Times(a,Power(pf,v)),Times(b,Power(pg,w))),pn),Power(Times(Power(pf,Times(pn,v)),Power(Plus(a,Times(b,Power(E,ExpandToSum(Plus(Times(Log(pg),w),Times(CN1,Log(pf),v)),x)))),pn)),CN1),Int(Times(u,Power(pf,Times(pn,v)),Power(Plus(a,Times(b,Power(E,ExpandToSum(Plus(Times(Log(pg),w),Times(CN1,Log(pf),v)),x)))),pn)),x)),And(And(FreeQ(List(pf,pg,a,b,pn),x),Not(IntegerQ(pn))),LinearQ(List(v,w),x)))),
ISetDelayed(Int(Times(Power(pf_,v_),Power(pg_,w_),u_DEFAULT),x_Symbol),
    Condition(Int(Times(u,NormalizeIntegrand(Power(E,Plus(Times(v,Log(pf)),Times(w,Log(pg)))),x)),x),And(FreeQ(List(pf,pg),x),Or(BinomialQ(Plus(v,w),x),And(PolynomialQ(Plus(v,w),x),LessEqual(Exponent(Plus(v,w),x),C2)))))),
ISetDelayed(Int(Times(Plus(v_,w_),Power(pf_,u_),y_DEFAULT),x_Symbol),
    Condition(Module(List(Set(z,Times(v,y,Power(Times(Log(pf),D(u,x)),CN1)))),Condition(Times(Power(pf,u),z),ZeroQ(Plus(D(z,x),Times(CN1,w,y))))),FreeQ(pf,x))),
ISetDelayed(Int(Times(Power(v_,pn_DEFAULT),Power(pf_,u_),w_),x_Symbol),
    Condition(Module(List(Set(z,Plus(Times(Log(pf),v,D(u,x)),Times(Plus(pn,C1),D(v,x))))),Condition(Times(Coefficient(w,x,Exponent(w,x)),Power(Coefficient(z,x,Exponent(z,x)),CN1),Power(pf,u),Power(v,Plus(pn,C1))),And(Equal(Exponent(w,x),Exponent(z,x)),ZeroQ(Plus(Times(w,Coefficient(z,x,Exponent(z,x))),Times(CN1,z,Coefficient(w,x,Exponent(w,x)))))))),And(And(And(FreeQ(List(pf,pn),x),PolynomialQ(u,x)),PolynomialQ(v,x)),PolynomialQ(w,x))))
  );
}
