package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface ArcTanRules {
  final public static IAST RULES = List(
    Set(ArcTan(Times(QQ(1L,5L),Sqrt(C5),Sqrt(Plus(C5,Times(CN2,Sqrt(C5)))))),
      Times(QQ(1L,10L),Pi)),
    Set(ArcTan(Times(QQ(1L,5L),Sqrt(C5),Sqrt(Plus(C5,Times(C2,Sqrt(C5)))))),
      Times(QQ(3L,10L),Pi)),
    Set(ArcTan(Sqrt(C3)),
      Times(C1D3,Pi)),
    Set(ArcTan(CInfinity),
      Times(C1D2,Pi)),
    Set(ArcTan(Plus(C2,Times(CN1,Sqrt(C3)))),
      Times(QQ(1L,12L),Pi)),
    Set(ArcTan(Plus(C2,Sqrt(C3))),
      Times(QQ(5L,12L),Pi)),
    Set(ArcTan(Plus(C1,Sqrt(C2))),
      Times(QQ(3L,8L),Pi)),
    Set(ArcTan(C0),
      C0),
    Set(ArcTan(Sqrt(Plus(C5,Times(CN2,Sqrt(C5))))),
      Times(QQ(1L,5L),Pi)),
    Set(ArcTan(C0,C0),
      C0),
    Set(ArcTan(C1),
      Times(C1D4,Pi)),
    Set(ArcTan(Sqrt(Plus(C5,Times(C2,Sqrt(C5))))),
      Times(QQ(2L,5L),Pi)),
    Set(ArcTan(Times(C1D3,Sqrt(C3))),
      Times(QQ(1L,6L),Pi)),
    Set(ArcTan(Plus(CN1,Sqrt(C2))),
      Times(QQ(1L,8L),Pi)),
    Set(ArcTan(C1,C1),
      Times(C1D4,Pi)),
    Set(ArcTan(CN1,CN1),
      Times(QQ(-3L,4L),Pi))
  );
}