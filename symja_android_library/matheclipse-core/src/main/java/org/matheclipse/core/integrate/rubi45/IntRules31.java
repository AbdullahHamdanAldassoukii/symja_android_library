package org.matheclipse.core.integrate.rubi45;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctions.*;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;

/** 
 * IndefiniteIntegrationRules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IntRules31 { 
  public static IAST RULES = List( 
ISetDelayed(Int(Times(Plus(Times(Sqr(x_),g_DEFAULT),f_),Power(Times(Plus(Times(Sqr(x_),pd_DEFAULT),Times(x_,pe_DEFAULT),pd_),Sqrt(Plus(Times(Power(x_,C4),a_DEFAULT),Times(Power(x_,C3),b_DEFAULT),Times(Sqr(x_),c_DEFAULT),Times(b_DEFAULT,x_),a_))),CN1)),x_Symbol),
    Condition(Times(a,f,Power(Times(pd,Rt(Times(Sqr(a),Plus(Times(C2,a),Times(CN1,c))),C2)),CN1),ArcTan(Times(Plus(Times(a,b),Times(Plus(Times(C4,Sqr(a)),Sqr(b),Times(CN1,C2,a,c)),x),Times(a,b,Sqr(x))),Power(Times(C2,Rt(Times(Sqr(a),Plus(Times(C2,a),Times(CN1,c))),C2),Sqrt(Plus(a,Times(b,x),Times(c,Sqr(x)),Times(b,Power(x,C3)),Times(a,Power(x,C4))))),CN1)))),And(And(And(FreeQ(List(a,b,c,pd,pe,f,g),x),ZeroQ(Plus(Times(b,pd),Times(CN1,a,pe)))),ZeroQ(Plus(f,g))),PosQ(Times(Sqr(a),Plus(Times(C2,a),Times(CN1,c))))))),
ISetDelayed(Int(Times(Plus(Times(Sqr(x_),g_DEFAULT),f_),Power(Times(Plus(Times(Sqr(x_),pd_DEFAULT),Times(x_,pe_DEFAULT),pd_),Sqrt(Plus(Times(Power(x_,C4),a_DEFAULT),Times(Power(x_,C3),b_DEFAULT),Times(Sqr(x_),c_DEFAULT),Times(b_DEFAULT,x_),a_))),CN1)),x_Symbol),
    Condition(Times(CN1,a,f,Power(Times(pd,Rt(Times(CN1,Sqr(a),Plus(Times(C2,a),Times(CN1,c))),C2)),CN1),ArcTanh(Times(Plus(Times(a,b),Times(Plus(Times(C4,Sqr(a)),Sqr(b),Times(CN1,C2,a,c)),x),Times(a,b,Sqr(x))),Power(Times(C2,Rt(Times(CN1,Sqr(a),Plus(Times(C2,a),Times(CN1,c))),C2),Sqrt(Plus(a,Times(b,x),Times(c,Sqr(x)),Times(b,Power(x,C3)),Times(a,Power(x,C4))))),CN1)))),And(And(And(FreeQ(List(a,b,c,pd,pe,f,g),x),ZeroQ(Plus(Times(b,pd),Times(CN1,a,pe)))),ZeroQ(Plus(f,g))),NegQ(Times(Sqr(a),Plus(Times(C2,a),Times(CN1,c))))))),
ISetDelayed(Int(Power(Plus(Times(Sqr(x_),c_DEFAULT),Times(b_DEFAULT,x_),Times(Power(x_,C3),pd_DEFAULT),Times(Power(x_,C4),pe_DEFAULT),a_DEFAULT),p_),x_Symbol),
    Condition(Subst(Int(SimplifyIntegrand(Power(Plus(a,Times(Power(pd,C4),Power(Times(ZZ(256L),Power(pe,C3)),CN1)),Times(CN1,b,pd,Power(Times(C8,pe),CN1)),Times(Plus(c,Times(CN1,C3,Sqr(pd),Power(Times(C8,pe),CN1))),Sqr(x)),Times(pe,Power(x,C4))),p),x),x),x,Plus(Times(pd,Power(Times(C4,pe),CN1)),x)),And(And(And(FreeQ(List(a,b,c,pd,pe,p),x),ZeroQ(Plus(Power(pd,C3),Times(CN1,C4,c,pd,pe),Times(C8,b,Sqr(pe))))),UnsameQ(p,C2)),UnsameQ(p,C3)))),
ISetDelayed(Int(Power(v_,p_),x_Symbol),
    Condition(Module(List(Set(a,Coefficient(v,x,C0)),Set(b,Coefficient(v,x,C1)),Set(c,Coefficient(v,x,C2)),Set(pd,Coefficient(v,x,C3)),Set(pe,Coefficient(v,x,C4))),Condition(Subst(Int(SimplifyIntegrand(Power(Plus(a,Times(Power(pd,C4),Power(Times(ZZ(256L),Power(pe,C3)),CN1)),Times(CN1,b,pd,Power(Times(C8,pe),CN1)),Times(Plus(c,Times(CN1,C3,Sqr(pd),Power(Times(C8,pe),CN1))),Sqr(x)),Times(pe,Power(x,C4))),p),x),x),x,Plus(Times(pd,Power(Times(C4,pe),CN1)),x)),And(ZeroQ(Plus(Power(pd,C3),Times(CN1,C4,c,pd,pe),Times(C8,b,Sqr(pe)))),NonzeroQ(pd)))),And(And(And(And(FreeQ(p,x),PolynomialQ(v,x)),Equal(Exponent(v,x),C4)),UnsameQ(p,C2)),UnsameQ(p,C3)))),
ISetDelayed(Int(Times(Power(Plus(Times(Sqr(x_),c_DEFAULT),Times(b_DEFAULT,x_),Times(Power(x_,C3),pd_DEFAULT),Times(Power(x_,C4),pe_DEFAULT),a_DEFAULT),p_),u_),x_Symbol),
    Condition(Subst(Int(SimplifyIntegrand(Times(ReplaceAll(u,Rule(x,Plus(Times(CN1,pd,Power(Times(C4,pe),CN1)),x))),Power(Plus(a,Times(Power(pd,C4),Power(Times(ZZ(256L),Power(pe,C3)),CN1)),Times(CN1,b,pd,Power(Times(C8,pe),CN1)),Times(Plus(c,Times(CN1,C3,Sqr(pd),Power(Times(C8,pe),CN1))),Sqr(x)),Times(pe,Power(x,C4))),p)),x),x),x,Plus(Times(pd,Power(Times(C4,pe),CN1)),x)),And(And(And(FreeQ(List(a,b,c,pd,pe,p),x),PolynomialQ(u,x)),ZeroQ(Plus(Power(pd,C3),Times(CN1,C4,c,pd,pe),Times(C8,b,Sqr(pe))))),Not(PositiveIntegerQ(p))))),
ISetDelayed(Int(Times(Power(v_,p_),u_),x_Symbol),
    Condition(Module(List(Set(a,Coefficient(v,x,C0)),Set(b,Coefficient(v,x,C1)),Set(c,Coefficient(v,x,C2)),Set(pd,Coefficient(v,x,C3)),Set(pe,Coefficient(v,x,C4))),Condition(Subst(Int(SimplifyIntegrand(Times(ReplaceAll(u,Rule(x,Plus(Times(CN1,pd,Power(Times(C4,pe),CN1)),x))),Power(Plus(a,Times(Power(pd,C4),Power(Times(ZZ(256L),Power(pe,C3)),CN1)),Times(CN1,b,pd,Power(Times(C8,pe),CN1)),Times(Plus(c,Times(CN1,C3,Sqr(pd),Power(Times(C8,pe),CN1))),Sqr(x)),Times(pe,Power(x,C4))),p)),x),x),x,Plus(Times(pd,Power(Times(C4,pe),CN1)),x)),And(ZeroQ(Plus(Power(pd,C3),Times(CN1,C4,c,pd,pe),Times(C8,b,Sqr(pe)))),NonzeroQ(pd)))),And(And(And(And(FreeQ(p,x),PolynomialQ(u,x)),PolynomialQ(v,x)),Equal(Exponent(v,x),C4)),Not(PositiveIntegerQ(p))))),
ISetDelayed(Int(Power(Plus(Times(Sqr(x_),c_DEFAULT),Times(b_DEFAULT,x_),Times(Power(x_,C3),pd_DEFAULT),Times(Power(x_,C4),pe_DEFAULT),a_),p_),x_Symbol),
    Condition(Times(ZZ(-16L),Sqr(a),Subst(Int(Times(Power(Plus(b,Times(CN1,C4,a,x)),CN2),Power(Times(a,Plus(Times(CN3,Power(b,C4)),Times(ZZ(16L),a,Sqr(b),c),Times(CN1,ZZ(64L),Sqr(a),b,pd),Times(ZZ(256L),Power(a,C3),pe),Times(CN1,ZZ(32L),Sqr(a),Plus(Times(C3,Sqr(b)),Times(CN1,C8,a,c)),Sqr(x)),Times(ZZ(256L),Power(a,C4),Power(x,C4))),Power(Plus(b,Times(CN1,C4,a,x)),CN4)),p)),x),x,Plus(Times(b,Power(Times(C4,a),CN1)),Power(x,CN1)))),And(And(FreeQ(List(a,b,c,pd,pe),x),ZeroQ(Plus(Power(b,C3),Times(CN1,C4,a,b,c),Times(C8,Sqr(a),pd)))),IntegerQ(Times(C2,p))))),
ISetDelayed(Int(Power(v_,p_),x_Symbol),
    Condition(Module(List(Set(a,Coefficient(v,x,C0)),Set(b,Coefficient(v,x,C1)),Set(c,Coefficient(v,x,C2)),Set(pd,Coefficient(v,x,C3)),Set(pe,Coefficient(v,x,C4))),Condition(Times(ZZ(-16L),Sqr(a),Subst(Int(Times(Power(Plus(b,Times(CN1,C4,a,x)),CN2),Power(Times(a,Plus(Times(CN3,Power(b,C4)),Times(ZZ(16L),a,Sqr(b),c),Times(CN1,ZZ(64L),Sqr(a),b,pd),Times(ZZ(256L),Power(a,C3),pe),Times(CN1,ZZ(32L),Sqr(a),Plus(Times(C3,Sqr(b)),Times(CN1,C8,a,c)),Sqr(x)),Times(ZZ(256L),Power(a,C4),Power(x,C4))),Power(Plus(b,Times(CN1,C4,a,x)),CN4)),p)),x),x,Plus(Times(b,Power(Times(C4,a),CN1)),Power(x,CN1)))),And(And(NonzeroQ(a),NonzeroQ(b)),ZeroQ(Plus(Power(b,C3),Times(CN1,C4,a,b,c),Times(C8,Sqr(a),pd)))))),And(And(And(FreeQ(p,x),PolynomialQ(v,x)),Equal(Exponent(v,x),C4)),IntegerQ(Times(C2,p))))),
ISetDelayed(Int(Times(Plus(Times(Power(x_,C3),$p("D",true)),Times(x_,pb_DEFAULT),Times(Sqr(x_),pc_DEFAULT),pa_DEFAULT),Power(Plus(Times(Sqr(x_),c_DEFAULT),Times(b_DEFAULT,x_),Times(Power(x_,C3),pd_DEFAULT),Times(Power(x_,C4),pe_DEFAULT),a_),CN1)),x_Symbol),
    Condition(Module(List(Set(q,Sqrt(Plus(Times(C8,Sqr(a)),Sqr(b),Times(CN1,C4,a,c))))),Plus(Times(Power(q,CN1),Int(Times(Plus(Times(b,pa),Times(CN1,C2,a,pb),Times(C2,a,$s("D")),Times(pa,q),Times(Plus(Times(C2,a,pa),Times(CN1,C2,a,pc),Times(b,$s("D")),Times($s("D"),q)),x)),Power(Plus(Times(C2,a),Times(Plus(b,q),x),Times(C2,a,Sqr(x))),CN1)),x)),Times(CN1,Power(q,CN1),Int(Times(Plus(Times(b,pa),Times(CN1,C2,a,pb),Times(C2,a,$s("D")),Times(CN1,pa,q),Times(Plus(Times(C2,a,pa),Times(CN1,C2,a,pc),Times(b,$s("D")),Times(CN1,$s("D"),q)),x)),Power(Plus(Times(C2,a),Times(Plus(b,Times(CN1,q)),x),Times(C2,a,Sqr(x))),CN1)),x)))),And(And(And(FreeQ(List(a,b,c,pa,pb,pc,$s("D")),x),ZeroQ(Plus(pd,Times(CN1,b)))),ZeroQ(Plus(pe,Times(CN1,a)))),SumQ(Factor(Plus(a,Times(b,x),Times(c,Sqr(x)),Times(b,Power(x,C3)),Times(a,Power(x,C4)))))))),
ISetDelayed(Int(Times(Plus(Times(Power(x_,C3),$p("D",true)),Times(x_,pb_DEFAULT),pa_DEFAULT),Power(Plus(Times(Sqr(x_),c_DEFAULT),Times(b_DEFAULT,x_),Times(Power(x_,C3),pd_DEFAULT),Times(Power(x_,C4),pe_DEFAULT),a_),CN1)),x_Symbol),
    Condition(Module(List(Set(q,Sqrt(Plus(Times(C8,Sqr(a)),Sqr(b),Times(CN1,C4,a,c))))),Plus(Times(Power(q,CN1),Int(Times(Plus(Times(b,pa),Times(CN1,C2,a,pb),Times(C2,a,$s("D")),Times(pa,q),Times(Plus(Times(C2,a,pa),Times(b,$s("D")),Times($s("D"),q)),x)),Power(Plus(Times(C2,a),Times(Plus(b,q),x),Times(C2,a,Sqr(x))),CN1)),x)),Times(CN1,Power(q,CN1),Int(Times(Plus(Times(b,pa),Times(CN1,C2,a,pb),Times(C2,a,$s("D")),Times(CN1,pa,q),Times(Plus(Times(C2,a,pa),Times(b,$s("D")),Times(CN1,$s("D"),q)),x)),Power(Plus(Times(C2,a),Times(Plus(b,Times(CN1,q)),x),Times(C2,a,Sqr(x))),CN1)),x)))),And(And(And(FreeQ(List(a,b,c,pa,pb,$s("D")),x),ZeroQ(Plus(pd,Times(CN1,b)))),ZeroQ(Plus(pe,Times(CN1,a)))),SumQ(Factor(Plus(a,Times(b,x),Times(c,Sqr(x)),Times(b,Power(x,C3)),Times(a,Power(x,C4)))))))),
ISetDelayed(Int(Times(Plus(Times(Power(x_,C3),$p("D",true)),Times(x_,pb_DEFAULT),Times(Sqr(x_),pc_DEFAULT),pa_DEFAULT),Power(Plus(Times(Sqr(x_),c_DEFAULT),Times(b_DEFAULT,x_),Times(Power(x_,C3),pd_DEFAULT),Times(Power(x_,C4),pe_DEFAULT),a_),CN1),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(q,Sqrt(Plus(Times(C8,Sqr(a)),Sqr(b),Times(CN1,C4,a,c))))),Plus(Times(Power(q,CN1),Int(Times(Power(x,m),Plus(Times(b,pa),Times(CN1,C2,a,pb),Times(C2,a,$s("D")),Times(pa,q),Times(Plus(Times(C2,a,pa),Times(CN1,C2,a,pc),Times(b,$s("D")),Times($s("D"),q)),x)),Power(Plus(Times(C2,a),Times(Plus(b,q),x),Times(C2,a,Sqr(x))),CN1)),x)),Times(CN1,Power(q,CN1),Int(Times(Power(x,m),Plus(Times(b,pa),Times(CN1,C2,a,pb),Times(C2,a,$s("D")),Times(CN1,pa,q),Times(Plus(Times(C2,a,pa),Times(CN1,C2,a,pc),Times(b,$s("D")),Times(CN1,$s("D"),q)),x)),Power(Plus(Times(C2,a),Times(Plus(b,Times(CN1,q)),x),Times(C2,a,Sqr(x))),CN1)),x)))),And(And(And(FreeQ(List(a,b,c,pa,pb,pc,$s("D"),m),x),ZeroQ(Plus(pd,Times(CN1,b)))),ZeroQ(Plus(pe,Times(CN1,a)))),SumQ(Factor(Plus(a,Times(b,x),Times(c,Sqr(x)),Times(b,Power(x,C3)),Times(a,Power(x,C4)))))))),
ISetDelayed(Int(Times(Plus(Times(Power(x_,C3),$p("D",true)),Times(x_,pb_DEFAULT),pa_DEFAULT),Power(Plus(Times(Sqr(x_),c_DEFAULT),Times(b_DEFAULT,x_),Times(Power(x_,C3),pd_DEFAULT),Times(Power(x_,C4),pe_DEFAULT),a_),CN1),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(q,Sqrt(Plus(Times(C8,Sqr(a)),Sqr(b),Times(CN1,C4,a,c))))),Plus(Times(Power(q,CN1),Int(Times(Power(x,m),Plus(Times(b,pa),Times(CN1,C2,a,pb),Times(C2,a,$s("D")),Times(pa,q),Times(Plus(Times(C2,a,pa),Times(b,$s("D")),Times($s("D"),q)),x)),Power(Plus(Times(C2,a),Times(Plus(b,q),x),Times(C2,a,Sqr(x))),CN1)),x)),Times(CN1,Power(q,CN1),Int(Times(Power(x,m),Plus(Times(b,pa),Times(CN1,C2,a,pb),Times(C2,a,$s("D")),Times(CN1,pa,q),Times(Plus(Times(C2,a,pa),Times(b,$s("D")),Times(CN1,$s("D"),q)),x)),Power(Plus(Times(C2,a),Times(Plus(b,Times(CN1,q)),x),Times(C2,a,Sqr(x))),CN1)),x)))),And(And(And(FreeQ(List(a,b,c,pa,pb,$s("D"),m),x),ZeroQ(Plus(pd,Times(CN1,b)))),ZeroQ(Plus(pe,Times(CN1,a)))),SumQ(Factor(Plus(a,Times(b,x),Times(c,Sqr(x)),Times(b,Power(x,C3)),Times(a,Power(x,C4))))))))
  );
}
