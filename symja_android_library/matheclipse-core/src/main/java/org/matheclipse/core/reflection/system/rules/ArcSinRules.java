package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface ArcSinRules {
  final public static IAST RULES = List(
    ISet(ArcSin(C0),
      C0),
    ISet(ArcSin(Times(C1D2,Plus(CN1,CSqrt3),C1DSqrt2)),
      Times(QQ(1L,12L),Pi)),
    ISet(ArcSin(Times(C1D4,Plus(CN1,CSqrt5))),
      Times(QQ(1L,10L),Pi)),
    ISet(ArcSin(Times(C1D2,Sqrt(Plus(C2,Times(CN1,CSqrt2))))),
      Times(QQ(1L,8L),Pi)),
    ISet(ArcSin(C1D2),
      Times(QQ(1L,6L),Pi)),
    ISet(ArcSin(Times(C1D2,Sqrt(C1D2),Sqrt(Plus(C5,Times(CN1,CSqrt5))))),
      Times(QQ(1L,5L),Pi)),
    ISet(ArcSin(Times(C1D2,CSqrt2)),
      Times(C1D4,Pi)),
    ISet(ArcSin(Times(C1D2,CSqrt3)),
      Times(C1D3,Pi)),
    ISet(ArcSin(Times(C1D2,Sqrt(Plus(C2,CSqrt2)))),
      Times(QQ(3L,8L),Pi)),
    ISet(ArcSin(Times(C1D2,Sqrt(C1D2),Sqrt(Plus(C5,CSqrt5)))),
      Times(QQ(2L,5L),Pi)),
    ISet(ArcSin(Times(C1D2,Plus(C1,CSqrt3),C1DSqrt2)),
      Times(QQ(5L,12L),Pi)),
    ISet(ArcSin(C1),
      Times(C1D2,Pi)),
    ISet(ArcSin(CI),
      Times(CI,Log(Plus(C1,CSqrt2)))),
    ISet(ArcSin(CInfinity),
      Times(CNI,CInfinity)),
    ISet(ArcSin(Times(CI,CInfinity)),
      Times(CI,CInfinity)),
    ISet(ArcSin(CComplexInfinity),
      CComplexInfinity)
  );
}