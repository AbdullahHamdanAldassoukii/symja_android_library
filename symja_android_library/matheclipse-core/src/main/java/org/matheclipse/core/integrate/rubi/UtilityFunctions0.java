package org.matheclipse.core.integrate.rubi;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctions.*;

import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;
/** 
 * UtilityFunctions rules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class UtilityFunctions0 { 
  public static IAST RULES = List( 
ISetDelayed(MakeList($p(n,IntegerHead),u_),
    If(Equal(n,C0),List(),Append(MakeList(Plus(n,Times(CN1,C1)),u),u))),
ISetDelayed(Second(u_),
    Part(u,C2)),
ISetDelayed(Map2($p("func"),$p("lst1"),$p("lst2")),
    ReapList(Do(Sow($($s("func"),Part($s("lst1"),i),Part($s("lst2"),i))),List(i,Length($s("lst1")))))),
ISetDelayed(ReapList(u_),
    Module(List(Set($s("lst"),Part(Reap(u),C2))),If(SameQ($s("lst"),List()),$s("lst"),Part($s("lst"),C1)))),
ISetDelayed(MapAnd(f_,$p("lst")),
    Catch(CompoundExpression(Scan(Function(If($(f,Slot1),Null,Throw(False))),$s("lst")),True))),
ISetDelayed(MapAnd(f_,$p("lst"),x_),
    Catch(CompoundExpression(Scan(Function(If($(f,Slot1,x),Null,Throw(False))),$s("lst")),True))),
ISetDelayed(MapOr(f_,$p("lst")),
    Catch(CompoundExpression(Scan(Function(If($(f,Slot1),Throw(True),Null)),$s("lst")),False))),
ISetDelayed(NotIntegrableQ(u_,x_Symbol),
    Or(MatchQ(u,Condition(Times(Power(x,m_),Power(Log(Plus(a_,Times(b_DEFAULT,x))),n_)),And(And(And(FreeQ(List(a,b),x),IntIntegerQ(List(m,n))),Less(m,C0)),Less(n,C0)))),MatchQ(u,Condition($(f_,Times(Power(x,m_DEFAULT),Log(Plus(a_DEFAULT,Times(b_DEFAULT,x))))),And(And(FreeQ(List(a,b),x),IntIntegerQ(m)),Or(TrigQ(f),HyperbolicQ(f))))))),
ISetDelayed(ZeroQ(u_),
    PossibleZeroQ(u)),
ISetDelayed(NonzeroQ(u_),
    Not(PossibleZeroQ(u))),
ISetDelayed(RealNumericQ(u_),
    And(NumericQ(u),PossibleZeroQ(Im(N(u))))),
ISetDelayed(ImaginaryNumericQ(u_),
    And(And(NumericQ(u),PossibleZeroQ(Re(N(u)))),Not(PossibleZeroQ(Im(N(u)))))),
ISetDelayed(PositiveQ(u_),
    Module(List(Set(v,Simplify(u))),And(RealNumericQ(v),Greater(Re(N(v)),C0)))),
ISetDelayed(PositiveOrZeroQ(u_),
    Module(List(Set(v,Simplify(u))),And(RealNumericQ(v),GreaterEqual(Re(N(v)),C0)))),
ISetDelayed(NegativeQ(u_),
    Module(List(Set(v,Simplify(u))),And(RealNumericQ(v),Less(Re(N(v)),C0)))),
ISetDelayed(NegativeOrZeroQ(u_),
    Module(List(Set(v,Simplify(u))),And(RealNumericQ(v),LessEqual(Re(N(v)),C0)))),
ISetDelayed(FractionQ(u_),
    If(ListQ(u),MapAnd($s("Integrate::FractionQ"),u),SameQ(Head(u),$s("Rational")))),
ISetDelayed(RationalQ(Plus(Times(Plus(n_,v_),m_),u_)),
    And(And(RationalQ(m),RationalQ(n)),RationalQ(Plus(u,Times(m,v))))),
ISetDelayed(RationalQ(u_),
    If(ListQ(u),MapAnd($s("Integrate::RationalQ"),u),Or(IntIntegerQ(u),SameQ(Head(u),$s("Rational"))))),
ISetDelayed(HalfIntegerQ(u_),
    If(ListQ(u),MapAnd($s("Integrate::HalfIntegerQ"),u),And(FractionQ(u),Equal(Denominator(u),C2)))),
ISetDelayed(FractionOrNegativeQ(u_),
    If(ListQ(u),MapAnd($s("Integrate::FractionOrNegativeQ"),u),Or(FractionQ(u),And(IntIntegerQ(u),Less(u,C0))))),
ISetDelayed(SqrtNumberQ(Power(m_,n_)),
    Or(And(IntIntegerQ(n),SqrtNumberQ(m)),And(HalfIntegerQ(n),RationalQ(m)))),
ISetDelayed(SqrtNumberQ(Times(u_,v_)),
    And(SqrtNumberQ(u),SqrtNumberQ(v))),
ISetDelayed(SqrtNumberQ(u_),
    Or(RationalQ(u),SameQ(u,CI))),
ISetDelayed(SqrtNumberSumQ(u_),
    And(And(SumQ(u),SqrtNumberQ(First(u))),SqrtNumberQ(Rest(u)))),
ISetDelayed(FalseQ(u_),
    SameQ(u,False)),
ISetDelayed(NotFalseQ(u_),
    UnsameQ(u,False)),
ISetDelayed(SumQ(u_),
    SameQ(Head(u),Plus)),
ISetDelayed(NonsumQ(u_),
    UnsameQ(Head(u),Plus)),
ISetDelayed(ProductQ(u_),
    SameQ(Head(u),Times)),
ISetDelayed(PowerQ(u_),
    SameQ(Head(u),Power)),
ISetDelayed(IntegerPowerQ(u_),
    And(PowerQ(u),IntIntegerQ(Part(u,C2)))),
ISetDelayed(PositiveIntegerPowerQ(u_),
    And(And(PowerQ(u),IntIntegerQ(Part(u,C2))),Greater(Part(u,C2),C0))),
ISetDelayed(FractionalPowerQ(u_),
    And(PowerQ(u),FractionQ(Part(u,C2)))),
ISetDelayed(RationalPowerQ(u_),
    And(PowerQ(u),RationalQ(Part(u,C2)))),
ISetDelayed(SqrtQ(u_),
    And(PowerQ(u),SameQ(Part(u,C2),Rational(C1,C2)))),
ISetDelayed(ExpQ(u_),
    And(PowerQ(u),SameQ(Part(u,C1),E))),
ISetDelayed(ImaginaryQ(u_),
    And(SameQ(Head(u),$s("Complex")),SameQ(Re(u),C0))),
ISetDelayed(FractionalPowerFreeQ(u_),
    If(AtomQ(u),True,If(And(FractionalPowerQ(u),Not(AtomQ(Part(u,C1)))),False,Catch(CompoundExpression(Scan(Function(If(FractionalPowerFreeQ(Slot1),Null,Throw(False))),u),True))))),
ISetDelayed(ComplexFreeQ(u_),
    If(AtomQ(u),UnsameQ(Head(u),$s("Complex")),Catch(CompoundExpression(Scan(Function(If(ComplexFreeQ(Slot1),Null,Throw(False))),u),True)))),
ISetDelayed(LogQ(u_),
    SameQ(Head(u),$s("Log"))),
ISetDelayed(ProductLogQ(u_),
    SameQ(Head(u),$s("ProductLog"))),
ISetDelayed(SinQ(u_),
    SameQ(Head(u),$s("Sin"))),
ISetDelayed(CosQ(u_),
    SameQ(Head(u),$s("Cos"))),
ISetDelayed(TanQ(u_),
    SameQ(Head(u),$s("Tan"))),
ISetDelayed(CotQ(u_),
    SameQ(Head(u),$s("Cot"))),
ISetDelayed(SecQ(u_),
    SameQ(Head(u),$s("Sec"))),
ISetDelayed(CscQ(u_),
    SameQ(Head(u),$s("Csc"))),
ISetDelayed(SinhQ(u_),
    SameQ(Head(u),$s("Sinh"))),
ISetDelayed(CoshQ(u_),
    SameQ(Head(u),$s("Cosh"))),
ISetDelayed(TanhQ(u_),
    SameQ(Head(u),$s("Tanh"))),
ISetDelayed(CothQ(u_),
    SameQ(Head(u),$s("Coth"))),
ISetDelayed(SechQ(u_),
    SameQ(Head(u),$s("Sech"))),
ISetDelayed(CschQ(u_),
    SameQ(Head(u),$s("Csch"))),
ISetDelayed(TrigQ(u_),
    MemberQ(List($s("Sin"),$s("Cos"),$s("Tan"),$s("Cot"),$s("Sec"),$s("Csc")),If(AtomQ(u),u,Head(u)))),
ISetDelayed(InverseTrigQ(u_),
    MemberQ(List($s("ArcSin"),$s("ArcCos"),$s("ArcTan"),$s("ArcCot"),$s("ArcSec"),$s("ArcCsc")),If(AtomQ(u),u,Head(u)))),
ISetDelayed(HyperbolicQ(u_),
    MemberQ(List($s("Sinh"),$s("Cosh"),$s("Tanh"),$s("Coth"),$s("Sech"),$s("Csch")),If(AtomQ(u),u,Head(u)))),
ISetDelayed(InverseHyperbolicQ(u_),
    MemberQ(List($s("ArcSinh"),$s("ArcCosh"),$s("ArcTanh"),$s("ArcCoth"),$s("ArcSech"),$s("ArcCsch")),If(AtomQ(u),u,Head(u)))),
ISetDelayed(SinCosQ(f_),
    MemberQ(List($s("Sin"),$s("Cos"),$s("Sec"),$s("Csc")),f)),
ISetDelayed(SinhCoshQ(f_),
    MemberQ(List($s("Sinh"),$s("Cosh"),$s("Sech"),$s("Csch")),f)),
ISetDelayed(CalculusQ(u_),
    MemberQ(List($s("D"),$s("Integrate"),$s("Sum"),$s("Product"),$s("Int"),$s("Dif"),$s("Integrate::Subst")),Head(u))),
ISetDelayed(CalculusFreeQ(u_,x_),
    If(AtomQ(u),True,If(Or(Or(And(CalculusQ(u),SameQ(Part(u,C2),x)),SameQ(Head(u),$s("Pattern"))),SameQ(Head(u),$s("Defer"))),False,Catch(CompoundExpression(Scan(Function(If(CalculusFreeQ(Slot1,x),Null,Throw(False))),u),True))))),
ISetDelayed(SubstQ(u_),
    SameQ(Head(u),$s("Integrate::Subst"))),
ISetDelayed(InverseFunctionQ(u_),
    Or(Or(Or(LogQ(u),InverseTrigQ(u)),InverseHyperbolicQ(u)),SameQ(Head(u),$s("Integrate::Mods")))),
ISetDelayed(TrigHyperbolicFreeQ(u_,x_Symbol),
    If(AtomQ(u),True,If(Or(Or(TrigQ(u),HyperbolicQ(u)),CalculusQ(u)),FreeQ(u,x),Catch(CompoundExpression(Scan(Function(If(TrigHyperbolicFreeQ(Slot1,x),Null,Throw(False))),u),True))))),
ISetDelayed(InverseFunctionFreeQ(u_,x_Symbol),
    If(AtomQ(u),True,If(Or(InverseFunctionQ(u),CalculusQ(u)),FreeQ(u,x),Catch(CompoundExpression(Scan(Function(If(InverseFunctionFreeQ(Slot1,x),Null,Throw(False))),u),True))))),
ISetDelayed(NegativeCoefficientQ(u_),
    If(SumQ(u),NegativeCoefficientQ(First(u)),MatchQ(u,Condition(Times(m_,v_DEFAULT),And(RationalQ(m),Less(m,C0)))))),
ISetDelayed(RealQ(u_),
    Condition(MapAnd($s("Integrate::RealQ"),u),ListQ(u))),
ISetDelayed(RealQ(u_),
    Condition(PossibleZeroQ(Im(N(u))),NumericQ(u))),
ISetDelayed(RealQ(Power(u_,v_)),
    And(And(RealQ(u),RealQ(v)),Or(IntIntegerQ(v),PositiveOrZeroQ(u)))),
ISetDelayed(RealQ(Times(u_,v_)),
    And(RealQ(u),RealQ(v))),
ISetDelayed(RealQ(Plus(u_,v_)),
    And(RealQ(u),RealQ(v))),
ISetDelayed(RealQ($(f_,u_)),
    If(MemberQ(List($s("Sin"),$s("Cos"),$s("Tan"),$s("Cot"),$s("Sec"),$s("Csc"),$s("ArcTan"),$s("ArcCot"),$s("Erf")),f),RealQ(u),If(MemberQ(List($s("ArcSin"),$s("ArcCos")),f),LE(CN1,u,C1),If(SameQ(f,$s("Log")),PositiveOrZeroQ(u),False)))),
ISetDelayed(RealQ(u_),
    False),
ISetDelayed(PosQ(u_),
    If(PossibleZeroQ(u),False,If(NumericQ(u),If(NumberQ(u),If(PossibleZeroQ(Re(u)),Greater(Im(u),C0),Greater(Re(u),C0)),Module(List(Set(v,N(u))),If(PossibleZeroQ(Re(v)),Greater(Im(v),C0),Greater(Re(v),C0)))),Module(List(Set(v,Simplify(u))),If(NumericQ(v),PosQ(v),If(And(PowerQ(v),IntIntegerQ(Part(v,C2))),PosQ(Part(v,C1)),If(ProductQ(v),If(RationalQ(First(v)),If(Greater(First(v),C0),PosQ(Rest(v)),NegQ(Rest(v))),PosQ(First(v))),If(SumQ(v),PosQ(First(v)),Not(MatchQ(v,Times(CN1,$p((ISymbol)null)))))))))))),
ISetDelayed(NegQ(u_),
    If(PossibleZeroQ(u),False,Not(PosQ(u)))),
ISetDelayed(LeadTerm(u_),
    If(SumQ(u),First(u),u)),
ISetDelayed(RemainingTerms(u_),
    If(SumQ(u),Rest(u),C0)),
ISetDelayed(LeadFactor(u_),
    If(ProductQ(u),LeadFactor(First(u)),If(ImaginaryQ(u),If(SameQ(Im(u),C1),u,LeadFactor(Im(u))),u))),
ISetDelayed(RemainingFactors(u_),
    If(ProductQ(u),Times(RemainingFactors(First(u)),Rest(u)),If(ImaginaryQ(u),If(SameQ(Im(u),C1),C1,Times(CI,RemainingFactors(Im(u)))),C1))),
ISetDelayed(LeadBase(u_),
    Module(List(Set(v,LeadFactor(u))),If(PowerQ(v),Part(v,C1),v))),
ISetDelayed(LeadDegree(u_),
    Module(List(Set(v,LeadFactor(u))),If(PowerQ(v),Part(v,C2),C1))),
ISetDelayed(LT(u_,v_),
    And(And(RealNumericQ(u),RealNumericQ(v)),Less(Re(N(u)),Re(N(v))))),
ISetDelayed(LT(u_,v_,w_),
    And(LT(u,v),LT(v,w))),
ISetDelayed(LE(u_,v_),
    And(And(RealNumericQ(u),RealNumericQ(v)),LessEqual(Re(N(u)),Re(N(v))))),
ISetDelayed(LE(u_,v_,w_),
    And(LE(u,v),LE(v,w))),
ISetDelayed(GT(u_,v_),
    And(And(RealNumericQ(u),RealNumericQ(v)),Greater(Re(N(u)),Re(N(v))))),
ISetDelayed(GT(u_,v_,w_),
    And(GT(u,v),GT(v,w))),
ISetDelayed(GE(u_,v_),
    And(And(RealNumericQ(u),RealNumericQ(v)),GreaterEqual(Re(N(u)),Re(N(v)))))
  );
}
