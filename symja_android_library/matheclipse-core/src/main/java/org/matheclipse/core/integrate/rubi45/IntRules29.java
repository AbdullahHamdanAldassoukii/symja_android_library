package org.matheclipse.core.integrate.rubi45;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctions.*;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;

/** 
 * IndefiniteIntegrationRules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IntRules29 { 
  public static IAST RULES = List( 
ISetDelayed(Int(Times(u_,Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_DEFAULT))),p_DEFAULT)),x_Symbol),
    Condition(Int(Times(PolynomialQuotient(u,Plus(a,Times(b,Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1))),x),And(And(And(FreeQ(List(a,b,p),x),PolynomialQ(u,x)),PositiveIntegerQ(n)),ZeroQ(PolynomialRemainder(u,Plus(a,Times(b,Power(x,n))),x))))),
ISetDelayed(Int(Times(u_,Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_)),x_Symbol),
    Condition(Plus(Times(Coefficient(u,x,Plus(n,Negate(C1))),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Times(b,n,Plus(p,C1)),-1)),Int(Times(ExpandToSum(Plus(u,Times(CN1,Coefficient(u,x,Plus(n,Negate(C1))),Power(x,Plus(n,Negate(C1))))),x),Power(Plus(a,Times(b,Power(x,n))),p)),x)),And(And(And(FreeQ(List(a,b),x),PolynomialQ(u,x)),PositiveIntegerQ(n,p)),NonzeroQ(Coefficient(u,x,Plus(n,Negate(C1))))))),
ISetDelayed(Int(Times(u_,Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(u,Power(Plus(a,Times(b,Power(x,n))),p)),x),x),And(And(And(FreeQ(List(a,b),x),PolynomialQ(u,x)),PositiveIntegerQ(n,p)),ZeroQ(Coefficient(u,x,Plus(n,Negate(C1))))))),
ISetDelayed(Int(Times(Plus($p("A"),Times($p("B",true),x_)),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Times(Power($s("B"),3),Power(b,-1),Int(Power(Plus(Sqr($s("A")),Times(CN1,$s("A"),$s("B"),x),Times(Sqr($s("B")),Sqr(x))),-1),x)),And(FreeQ(List(a,b,$s("A"),$s("B")),x),ZeroQ(Plus(Times(a,Power($s("B"),3)),Times(CN1,b,Power($s("A"),3))))))),
ISetDelayed(Int(Times(Plus($p("A"),Times($p("B",true),x_)),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(a,Power(b,-1)),C3))),Set(s,Denominator(Rt(Times(a,Power(b,-1)),C3)))),Plus(Times(CN1,r,Plus(Times($s("B"),r),Times(CN1,$s("A"),s)),Power(Times(C3,a,s),-1),Int(Power(Plus(r,Times(s,x)),-1),x)),Times(r,Power(Times(C3,a,s),-1),Int(Times(Plus(Times(r,Plus(Times($s("B"),r),Times(C2,$s("A"),s))),Times(s,Plus(Times($s("B"),r),Times(CN1,$s("A"),s)),x)),Power(Plus(Sqr(r),Times(CN1,r,s,x),Times(Sqr(s),Sqr(x))),-1)),x)))),And(And(FreeQ(List(a,b,$s("A"),$s("B")),x),NonzeroQ(Plus(Times(a,Power($s("B"),3)),Times(CN1,b,Power($s("A"),3))))),PosQ(Times(a,Power(b,-1)))))),
ISetDelayed(Int(Times(Plus($p("A"),Times($p("B",true),x_)),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(CN1,a,Power(b,-1)),C3))),Set(s,Denominator(Rt(Times(CN1,a,Power(b,-1)),C3)))),Plus(Times(r,Plus(Times($s("B"),r),Times($s("A"),s)),Power(Times(C3,a,s),-1),Int(Power(Plus(r,Times(CN1,s,x)),-1),x)),Times(CN1,r,Power(Times(C3,a,s),-1),Int(Times(Plus(Times(r,Plus(Times($s("B"),r),Times(CN1,C2,$s("A"),s))),Times(CN1,s,Plus(Times($s("B"),r),Times($s("A"),s)),x)),Power(Plus(Sqr(r),Times(r,s,x),Times(Sqr(s),Sqr(x))),-1)),x)))),And(And(FreeQ(List(a,b,$s("A"),$s("B")),x),NonzeroQ(Plus(Times(a,Power($s("B"),3)),Times(CN1,b,Power($s("A"),3))))),NegQ(Times(a,Power(b,-1)))))),
ISetDelayed(Int(Times(Plus($p("A",true),Times($p("B",true),x_),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(a,Power(b,-1)),C1D3))),Condition(Plus(Times($s("C"),Power(q,3),Power(a,-1),Int(Power(Plus(q,x),-1),x)),Times(Sqr(q),Plus($s("A"),Times(CN1,$s("C"),Sqr(q))),Power(a,-1),Int(Power(Plus(Sqr(q),Times(CN1,q,x),Sqr(x)),-1),x))),And(ZeroQ(Plus($s("A"),Times(CN1,$s("B"),q),Times(CN1,C2,$s("C"),Sqr(q)))),NonzeroQ(Plus($s("A"),Times(CN1,$s("C"),Sqr(q))))))),And(FreeQ(List(a,b,$s("A"),$s("B"),$s("C")),x),PosQ(Times(a,Power(b,-1)))))),
ISetDelayed(Int(Times(x_,Plus($p("B"),Times($p("C",true),x_)),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(a,Power(b,-1)),C1D3))),Condition(Plus(Times($s("C"),Power(q,3),Power(a,-1),Int(Power(Plus(q,x),-1),x)),Times(CN1,$s("C"),Power(q,4),Power(a,-1),Int(Power(Plus(Sqr(q),Times(CN1,q,x),Sqr(x)),-1),x))),ZeroQ(Plus($s("B"),Times(C2,$s("C"),q))))),And(FreeQ(List(a,b,$s("B"),$s("C")),x),PosQ(Times(a,Power(b,-1)))))),
ISetDelayed(Int(Times(Plus($p("A",true),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(a,Power(b,-1)),C1D3))),Condition(Plus(Times($s("C"),Power(q,3),Power(a,-1),Int(Power(Plus(q,x),-1),x)),Times($s("C"),Power(q,4),Power(a,-1),Int(Power(Plus(Sqr(q),Times(CN1,q,x),Sqr(x)),-1),x))),ZeroQ(Plus($s("A"),Times(CN1,C2,$s("C"),Sqr(q)))))),And(FreeQ(List(a,b,$s("A"),$s("C")),x),PosQ(Times(a,Power(b,-1)))))),
ISetDelayed(Int(Times(Plus($p("A",true),Times($p("B",true),x_),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(CN1,a,Power(b,-1)),C1D3))),Condition(Plus(Times($s("C"),Power(q,3),Power(a,-1),Int(Power(Plus(q,Negate(x)),-1),x)),Times(Sqr(q),Plus($s("A"),Times(CN1,$s("C"),Sqr(q))),Power(a,-1),Int(Power(Plus(Sqr(q),Times(q,x),Sqr(x)),-1),x))),And(ZeroQ(Plus($s("A"),Times($s("B"),q),Times(CN1,C2,$s("C"),Sqr(q)))),NonzeroQ(Plus($s("A"),Times(CN1,$s("C"),Sqr(q))))))),And(FreeQ(List(a,b,$s("A"),$s("B"),$s("C")),x),NegQ(Times(a,Power(b,-1)))))),
ISetDelayed(Int(Times(x_,Plus($p("B"),Times($p("C",true),x_)),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(CN1,a,Power(b,-1)),C1D3))),Condition(Plus(Times($s("C"),Power(q,3),Power(a,-1),Int(Power(Plus(q,Negate(x)),-1),x)),Times(CN1,$s("C"),Power(q,4),Power(a,-1),Int(Power(Plus(Sqr(q),Times(q,x),Sqr(x)),-1),x))),ZeroQ(Plus($s("B"),Times(CN1,C2,$s("C"),q))))),And(FreeQ(List(a,b,$s("B"),$s("C")),x),NegQ(Times(a,Power(b,-1)))))),
ISetDelayed(Int(Times(Plus($p("A",true),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(CN1,a,Power(b,-1)),C1D3))),Condition(Plus(Times($s("C"),Power(q,3),Power(a,-1),Int(Power(Plus(q,Negate(x)),-1),x)),Times($s("C"),Power(q,4),Power(a,-1),Int(Power(Plus(Sqr(q),Times(q,x),Sqr(x)),-1),x))),ZeroQ(Plus($s("A"),Times(CN1,C2,$s("C"),Sqr(q)))))),And(FreeQ(List(a,b,$s("A"),$s("C")),x),NegQ(Times(a,Power(b,-1)))))),
ISetDelayed(Int(Times(Plus($p("A",true),Times($p("B",true),x_),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Plus(Int(Times(Plus($s("A"),Times($s("B"),x)),Power(Plus(a,Times(b,Power(x,3))),-1)),x),Times($s("C"),Int(Times(Sqr(x),Power(Plus(a,Times(b,Power(x,3))),-1)),x))),And(FreeQ(List(a,b,$s("A"),$s("B"),$s("C")),x),Or(ZeroQ(Plus(Times(a,Power($s("B"),3)),Times(CN1,b,Power($s("A"),3)))),Not(RationalQ(Times(a,Power(b,-1)))))))),
ISetDelayed(Int(Times(x_,Plus($p("B"),Times($p("C",true),x_)),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Plus(Times($s("B"),Int(Times(x,Power(Plus(a,Times(b,Power(x,3))),-1)),x)),Times($s("C"),Int(Times(Sqr(x),Power(Plus(a,Times(b,Power(x,3))),-1)),x))),And(FreeQ(List(a,b,$s("B"),$s("C")),x),Not(RationalQ(Times(a,Power(b,-1))))))),
ISetDelayed(Int(Times(Plus($p("A"),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Plus(Times($s("A"),Int(Power(Plus(a,Times(b,Power(x,3))),-1),x)),Times($s("C"),Int(Times(Sqr(x),Power(Plus(a,Times(b,Power(x,3))),-1)),x))),And(FreeQ(List(a,b,$s("A"),$s("C")),x),Not(RationalQ(a,b,$s("A"),$s("C")))))),
ISetDelayed(Int(Times(Plus($p("A",true),Times($p("B",true),x_),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(a,Power(b,-1)),C1D3))),Condition(Times(Sqr(q),Power(a,-1),Int(Times(Plus($s("A"),Times($s("C"),q,x)),Power(Plus(Sqr(q),Times(CN1,q,x),Sqr(x)),-1)),x)),ZeroQ(Plus($s("A"),Times(CN1,$s("B"),q),Times($s("C"),Sqr(q)))))),And(And(And(FreeQ(List(a,b,$s("A"),$s("B"),$s("C")),x),NonzeroQ(Plus(Times(a,Power($s("B"),3)),Times(CN1,b,Power($s("A"),3))))),RationalQ(Times(a,Power(b,-1)))),Greater(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(Plus(Times($p("B"),x_),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(a,Power(b,-1)),C1D3))),Condition(Times($s("B"),Sqr(q),Power(a,-1),Int(Times(x,Power(Plus(Sqr(q),Times(CN1,q,x),Sqr(x)),-1)),x)),ZeroQ(Plus(Negate($s("B")),Times($s("C"),q))))),And(And(FreeQ(List(a,b,$s("B"),$s("C")),x),RationalQ(Times(a,Power(b,-1)))),Greater(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(Plus($p("A"),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(a,Power(b,-1)),C1D3))),Condition(Times(Sqr(q),Power(a,-1),Int(Times(Plus($s("A"),Times($s("C"),q,x)),Power(Plus(Sqr(q),Times(CN1,q,x),Sqr(x)),-1)),x)),ZeroQ(Plus($s("A"),Times($s("C"),Sqr(q)))))),And(And(FreeQ(List(a,b,$s("A"),$s("C")),x),RationalQ(Times(a,Power(b,-1)))),Greater(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(Plus($p("A",true),Times($p("B",true),x_),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(a,Power(b,-1)),C1D3))),Condition(Plus(Times(q,Plus($s("A"),Times(CN1,$s("B"),q),Times($s("C"),Sqr(q))),Power(Times(C3,a),-1),Int(Power(Plus(q,x),-1),x)),Times(q,Power(Times(C3,a),-1),Int(Times(Plus(Times(q,Plus(Times(C2,$s("A")),Times($s("B"),q),Times(CN1,$s("C"),Sqr(q)))),Times(CN1,Plus($s("A"),Times(CN1,$s("B"),q),Times(CN1,C2,$s("C"),Sqr(q))),x)),Power(Plus(Sqr(q),Times(CN1,q,x),Sqr(x)),-1)),x))),NonzeroQ(Plus($s("A"),Times(CN1,$s("B"),q),Times($s("C"),Sqr(q)))))),And(And(And(FreeQ(List(a,b,$s("A"),$s("B"),$s("C")),x),NonzeroQ(Plus(Times(a,Power($s("B"),3)),Times(CN1,b,Power($s("A"),3))))),RationalQ(Times(a,Power(b,-1)))),Greater(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(x_,Plus($p("B"),Times($p("C",true),x_)),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(a,Power(b,-1)),C1D3))),Condition(Plus(Times(CN1,q,Plus(Times($s("B"),q),Times(CN1,$s("C"),Sqr(q))),Power(Times(C3,a),-1),Int(Power(Plus(q,x),-1),x)),Times(q,Power(Times(C3,a),-1),Int(Times(Plus(Times(q,Plus(Times($s("B"),q),Times(CN1,$s("C"),Sqr(q)))),Times(Plus(Times($s("B"),q),Times(C2,$s("C"),Sqr(q))),x)),Power(Plus(Sqr(q),Times(CN1,q,x),Sqr(x)),-1)),x))),NonzeroQ(Plus(Times($s("B"),q),Times(CN1,$s("C"),Sqr(q)))))),And(And(FreeQ(List(a,b,$s("B"),$s("C")),x),RationalQ(Times(a,Power(b,-1)))),Greater(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(Plus($p("A"),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(a,Power(b,-1)),C1D3))),Condition(Plus(Times(q,Plus($s("A"),Times($s("C"),Sqr(q))),Power(Times(C3,a),-1),Int(Power(Plus(q,x),-1),x)),Times(q,Power(Times(C3,a),-1),Int(Times(Plus(Times(q,Plus(Times(C2,$s("A")),Times(CN1,$s("C"),Sqr(q)))),Times(CN1,Plus($s("A"),Times(CN1,C2,$s("C"),Sqr(q))),x)),Power(Plus(Sqr(q),Times(CN1,q,x),Sqr(x)),-1)),x))),NonzeroQ(Plus($s("A"),Times($s("C"),Sqr(q)))))),And(And(FreeQ(List(a,b,$s("A"),$s("C")),x),RationalQ(Times(a,Power(b,-1)))),Greater(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(Plus($p("A",true),Times($p("B",true),x_),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(CN1,a,Power(b,-1)),C1D3))),Condition(Times(q,Power(a,-1),Int(Times(Plus(Times($s("A"),q),Times(Plus($s("A"),Times($s("B"),q)),x)),Power(Plus(Sqr(q),Times(q,x),Sqr(x)),-1)),x)),ZeroQ(Plus($s("A"),Times($s("B"),q),Times($s("C"),Sqr(q)))))),And(And(And(FreeQ(List(a,b,$s("A"),$s("B"),$s("C")),x),NonzeroQ(Plus(Times(a,Power($s("B"),3)),Times(CN1,b,Power($s("A"),3))))),RationalQ(Times(a,Power(b,-1)))),Less(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(x_,Plus($p("B"),Times($p("C",true),x_)),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(CN1,a,Power(b,-1)),C1D3))),Condition(Times($s("B"),Sqr(q),Power(a,-1),Int(Times(x,Power(Plus(Sqr(q),Times(q,x),Sqr(x)),-1)),x)),ZeroQ(Plus(Times($s("B"),q),Times($s("C"),Sqr(q)))))),And(And(FreeQ(List(a,b,$s("B"),$s("C")),x),RationalQ(Times(a,Power(b,-1)))),Less(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(Plus($p("A"),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(CN1,a,Power(b,-1)),C1D3))),Condition(Times($s("A"),q,Power(a,-1),Int(Times(Plus(q,x),Power(Plus(Sqr(q),Times(q,x),Sqr(x)),-1)),x)),ZeroQ(Plus($s("A"),Times($s("C"),Sqr(q)))))),And(And(FreeQ(List(a,b,$s("A"),$s("C")),x),RationalQ(Times(a,Power(b,-1)))),Less(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(Plus($p("A",true),Times($p("B",true),x_),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(CN1,a,Power(b,-1)),C1D3))),Condition(Plus(Times(q,Plus($s("A"),Times($s("B"),q),Times($s("C"),Sqr(q))),Power(Times(C3,a),-1),Int(Power(Plus(q,Negate(x)),-1),x)),Times(q,Power(Times(C3,a),-1),Int(Times(Plus(Times(q,Plus(Times(C2,$s("A")),Times(CN1,$s("B"),q),Times(CN1,$s("C"),Sqr(q)))),Times(Plus($s("A"),Times($s("B"),q),Times(CN1,C2,$s("C"),Sqr(q))),x)),Power(Plus(Sqr(q),Times(q,x),Sqr(x)),-1)),x))),NonzeroQ(Plus($s("A"),Times($s("B"),q),Times($s("C"),Sqr(q)))))),And(And(And(FreeQ(List(a,b,$s("A"),$s("B"),$s("C")),x),NonzeroQ(Plus(Times(a,Power($s("B"),3)),Times(CN1,b,Power($s("A"),3))))),RationalQ(Times(a,Power(b,-1)))),Less(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(x_,Plus($p("B"),Times($p("C",true),x_)),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(CN1,a,Power(b,-1)),C1D3))),Condition(Plus(Times(q,Plus(Times($s("B"),q),Times($s("C"),Sqr(q))),Power(Times(C3,a),-1),Int(Power(Plus(q,Negate(x)),-1),x)),Times(q,Power(Times(C3,a),-1),Int(Times(Plus(Times(CN1,q,Plus(Times($s("B"),q),Times($s("C"),Sqr(q)))),Times(Plus(Times($s("B"),q),Times(CN1,C2,$s("C"),Sqr(q))),x)),Power(Plus(Sqr(q),Times(q,x),Sqr(x)),-1)),x))),NonzeroQ(Plus(Times($s("B"),q),Times($s("C"),Sqr(q)))))),And(And(FreeQ(List(a,b,$s("B"),$s("C")),x),RationalQ(Times(a,Power(b,-1)))),Less(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(Plus($p("A"),Times($p("C",true),Sqr(x_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,3))),-1)),x_Symbol),
    Condition(Module(List(Set(q,Power(Times(CN1,a,Power(b,-1)),C1D3))),Condition(Plus(Times(q,Plus($s("A"),Times($s("C"),Sqr(q))),Power(Times(C3,a),-1),Int(Power(Plus(q,Negate(x)),-1),x)),Times(q,Power(Times(C3,a),-1),Int(Times(Plus(Times(q,Plus(Times(C2,$s("A")),Times(CN1,$s("C"),Sqr(q)))),Times(Plus($s("A"),Times(CN1,C2,$s("C"),Sqr(q))),x)),Power(Plus(Sqr(q),Times(q,x),Sqr(x)),-1)),x))),NonzeroQ(Plus($s("A"),Times($s("C"),Sqr(q)))))),And(And(FreeQ(List(a,b,$s("A"),$s("C")),x),RationalQ(Times(a,Power(b,-1)))),Less(Times(a,Power(b,-1)),C0)))),
ISetDelayed(Int(Times(Plus($p("A"),Times($p("B",true),Power(x_,m_))),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times($s("A"),Int(Power(Plus(a,Times(b,Power(x,n))),p),x)),Times($s("B"),Int(Times(Power(x,Plus(n,Negate(C1))),Power(Plus(a,Times(b,Power(x,n))),p)),x))),And(FreeQ(List(a,b,$s("A"),$s("B"),m,n,p),x),ZeroQ(Plus(m,Negate(n),C1))))),
ISetDelayed(Int(Times(u_,Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_)),x_Symbol),
    Condition(Plus(Times(Coefficient(u,x,Plus(n,Negate(C1))),Int(Times(Power(x,Plus(n,Negate(C1))),Power(Plus(a,Times(b,Power(x,n))),p)),x)),Int(Times(ExpandToSum(Plus(u,Times(CN1,Coefficient(u,x,Plus(n,Negate(C1))),Power(x,Plus(n,Negate(C1))))),x),Power(Plus(a,Times(b,Power(x,n))),p)),x)),And(And(And(FreeQ(List(a,b,p),x),PolynomialQ(u,x)),PositiveIntegerQ(n)),Equal(Exponent(u,x),Plus(n,Negate(C1)))))),
ISetDelayed(Int(Times(u_,Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_)),x_Symbol),
    Condition(Plus(Times(x,Sum(Times(Coefficient(u,x,k),Power(x,k),Power(Plus(Times(n,p),k,C1),-1)),List(k,C0,Plus(n,Negate(C2)))),Power(Plus(a,Times(b,Power(x,n))),p)),Times(a,n,p,Int(Times(Sum(Times(Coefficient(u,x,k),Power(x,k),Power(Plus(Times(n,p),k,C1),-1)),List(k,C0,Plus(n,Negate(C2)))),Power(Plus(a,Times(b,Power(x,n))),Plus(p,Negate(C1)))),x))),And(And(And(And(And(FreeQ(List(a,b),x),PolynomialQ(u,x)),PositiveIntegerQ(n)),Less(Less(C0,Exponent(u,x)),Plus(n,Negate(C1)))),RationalQ(p)),Greater(p,C0)))),
ISetDelayed(Int(Times(u_,Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),-1)),x_Symbol),
    Condition(Module(List(Set(v,Sum(Times(Power(x,i),Plus(Coefficient(u,x,i),Times(Coefficient(u,x,Plus(Times(C1D2,n),i)),Power(x,Times(C1D2,n)))),Power(Plus(a,Times(b,Power(x,n))),-1)),List(i,C0,Plus(Times(C1D2,n),Negate(C1)))))),Condition(Int(v,x),SumQ(v))),And(And(And(FreeQ(List(a,b),x),PolynomialQ(u,x)),PositiveIntegerQ(Times(C1D2,n))),Less(Exponent(u,x),Plus(n,Negate(C1)))))),
ISetDelayed(Int(Times(u_,Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),-1)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(u,Power(Plus(a,Times(b,Power(x,n))),-1)),x),x),And(And(FreeQ(List(a,b),x),PolynomialQ(u,x)),PositiveIntegerQ(n)))),
ISetDelayed(Int(Times(u_,Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_)),x_Symbol),
    Condition(Plus(Times(CN1,x,u,Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Times(a,n,Plus(p,C1)),-1)),Times(Power(Times(a,n,Plus(p,C1)),-1),Int(Times(Sum(Times(Plus(Times(n,Plus(p,C1)),k,C1),Coefficient(u,x,k),Power(x,k)),List(k,C0,Plus(n,Negate(C2)))),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1))),x))),And(And(And(And(And(FreeQ(List(a,b),x),PolynomialQ(u,x)),PositiveIntegerQ(n)),Less(Less(C0,Exponent(u,x)),Plus(n,Negate(C1)))),RationalQ(p)),Less(p,CN1)))),
ISetDelayed(Int(Times(u_,Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_)),x_Symbol),
    Condition(Plus(Times(u,Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Times(b,n,Plus(p,C1)),-1)),Times(CN1,Power(Times(b,n,Plus(p,C1)),-1),Int(Times(Sum(Times(k,Coefficient(u,x,k),Power(x,Plus(k,Negate(C1)))),List(k,C1,Exponent(u,x))),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1))),x))),And(And(And(And(And(FreeQ(List(a,b),x),PolynomialQ(u,x)),ZeroQ(Plus(m,Negate(Plus(n,Negate(C1)))))),PositiveIntegerQ(n)),RationalQ(p)),Less(p,CN1)))),
ISetDelayed(Int(Times(u_,Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_)),x_Symbol),
    Condition(Module(List(Set(v,Sum(Times(Power(x,Plus(m,i)),Plus(Coefficient(u,x,i),Times(Coefficient(u,x,Plus(Times(C1D2,n),i)),Power(x,Times(C1D2,n)))),Power(Plus(a,Times(b,Power(x,n))),p)),List(i,C0,Plus(Times(C1D2,n),Negate(C1)))))),Condition(Int(v,x),SumQ(v))),And(And(And(And(FreeQ(List(a,b,m),x),PolynomialQ(u,x)),EvenQ(n)),NegativeIntegerQ(p)),Less(Less(C0,Exponent(u,x)),n)))),
ISetDelayed(Int(Times(u_,Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(x,m),u,Power(Plus(a,Times(b,Power(x,n))),p)),x),x),And(And(And(FreeQ(List(a,b,m),x),PolynomialQ(u,x)),PositiveIntegerQ(n)),IntegersQ(m,p)))),
ISetDelayed(Int(Times(Power(u_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(Plus(c_,Times(d_DEFAULT,x_)),n_))),p_)),x_Symbol),
    Condition(Module(List(Set(k,Denominator(n))),Times(k,Power(d,-1),Subst(Int(SimplifyIntegrand(Times(Power(x,Plus(k,Negate(C1))),Power(ReplaceAll(u,Rule(x,Plus(Times(Power(x,k),Power(d,-1)),Times(CN1,c,Power(d,-1))))),m),Power(Plus(a,Times(b,Power(x,Times(k,n)))),p)),x),x),x,Power(Plus(c,Times(d,x)),Power(k,-1))))),And(And(And(FreeQ(List(a,b,c,d,p),x),PolynomialQ(u,x)),IntegerQ(m)),RationalQ(n))))
  );
}
