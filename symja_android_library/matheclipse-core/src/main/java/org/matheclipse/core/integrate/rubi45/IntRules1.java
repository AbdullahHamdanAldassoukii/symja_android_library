package org.matheclipse.core.integrate.rubi45;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctions.*;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;

/** 
 * IndefiniteIntegrationRules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IntRules1 { 
  public static IAST RULES = List( 
ISetDelayed(Int(Power(Times(Sqrt(Plus(Times(b_DEFAULT,x_),a_)),Sqrt(Plus(Times(x_,pd_DEFAULT),c_))),CN1),x_Symbol),
    Condition(Times(ArcCosh(Times(b,x,Power(a,CN1))),Power(b,CN1)),And(And(And(FreeQ(List(a,b,c,pd),x),ZeroQ(Plus(b,Times(CN1,pd)))),ZeroQ(Plus(a,c))),PositiveQ(a)))),
ISetDelayed(Int(Power(Times(Sqrt(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Sqrt(Plus(Times(x_,pd_DEFAULT),c_))),CN1),x_Symbol),
    Condition(Times(C2,Power(b,CN1),Subst(Int(Power(Plus(c,Times(CN1,a),Sqr(x)),CN1D2),x),x,Sqrt(Plus(a,Times(b,x))))),And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),ZeroQ(Plus(b,Times(CN1,pd)))))),
ISetDelayed(Int(Power(Times(Sqrt(Plus(Times(b_DEFAULT,x_),a_)),Sqrt(Plus(Times(x_,pd_DEFAULT),c_DEFAULT))),CN1),x_Symbol),
    Condition(Times(ArcSin(Times(Plus(a,Times(CN1,c),Times(C2,b,x)),Power(Plus(a,c),CN1))),Power(b,CN1)),And(And(FreeQ(List(a,b,c,pd),x),ZeroQ(Plus(b,pd))),PositiveQ(Plus(a,c))))),
ISetDelayed(Int(Power(Times(Sqrt(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Sqrt(Plus(Times(x_,pd_DEFAULT),c_DEFAULT))),CN1),x_Symbol),
    Condition(Times(C2,Power(b,CN1D2),Subst(Int(Power(Plus(Times(b,c),Times(CN1,a,pd),Times(pd,Sqr(x))),CN1D2),x),x,Sqrt(Plus(a,Times(b,x))))),And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),PositiveQ(b)),Not(And(PositiveQ(pd),NegativeQ(Plus(Times(b,c),Times(CN1,a,pd)))))))),
ISetDelayed(Int(Power(Times(Sqrt(Plus(Times(b_DEFAULT,x_),a_DEFAULT)),Sqrt(Plus(Times(x_,pd_DEFAULT),c_DEFAULT))),CN1),x_Symbol),
    Condition(Times(C2,Subst(Int(Power(Plus(b,Times(CN1,pd,Sqr(x))),CN1),x),x,Times(Sqrt(Plus(a,Times(b,x))),Power(Plus(c,Times(pd,x)),CN1D2)))),And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_),m_DEFAULT),Power(Plus(Times(x_,pd_DEFAULT),c_),pn_DEFAULT)),x_Symbol),
    Condition(Int(Power(Plus(Times(a,c),Times(b,pd,Sqr(x))),m),x),And(And(And(FreeQ(List(a,b,c,pd,m,pn),x),ZeroQ(Plus(m,Times(CN1,pn)))),ZeroQ(Plus(Times(b,c),Times(a,pd)))),Or(IntegerQ(m),And(PositiveQ(a),PositiveQ(c)))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),CN1),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(Plus(c,Times(pd,x)),pn),Power(Plus(a,Times(b,x)),CN1)),x),x),And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),IntegerQ(pn)))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),CN1),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_)),x_Symbol),
    Condition(Plus(Times(Power(Plus(c,Times(pd,x)),pn),Power(Times(b,pn),CN1)),Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1),Int(Times(Power(Plus(c,Times(pd,x)),Plus(pn,Times(CN1,C1))),Power(Plus(a,Times(b,x)),CN1)),x))),And(And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),Not(IntegerQ(pn))),RationalQ(pn)),Greater(pn,C0)))),
ISetDelayed(Int(Power(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),Power(Plus(Times(x_,pd_DEFAULT),c_),C1D3)),CN1),x_Symbol),
    Condition(Plus(Times(CN1,Log(Plus(a,Times(b,x))),Power(Times(C2,b,Power(Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),C1D3)),CN1)),Times(CN1,C3,Power(Times(C2,Power(Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),C1D3)),CN1),Subst(Int(Times(x,Plus(Times(C2,Power(Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),C1D3)),x),Power(Plus(Times(b,c),Times(CN1,a,pd),Times(CN1,b,Power(x,C3))),CN1)),x),x,Power(Plus(c,Times(pd,x)),C1D3)))),And(FreeQ(List(a,b,c,pd),x),PosQ(Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)))))),
ISetDelayed(Int(Power(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),Power(Plus(Times(x_,pd_DEFAULT),c_),C1D3)),CN1),x_Symbol),
    Condition(Plus(Times(Log(Plus(a,Times(b,x))),Power(Times(C2,b,Power(Times(CN1,Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),C1D3)),CN1)),Times(CN1,C3,Power(Times(C2,Power(Times(CN1,Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),C1D3)),CN1),Subst(Int(Times(x,Plus(Times(C2,Power(Times(CN1,Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),C1D3)),Times(CN1,x)),Power(Plus(Times(b,c),Times(CN1,a,pd),Times(CN1,b,Power(x,C3))),CN1)),x),x,Power(Plus(c,Times(pd,x)),C1D3)))),And(FreeQ(List(a,b,c,pd),x),NegQ(Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)))))),
ISetDelayed(Int(Power(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),Power(Plus(Times(x_,pd_DEFAULT),c_),QQ(2L,3L))),CN1),x_Symbol),
    Condition(Plus(Times(CN1,Log(RemoveContent(Plus(a,Times(b,x)),x)),Power(Times(C2,b,Power(Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),QQ(2L,3L))),CN1)),Times(CN1,C3,Power(Times(C2,Power(Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),QQ(2L,3L))),CN1),Subst(Int(Times(Plus(Times(C2,Power(Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),QQ(2L,3L))),Sqr(x)),Power(Plus(Times(b,c),Times(CN1,a,pd),Times(CN1,b,Power(x,C3))),CN1)),x),x,Power(Plus(c,Times(pd,x)),C1D3)))),And(FreeQ(List(a,b,c,pd),x),PosQ(Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)))))),
ISetDelayed(Int(Power(Times(Plus(Times(b_DEFAULT,x_),a_DEFAULT),Power(Plus(Times(x_,pd_DEFAULT),c_),QQ(2L,3L))),CN1),x_Symbol),
    Condition(Plus(Times(CN1,Log(RemoveContent(Plus(a,Times(b,x)),x)),Power(Times(C2,b,Power(Times(CN1,Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),QQ(2L,3L))),CN1)),Times(CN1,C3,Power(Times(C2,Power(Times(CN1,Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),QQ(2L,3L))),CN1),Subst(Int(Times(Plus(Times(C2,Power(Times(CN1,Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)),QQ(2L,3L))),Sqr(x)),Power(Plus(Times(b,c),Times(CN1,a,pd),Times(CN1,b,Power(x,C3))),CN1)),x),x,Power(Plus(c,Times(pd,x)),C1D3)))),And(FreeQ(List(a,b,c,pd),x),NegQ(Times(Plus(Times(b,c),Times(CN1,a,pd)),Power(b,CN1)))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),CN1),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_)),x_Symbol),
    Condition(Module(List(Set(p,Denominator(pn))),Times(p,Subst(Int(Times(Power(x,Plus(Times(p,Plus(pn,C1)),Times(CN1,C1))),Power(Plus(Times(a,pd),Times(CN1,b,c),Times(b,Power(x,p))),CN1)),x),x,Power(Plus(c,Times(pd,x)),Power(p,CN1))))),And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),RationalQ(pn)),Less(Less(CN1,pn),C0)))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),CN1),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_)),x_Symbol),
    Condition(Plus(Times(CN1,Power(Plus(c,Times(pd,x)),Plus(pn,C1)),Power(Times(Plus(pn,C1),Plus(Times(b,c),Times(CN1,a,pd))),CN1)),Times(b,Plus(pn,C1),Power(Times(Plus(pn,C1),Plus(Times(b,c),Times(CN1,a,pd))),CN1),Int(Times(Power(Plus(c,Times(pd,x)),Plus(pn,C1)),Power(Plus(a,Times(b,x)),CN1)),x))),And(And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),Not(IntegerQ(pn))),RationalQ(pn)),Less(pn,CN1)))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),CN1),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_)),x_Symbol),
    Condition(Times(CN1,Power(Plus(c,Times(pd,x)),Plus(pn,C1)),Power(Times(Plus(pn,C1),Plus(Times(b,c),Times(CN1,a,pd))),CN1),Hypergeometric2F1(C1,Plus(pn,C1),Plus(pn,C2),Times(Plus(c,Times(pd,x)),Power(Plus(c,Times(CN1,a,pd,Power(b,CN1))),CN1)))),And(And(And(FreeQ(List(a,b,c,pd,pn),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),Not(RationalQ(pn))),Or(ZeroQ(a),ZeroQ(c))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_),CN1),Power(Plus(Times(x_,pd_DEFAULT),c_),pn_)),x_Symbol),
    Condition(Times(Power(Plus(c,Times(pd,x)),Plus(pn,C1)),Power(Times(pd,pn,Plus(a,Times(b,x))),CN1),Hypergeometric2F1(C1,C1,Plus(C1,Times(CN1,pn)),Times(CN1,Plus(Times(b,c),Times(CN1,a,pd)),Power(Times(pd,Plus(a,Times(b,x))),CN1)))),And(And(FreeQ(List(a,b,c,pd,pn),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),Not(RationalQ(pn))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_DEFAULT),Power(Plus(Times(x_,pd_DEFAULT),c_),pn_)),x_Symbol),
    Condition(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),Power(Plus(c,Times(pd,x)),Plus(pn,C1)),Power(Times(Plus(Times(b,c),Times(CN1,a,pd)),Plus(m,C1)),CN1)),And(And(And(FreeQ(List(a,b,c,pd,m,pn),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),ZeroQ(Plus(m,pn,C2))),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_),m_),Power(Plus(Times(x_,pd_DEFAULT),c_),m_)),x_Symbol),
    Condition(Int(Power(Plus(Times(a,c),Times(CN1,b,Plus(a,Times(CN1,c)),x),Times(CN1,Sqr(b),Sqr(x))),m),x),And(And(And(FreeQ(List(a,b,c,pd),x),FractionQ(m)),ZeroQ(Plus(b,pd))),PositiveQ(Plus(a,c))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_DEFAULT),Power(x_,pn_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(Plus(a,Times(b,x)),m),Power(x,pn)),x),x),And(And(FreeQ(List(a,b,pn),x),PositiveIntegerQ(m)),Or(Or(Not(IntegerQ(pn)),LessEqual(Plus(Times(C7,m),Times(C4,pn)),C0)),Greater(Plus(m,pn,C2),C0))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_DEFAULT),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(Plus(a,Times(b,x)),m),Power(Plus(c,Times(pd,x)),pn)),x),x),And(And(And(FreeQ(List(a,b,c,pd,pn),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),PositiveIntegerQ(m)),Or(Or(Not(IntegerQ(pn)),Less(Plus(Times(C9,m),Times(C5,Plus(pn,C1))),C0)),Greater(Plus(m,pn,C2),C0))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_),m_DEFAULT),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(Plus(a,Times(b,x)),m),Power(Plus(c,Times(pd,x)),pn)),x),x),And(And(And(And(FreeQ(List(a,b,c,pd,pn),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),NegativeIntegerQ(m)),IntegerQ(pn)),Not(And(PositiveIntegerQ(pn),Less(Plus(m,pn,C2),C0)))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_)),x_Symbol),
    Condition(Plus(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),Power(Plus(c,Times(pd,x)),pn),Power(Times(b,Plus(m,C1)),CN1)),Times(CN1,pd,pn,Power(Times(b,Plus(m,C1)),CN1),Int(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),Power(Plus(c,Times(pd,x)),Plus(pn,Times(CN1,C1)))),x))),And(And(And(And(And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),NonzeroQ(Plus(m,pn,C2))),RationalQ(m,pn)),Less(m,CN1)),Greater(pn,C0)),Not(And(IntegerQ(pn),Not(IntegerQ(m))))),Not(And(And(IntegerQ(Plus(m,pn)),LessEqual(Plus(m,pn,C2),C0)),Or(FractionQ(m),GreaterEqual(Plus(Times(C2,pn),m,C1),C0))))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_)),x_Symbol),
    Condition(Plus(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),Power(Plus(c,Times(pd,x)),pn),Power(Times(b,Plus(m,pn,C1)),CN1)),Times(pn,Plus(Times(b,c),Times(CN1,a,pd)),Power(Times(b,Plus(m,pn,C1)),CN1),Int(Times(Power(Plus(a,Times(b,x)),m),Power(Plus(c,Times(pd,x)),Plus(pn,Times(CN1,C1)))),x))),And(And(And(And(And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),RationalQ(m,pn)),Unequal(Plus(m,pn,C2),C0)),Greater(pn,C0)),Unequal(Plus(m,pn,C1),C0)),Not(And(PositiveIntegerQ(m),Or(Not(IntegerQ(pn)),Less(Less(C0,m),pn))))),Not(And(IntegerQ(Plus(m,pn)),Less(Plus(m,pn,C2),C0)))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_)),x_Symbol),
    Condition(Plus(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),Power(Plus(c,Times(pd,x)),pn),Power(Times(b,Plus(m,pn,C1)),CN1)),Times(pn,Plus(Times(b,c),Times(CN1,a,pd)),Power(Times(b,Plus(m,pn,C1)),CN1),Int(Times(Power(Plus(a,Times(b,x)),m),Power(Plus(c,Times(pd,x)),Simplify(Plus(pn,Times(CN1,C1))))),x))),And(And(And(And(And(FreeQ(List(a,b,c,pd,m,pn),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),NonzeroQ(Plus(m,pn,C1))),Not(RationalQ(pn))),IntegerQ(Simplify(Plus(m,pn)))),SumSimplerQ(pn,CN1)))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_)),x_Symbol),
    Condition(Plus(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),Power(Plus(c,Times(pd,x)),Plus(pn,C1)),Power(Times(Plus(Times(b,c),Times(CN1,a,pd)),Plus(m,C1)),CN1)),Times(CN1,pd,Plus(m,pn,C2),Power(Times(Plus(Times(b,c),Times(CN1,a,pd)),Plus(m,C1)),CN1),Int(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),Power(Plus(c,Times(pd,x)),pn)),x))),And(And(And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),RationalQ(m,pn)),Unequal(Plus(m,pn,C2),C0)),Less(m,CN1)),Not(And(Less(pn,CN1),Or(ZeroQ(a),And(And(NonzeroQ(c),Less(m,pn)),IntegerQ(pn)))))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_)),x_Symbol),
    Condition(Plus(Times(Power(Plus(a,Times(b,x)),Plus(m,C1)),Power(Plus(c,Times(pd,x)),Plus(pn,C1)),Power(Times(Plus(Times(b,c),Times(CN1,a,pd)),Plus(m,C1)),CN1)),Times(CN1,pd,Plus(m,pn,C2),Power(Times(Plus(Times(b,c),Times(CN1,a,pd)),Plus(m,C1)),CN1),Int(Times(Power(Plus(a,Times(b,x)),Simplify(Plus(m,C1))),Power(Plus(c,Times(pd,x)),pn)),x))),And(And(And(And(FreeQ(List(a,b,c,pd,m,pn),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),Not(RationalQ(m))),IntegerQ(Simplify(Plus(m,pn)))),SumSimplerQ(m,C1)))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),m_)),x_Symbol),
    Condition(Times(Power(Plus(a,Times(b,x)),m),Power(Plus(c,Times(pd,x)),m),Power(Power(Plus(Times(a,c),Times(b,pd,Sqr(x))),m),CN1),Int(Power(Plus(Times(a,c),Times(b,pd,Sqr(x))),m),x)),And(And(FreeQ(List(a,b,c,pd,m),x),ZeroQ(Plus(Times(b,c),Times(a,pd)))),Not(IntegerQ(m))))),
ISetDelayed(Int(Power(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),C1D3),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),QQ(2L,3L))),CN1),x_Symbol),
    Condition(Plus(Times(CN1,CSqrt3,Power(Times(Rt(b,C3),Sqr(Rt(pd,C3))),CN1),ArcTan(Times(C1DSqrt3,Plus(C1,Times(C2,Rt(pd,C3),Power(Plus(a,Times(b,x)),C1D3),Power(Times(Rt(b,C3),Power(Plus(c,Times(pd,x)),C1D3)),CN1)))))),Times(CN1,C3,Power(Times(C2,Rt(b,C3),Sqr(Rt(pd,C3))),CN1),Log(Plus(Times(Rt(pd,C3),Power(Plus(a,Times(b,x)),C1D3)),Times(CN1,Rt(b,C3),Power(Plus(c,Times(pd,x)),C1D3)))))),And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),PosQ(b)),PosQ(pd)))),
ISetDelayed(Int(Power(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),C1D3),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),QQ(2L,3L))),CN1),x_Symbol),
    Condition(Plus(Times(CN1,CSqrt3,Power(Times(Rt(b,C3),Sqr(Rt(Times(CN1,pd),C3))),CN1),ArcTan(Times(C1DSqrt3,Plus(C1,Times(CN1,C2,Rt(Times(CN1,pd),C3),Power(Plus(a,Times(b,x)),C1D3),Power(Times(Rt(b,C3),Power(Plus(c,Times(pd,x)),C1D3)),CN1)))))),Times(CN1,C3,Power(Times(C2,Rt(b,C3),Sqr(Rt(Times(CN1,pd),C3))),CN1),Log(Plus(Times(Rt(Times(CN1,pd),C3),Power(Plus(a,Times(b,x)),C1D3)),Times(Rt(b,C3),Power(Plus(c,Times(pd,x)),C1D3)))))),And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),PosQ(b)),NegQ(pd)))),
ISetDelayed(Int(Power(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),C1D3),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),QQ(2L,3L))),CN1),x_Symbol),
    Condition(Plus(Times(CSqrt3,Power(Times(Rt(Times(CN1,b),C3),Sqr(Rt(pd,C3))),CN1),ArcTan(Times(C1DSqrt3,Plus(C1,Times(CN1,C2,Rt(pd,C3),Power(Plus(a,Times(b,x)),C1D3),Power(Times(Rt(Times(CN1,b),C3),Power(Plus(c,Times(pd,x)),C1D3)),CN1)))))),Times(C3,Power(Times(C2,Rt(Times(CN1,b),C3),Sqr(Rt(pd,C3))),CN1),Log(Plus(Times(Rt(pd,C3),Power(Plus(a,Times(b,x)),C1D3)),Times(Rt(Times(CN1,b),C3),Power(Plus(c,Times(pd,x)),C1D3)))))),And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),NegQ(b)),PosQ(pd)))),
ISetDelayed(Int(Power(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),C1D3),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),QQ(2L,3L))),CN1),x_Symbol),
    Condition(Plus(Times(CSqrt3,Power(Times(Rt(Times(CN1,b),C3),Sqr(Rt(Times(CN1,pd),C3))),CN1),ArcTan(Times(C1DSqrt3,Plus(C1,Times(C2,Rt(Times(CN1,pd),C3),Power(Plus(a,Times(b,x)),C1D3),Power(Times(Rt(Times(CN1,b),C3),Power(Plus(c,Times(pd,x)),C1D3)),CN1)))))),Times(C3,Power(Times(C2,Rt(Times(CN1,b),C3),Sqr(Rt(Times(CN1,pd),C3))),CN1),Log(Plus(Times(Rt(Times(CN1,pd),C3),Power(Plus(a,Times(b,x)),C1D3)),Times(CN1,Rt(Times(CN1,b),C3),Power(Plus(c,Times(pd,x)),C1D3)))))),And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),NegQ(b)),NegQ(pd)))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_)),x_Symbol),
    Condition(Module(List(Set(p,Denominator(m))),Times(p,Subst(Int(Times(Power(x,Plus(Times(p,Plus(m,C1)),Times(CN1,C1))),Power(Plus(b,Times(CN1,pd,Power(x,p))),CN1)),x),x,Times(Power(Plus(a,Times(b,x)),Power(p,CN1)),Power(Power(Plus(c,Times(pd,x)),Power(p,CN1)),CN1))))),And(And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),RationalQ(m,pn)),Less(Less(CN1,m),C0)),Equal(Plus(m,pn,C1),C0)))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_)),x_Symbol),
    Condition(Module(List(Set(p,Denominator(m))),Times(p,Power(b,CN1),Subst(Int(Times(Power(x,Plus(Times(p,Plus(m,C1)),Times(CN1,C1))),Power(Plus(c,Times(CN1,a,pd,Power(b,CN1)),Times(pd,Power(x,p),Power(b,CN1))),pn)),x),x,Power(Plus(a,Times(b,x)),Power(p,CN1))))),And(And(And(And(And(FreeQ(List(a,b,c,pd),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),RationalQ(m,pn)),Less(Less(CN1,m),C0)),Less(Less(CN1,pn),C0)),LessEqual(Denominator(pn),Denominator(m))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_DEFAULT),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_DEFAULT)),x_Symbol),
    Condition(Times(Power(Plus(a,Times(b,x)),m),Power(Plus(c,Times(pd,x)),Plus(pn,C1)),Power(Times(pd,Plus(m,pn,C1)),CN1),Hypergeometric2F1(C1,Times(CN1,m),Plus(Times(CN1,m),Times(CN1,pn)),Times(CN1,Plus(Times(b,c),Times(CN1,a,pd)),Power(Times(pd,Plus(a,Times(b,x))),CN1)))),And(And(And(FreeQ(List(a,b,c,pd,m),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),NegativeIntegerQ(Plus(pn,C1))),Not(PositiveIntegerQ(Simplify(Plus(m,pn,C2))))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_DEFAULT),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_DEFAULT)),x_Symbol),
    Condition(Times(Power(Plus(a,Times(CN1,b,c,Power(pd,CN1))),m),Power(Plus(c,Times(pd,x)),Plus(pn,C1)),Power(Times(pd,Plus(pn,C1)),CN1),Hypergeometric2F1(Times(CN1,m),Plus(pn,C1),Plus(pn,C2),TogetherSimplify(Times(Plus(c,Times(pd,x)),Power(Plus(c,Times(CN1,a,pd,Power(b,CN1))),CN1))))),And(And(And(FreeQ(List(a,b,c,pd,m,pn),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),Not(NegativeIntegerQ(pn))),Or(IntegerQ(m),PositiveQ(Plus(a,Times(CN1,b,c,Power(pd,CN1)))))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,x_),a_DEFAULT),m_DEFAULT),Power(Plus(Times(x_,pd_DEFAULT),c_DEFAULT),pn_DEFAULT)),x_Symbol),
    Condition(Times(CN1,Power(Plus(a,Times(b,x)),Plus(m,C1)),Power(Plus(c,Times(pd,x)),Plus(pn,C1)),Power(Times(Plus(pn,C1),Plus(Times(b,c),Times(CN1,a,pd))),CN1),Hypergeometric2F1(C1,Plus(m,pn,C2),Plus(pn,C2),TogetherSimplify(Times(b,Plus(c,Times(pd,x)),Power(Plus(Times(b,c),Times(CN1,a,pd)),CN1))))),And(And(FreeQ(List(a,b,c,pd,m,pn),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,pd)))),Not(NegativeIntegerQ(pn))))),
ISetDelayed(Int(Times(Power(Plus(Times(b_DEFAULT,u_),a_DEFAULT),m_DEFAULT),Power(Plus(Times(v_,pd_DEFAULT),c_DEFAULT),pn_DEFAULT)),x_Symbol),
    Condition(Times(Power(Coefficient(u,x,C1),CN1),Subst(Int(Times(Power(Plus(a,Times(b,x)),m),Power(Plus(c,Times(pd,x)),pn)),x),x,u)),And(And(And(FreeQ(List(a,b,c,pd,m,pn),x),ZeroQ(Plus(u,Times(CN1,v)))),LinearQ(u,x)),NonzeroQ(Coefficient(u,x,C0))))),
ISetDelayed(Int(Times(Power(u_,m_DEFAULT),Power(v_,pn_DEFAULT)),x_Symbol),
    Condition(Int(Times(Power(ExpandToSum(u,x),m),Power(ExpandToSum(v,x),pn)),x),And(And(FreeQ(List(m,pn),x),LinearQ(List(u,v),x)),Not(LinearMatchQ(List(u,v),x)))))
  );
}
