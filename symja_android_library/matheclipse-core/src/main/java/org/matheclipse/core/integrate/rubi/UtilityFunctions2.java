package org.matheclipse.core.integrate.rubi;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi.UtilityFunctions.*;

import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;
/** 
 * UtilityFunctions rules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class UtilityFunctions2 { 
  public static IAST RULES = List( 
SetDelayed(TrigSimplifyAux(Times(Times($p("u",true),Power(Sin(v_),$p("m",true))),Power(Plus(Plus($p("a",true),Times($p("b",true),Power(Cot(v_),$p("n",true)))),Times($p("c",true),Power(Csc(v_),$p("n",true)))),$p("p",true)))),
    Condition(Times(Times(u,Power(Sin(v),Plus(m,Times(CN1,Times(n,p))))),Power(Plus(Plus(c,Times(b,Power(Cos(v),n))),Times(a,Power(Sin(v),n))),p)),IntegerQ(List(m,n,p)))),
SetDelayed(TrigSimplifyAux(Times(Times($p("u",true),Power(Csc(v_),$p("m",true))),Power(Plus(Plus($p("a",true),Times($p("b",true),Power(Cot(v_),$p("n",true)))),Times($p("c",true),Power(Csc(v_),$p("n",true)))),$p("p",true)))),
    Condition(Times(Times(u,Power(Csc(v),Plus(m,Times(n,p)))),Power(Plus(Plus(c,Times(b,Power(Cos(v),n))),Times(a,Power(Sin(v),n))),p)),IntegerQ(List(m,n,p)))),
SetDelayed(TrigSimplifyAux(Times($p("u",true),Times(Power(Tan(v_),$p("n",true)),Power(Plus(a_,Times($p("b",true),Power(Sec(v_),$p("n",true)))),CN1)))),
    Condition(Times(u,Times(Power(Sin(v),n),Power(Plus(b,Times(a,Power(Cos(v),n))),CN1))),And(And(IntegerQ(n),Greater(n,C0)),NonsumQ(a)))),
SetDelayed(TrigSimplifyAux(Times($p("u",true),Times(Power(Cot(v_),$p("n",true)),Power(Plus(a_,Times($p("b",true),Power(Csc(v_),$p("n",true)))),CN1)))),
    Condition(Times(u,Times(Power(Cos(v),n),Power(Plus(b,Times(a,Power(Sin(v),n))),CN1))),And(And(IntegerQ(n),Greater(n,C0)),NonsumQ(a)))),
SetDelayed(TrigSimplifyAux(Times(Power(Sin(v_),$p("m",true)),Power(Plus(Times($p("a",true),Power(Cos(v_),$p("n",true))),Times($p("b",true),Power(Sin(v_),$p("n",true)))),p_))),
    Condition(Power(Plus(b,Times(a,Power(Cot(v),n))),p),And(And(And(IntegerQ(List(m,n,p)),Greater(n,C0)),Less(p,C0)),Equal(m,Times(Times(CN1,n),p))))),
SetDelayed(TrigSimplifyAux(Times(Power(Cos(v_),$p("m",true)),Power(Plus(Times($p("a",true),Power(Cos(v_),$p("n",true))),Times($p("b",true),Power(Sin(v_),$p("n",true)))),p_))),
    Condition(Power(Plus(a,Times(b,Power(Tan(v),n))),p),And(And(And(IntegerQ(List(m,n,p)),Greater(n,C0)),Less(p,C0)),Equal(m,Times(Times(CN1,n),p))))),
SetDelayed(TrigSimplifyAux(Power(Plus(Times($p("a",true),Cos(v_)),Times($p("b",true),Sin(v_))),n_)),
    Condition(Power(Plus(Times(Cos(v),Power(a,CN1)),Times(Sin(v),Power(b,CN1))),Times(CN1,n)),And(And(IntegerQ(n),Less(n,C0)),ZeroQ(Plus(Power(a,C2),Power(b,C2)))))),
SetDelayed(TrigSimplifyAux(Plus(Plus(Times($p("u",true),Power(Cosh(z_),C2)),Times($p("v",true),Power(Sinh(z_),C2))),$p("w",true))),
    Condition(Plus(u,w),SameQ(u,Times(CN1,v)))),
SetDelayed(TrigSimplifyAux(Plus(Plus(Times($p("u",true),Power(Sech(z_),C2)),Times($p("v",true),Power(Tanh(z_),C2))),$p("w",true))),
    Condition(Plus(u,w),SameQ(u,v))),
SetDelayed(TrigSimplifyAux(Plus(Plus(Times($p("u",true),Power(Coth(z_),C2)),Times($p("v",true),Power(Csch(z_),C2))),$p("w",true))),
    Condition(Plus(u,w),SameQ(u,Times(CN1,v)))),
SetDelayed(TrigSimplifyAux(Plus(Plus(u_,Times($p("v",true),Power(Sinh(z_),C2))),$p("w",true))),
    Condition(Plus(Times(u,Power(Cosh(z),C2)),w),SameQ(u,v))),
SetDelayed(TrigSimplifyAux(Plus(Plus(u_,Times($p("v",true),Power(Cosh(z_),C2))),$p("w",true))),
    Condition(Plus(Times(v,Power(Sinh(z),C2)),w),SameQ(u,Times(CN1,v)))),
SetDelayed(TrigSimplifyAux(Plus(Plus(u_,Times($p("v",true),Power(Tanh(z_),C2))),$p("w",true))),
    Condition(Plus(Times(u,Power(Sech(z),C2)),w),SameQ(u,Times(CN1,v)))),
SetDelayed(TrigSimplifyAux(Plus(Plus(u_,Times($p("v",true),Power(Coth(z_),C2))),$p("w",true))),
    Condition(Plus(Times(v,Power(Csch(z),C2)),w),SameQ(u,Times(CN1,v)))),
SetDelayed(TrigSimplifyAux(Plus(Plus(u_,Times($p("v",true),Power(Sech(z_),C2))),$p("w",true))),
    Condition(Plus(Times(u,Power(Tanh(z),C2)),w),SameQ(u,Times(CN1,v)))),
SetDelayed(TrigSimplifyAux(Plus(Plus(u_,Times($p("v",true),Power(Csch(z_),C2))),$p("w",true))),
    Condition(Plus(Times(u,Power(Coth(z),C2)),w),SameQ(u,v))),
SetDelayed(TrigSimplifyAux(Times($p("u",true),Times(Power(Sinh(v_),C2),Power(Plus(a_,Times($p("b",true),Cosh(v_))),CN1)))),
    Condition(Times(u,Plus(Times(CN1,Power(a,CN1)),Times(Cosh(v),Power(b,CN1)))),ZeroQ(Plus(Power(a,C2),Times(CN1,Power(b,C2)))))),
SetDelayed(TrigSimplifyAux(Times($p("u",true),Times(Power(Cosh(v_),C2),Power(Plus(a_,Times($p("b",true),Sinh(v_))),CN1)))),
    Condition(Times(u,Plus(Times(C1,Power(a,CN1)),Times(Sinh(v),Power(b,CN1)))),ZeroQ(Plus(Power(a,C2),Power(b,C2))))),
SetDelayed(TrigSimplifyAux(Times($p("u",true),Times(Power(Tanh(v_),$p("n",true)),Power(Plus(a_,Times($p("b",true),Power(Tanh(v_),$p("n",true)))),CN1)))),
    Condition(Times(u,Power(Plus(b,Times(a,Power(Coth(v),n))),CN1)),And(And(IntegerQ(n),Greater(n,C0)),NonsumQ(a)))),
SetDelayed(TrigSimplifyAux(Times($p("u",true),Times(Power(Coth(v_),$p("n",true)),Power(Plus(a_,Times($p("b",true),Power(Coth(v_),$p("n",true)))),CN1)))),
    Condition(Times(u,Power(Plus(b,Times(a,Power(Tanh(v),n))),CN1)),And(And(IntegerQ(n),Greater(n,C0)),NonsumQ(a)))),
SetDelayed(TrigSimplifyAux(Times($p("u",true),Times(Power(Sech(v_),$p("n",true)),Power(Plus(a_,Times($p("b",true),Power(Sech(v_),$p("n",true)))),CN1)))),
    Condition(Times(u,Power(Plus(b,Times(a,Power(Cosh(v),n))),CN1)),And(And(IntegerQ(n),Greater(n,C0)),NonsumQ(a)))),
SetDelayed(TrigSimplifyAux(Times($p("u",true),Times(Power(Csch(v_),$p("n",true)),Power(Plus(a_,Times($p("b",true),Power(Csch(v_),$p("n",true)))),CN1)))),
    Condition(Times(u,Power(Plus(b,Times(a,Power(Sinh(v),n))),CN1)),And(And(IntegerQ(n),Greater(n,C0)),NonsumQ(a)))),
SetDelayed(TrigSimplifyAux(Power(Plus(Times($p("a",true),Csch(v_)),Times($p("b",true),Coth(v_))),n_)),
    Condition(Times(Power(a,n),Power(Coth(Times(v,C1D2)),n)),And(EvenQ(n),ZeroQ(Plus(a,Times(CN1,b)))))),
SetDelayed(TrigSimplifyAux(Power(Plus(Times($p("a",true),Csch(v_)),Times($p("b",true),Coth(v_))),n_)),
    Condition(Times(Power(b,n),Power(Tanh(Times(v,C1D2)),n)),And(EvenQ(n),ZeroQ(Plus(a,b))))),
SetDelayed(TrigSimplifyAux(Times(Times($p("u",true),Power(Sinh(v_),$p("m",true))),Power(Plus($p("a",true),Times($p("b",true),Power(Coth(v_),$p("n",true)))),$p("p",true)))),
    Condition(Times(Times(u,Power(Sinh(v),Plus(m,Times(CN1,Times(n,p))))),Power(Plus(Times(b,Power(Cosh(v),n)),Times(a,Power(Sinh(v),n))),p)),IntegerQ(List(m,n,p)))),
SetDelayed(TrigSimplifyAux(Times(Times($p("u",true),Power(Cosh(v_),$p("m",true))),Power(Plus($p("a",true),Times($p("b",true),Power(Tanh(v_),$p("n",true)))),$p("p",true)))),
    Condition(Times(Times(u,Power(Cosh(v),Plus(m,Times(CN1,Times(n,p))))),Power(Plus(Times(b,Power(Sinh(v),n)),Times(a,Power(Cosh(v),n))),p)),IntegerQ(List(m,n,p)))),
SetDelayed(TrigSimplifyAux(Times(Times(u_,Power(Sech(v_),$p("m",true))),Power(Plus($p("a",true),Times($p("b",true),Power(Tanh(v_),C2))),$p("p",true)))),
    Condition(Times(u,Power(Plus(Times(b,Power(Sinh(v),C2)),Times(a,Power(Cosh(v),C2))),p)),And(IntegerQ(List(m,p)),Equal(Plus(m,Times(C2,p)),C0)))),
SetDelayed(TrigSimplifyAux(Times(Times(u_,Power(Csch(v_),$p("m",true))),Power(Plus($p("a",true),Times($p("b",true),Power(Coth(v_),C2))),$p("p",true)))),
    Condition(Times(u,Power(Plus(Times(b,Power(Cosh(v),C2)),Times(a,Power(Sinh(v),C2))),p)),And(IntegerQ(List(m,p)),Equal(Plus(m,Times(C2,p)),C0)))),
SetDelayed(TrigSimplifyAux(Times(Times($p("u",true),Power(Cosh(v_),$p("m",true))),Power(Plus(Plus($p("a",true),Times($p("b",true),Power(Tanh(v_),$p("n",true)))),Times($p("c",true),Power(Sech(v_),$p("n",true)))),$p("p",true)))),
    Condition(Times(Times(u,Power(Cosh(v),Plus(m,Times(CN1,Times(n,p))))),Power(Plus(Plus(c,Times(b,Power(Sinh(v),n))),Times(a,Power(Cosh(v),n))),p)),IntegerQ(List(m,n,p)))),
SetDelayed(TrigSimplifyAux(Times(Times($p("u",true),Power(Sech(v_),$p("m",true))),Power(Plus(Plus($p("a",true),Times($p("b",true),Power(Tanh(v_),$p("n",true)))),Times($p("c",true),Power(Sech(v_),$p("n",true)))),$p("p",true)))),
    Condition(Times(Times(u,Power(Sech(v),Plus(m,Times(n,p)))),Power(Plus(Plus(c,Times(b,Power(Sinh(v),n))),Times(a,Power(Cosh(v),n))),p)),IntegerQ(List(m,n,p)))),
SetDelayed(TrigSimplifyAux(Times(Times($p("u",true),Power(Sinh(v_),$p("m",true))),Power(Plus(Plus($p("a",true),Times($p("b",true),Power(Coth(v_),$p("n",true)))),Times($p("c",true),Power(Csch(v_),$p("n",true)))),$p("p",true)))),
    Condition(Times(Times(u,Power(Sinh(v),Plus(m,Times(CN1,Times(n,p))))),Power(Plus(Plus(c,Times(b,Power(Cosh(v),n))),Times(a,Power(Sinh(v),n))),p)),IntegerQ(List(m,n,p)))),
SetDelayed(TrigSimplifyAux(Times(Times($p("u",true),Power(Csch(v_),$p("m",true))),Power(Plus(Plus($p("a",true),Times($p("b",true),Power(Coth(v_),$p("n",true)))),Times($p("c",true),Power(Csch(v_),$p("n",true)))),$p("p",true)))),
    Condition(Times(Times(u,Power(Csch(v),Plus(m,Times(n,p)))),Power(Plus(Plus(c,Times(b,Power(Cosh(v),n))),Times(a,Power(Sinh(v),n))),p)),IntegerQ(List(m,n,p)))),
SetDelayed(TrigSimplifyAux(Times($p("u",true),Times(Power(Tanh(v_),$p("n",true)),Power(Plus(a_,Times($p("b",true),Power(Sech(v_),$p("n",true)))),CN1)))),
    Condition(Times(u,Times(Power(Sinh(v),n),Power(Plus(b,Times(a,Power(Cosh(v),n))),CN1))),And(And(IntegerQ(n),Greater(n,C0)),NonsumQ(a)))),
SetDelayed(TrigSimplifyAux(Times($p("u",true),Times(Power(Coth(v_),$p("n",true)),Power(Plus(a_,Times($p("b",true),Power(Csch(v_),$p("n",true)))),CN1)))),
    Condition(Times(u,Times(Power(Cosh(v),n),Power(Plus(b,Times(a,Power(Sinh(v),n))),CN1))),And(And(IntegerQ(n),Greater(n,C0)),NonsumQ(a)))),
SetDelayed(TrigSimplifyAux(Times(Power(Sinh(v_),$p("m",true)),Power(Plus(Times($p("a",true),Power(Cosh(v_),$p("n",true))),Times($p("b",true),Power(Sinh(v_),$p("n",true)))),p_))),
    Condition(Power(Plus(b,Times(a,Power(Coth(v),n))),p),And(And(And(IntegerQ(List(m,n,p)),Greater(n,C0)),Less(p,C0)),Equal(m,Times(Times(CN1,n),p))))),
SetDelayed(TrigSimplifyAux(Times(Power(Cosh(v_),$p("m",true)),Power(Plus(Times($p("a",true),Power(Cosh(v_),$p("n",true))),Times($p("b",true),Power(Sinh(v_),$p("n",true)))),p_))),
    Condition(Power(Plus(a,Times(b,Power(Tanh(v),n))),p),And(And(And(IntegerQ(List(m,n,p)),Greater(n,C0)),Less(p,C0)),Equal(m,Times(Times(CN1,n),p))))),
SetDelayed(TrigSimplifyAux(Power(Plus(Times($p("a",true),Cosh(v_)),Times($p("b",true),Sinh(v_))),n_)),
    Condition(Power(Plus(Times(Cosh(v),Power(a,CN1)),Times(CN1,Times(Sinh(v),Power(b,CN1)))),Times(CN1,n)),And(And(IntegerQ(n),Less(n,C0)),ZeroQ(Plus(Power(a,C2),Times(CN1,Power(b,C2))))))),
SetDelayed(TrigSimplifyAux(u_),
    u),
SetDelayed(SmartTrigExpand(Times(Sec(u_),Sin(Times(n_,u_))),$p("x",$s("Symbol"))),
    Condition(Sum(Times(Times(Power(CN1,Plus(k,Times(n,C1D2))),C2),Sin(Times(Plus(Times(C2,k),Times(CN1,C1)),u))),List(k,C1,Times(n,C1D2))),And(And(EvenQ(n),Greater(n,C1)),Not(FreeQ(u,x))))),
SetDelayed(SmartTrigExpand(Times(Sec(u_),Sin(Times(n_,u_))),$p("x",$s("Symbol"))),
    Condition(Plus(Times(Power(CN1,Times(Plus(n,Times(CN1,C1)),C1D2)),Tan(u)),Sum(Times(Times(Power(CN1,Plus(k,Times(Plus(n,Times(CN1,C1)),C1D2))),C2),Sin(Times(Times(C2,k),u))),List(k,C1,Times(Plus(n,Times(CN1,C1)),C1D2)))),And(And(OddQ(n),Greater(n,C1)),Not(FreeQ(u,x))))),
SetDelayed(SmartTrigExpand(Times(Csc(u_),Cos(Times(n_,u_))),$p("x",$s("Symbol"))),
    Condition(Plus(Csc(u),Times(CN1,Sum(Times(C2,Sin(Times(Plus(Times(C2,k),Times(CN1,C1)),u))),List(k,C1,Times(n,C1D2))))),And(And(EvenQ(n),Greater(n,C1)),Not(FreeQ(u,x))))),
SetDelayed(SmartTrigExpand(Times(Csc(u_),Cos(Times(n_,u_))),$p("x",$s("Symbol"))),
    Condition(Plus(Cot(u),Times(CN1,Sum(Times(C2,Sin(Times(Times(C2,k),u))),List(k,C1,Times(Plus(n,Times(CN1,C1)),C1D2))))),And(And(OddQ(n),Greater(n,C1)),Not(FreeQ(u,x))))),
SetDelayed(SmartTrigExpand(Times(Sech(u_),Sinh(Times(n_,u_))),$p("x",$s("Symbol"))),
    Condition(Sum(Times(Times(Power(CN1,Plus(k,Times(n,C1D2))),C2),Sinh(Times(Plus(Times(C2,k),Times(CN1,C1)),u))),List(k,C1,Times(n,C1D2))),And(And(EvenQ(n),Greater(n,C1)),Not(FreeQ(u,x))))),
SetDelayed(SmartTrigExpand(Times(Sech(u_),Sinh(Times(n_,u_))),$p("x",$s("Symbol"))),
    Condition(Plus(Times(Power(CN1,Times(Plus(n,Times(CN1,C1)),C1D2)),Tanh(u)),Sum(Times(Times(Power(CN1,Plus(k,Times(Plus(n,Times(CN1,C1)),C1D2))),C2),Sinh(Times(Times(C2,k),u))),List(k,C1,Times(Plus(n,Times(CN1,C1)),C1D2)))),And(And(OddQ(n),Greater(n,C1)),Not(FreeQ(u,x))))),
SetDelayed(SmartTrigExpand(Times(Csch(u_),Cosh(Times(n_,u_))),$p("x",$s("Symbol"))),
    Condition(Plus(Csch(u),Sum(Times(C2,Sinh(Times(Plus(Times(C2,k),Times(CN1,C1)),u))),List(k,C1,Times(n,C1D2)))),And(And(EvenQ(n),Greater(n,C1)),Not(FreeQ(u,x))))),
SetDelayed(SmartTrigExpand(Times(Csch(u_),Cosh(Times(n_,u_))),$p("x",$s("Symbol"))),
    Condition(Plus(Coth(u),Sum(Times(C2,Sinh(Times(Times(C2,k),u))),List(k,C1,Times(Plus(n,Times(CN1,C1)),C1D2)))),And(And(OddQ(n),Greater(n,C1)),Not(FreeQ(u,x))))),
SetDelayed(SmartTrigExpand(Times(Power(Csch(u_),C2),Cosh(Times(n_,u_))),$p("x",$s("Symbol"))),
    Condition(Plus(Plus(n,Power(Csch(u),C2)),Sum(Times(Times(C4,Plus(Times(n,C1D2),Times(CN1,k))),Cosh(Times(Times(C2,k),u))),List(k,C1,Times(n,C1D2)))),And(And(EvenQ(n),Greater(n,C1)),Not(FreeQ(u,x))))),
SetDelayed(SmartTrigExpand(Times(Power(Csch(u_),C2),Cosh(Times(n_,u_))),$p("x",$s("Symbol"))),
    Condition(Plus(Times(Coth(u),Csch(u)),Sum(Times(Times(C4,Plus(Times(Plus(n,C1),C1D2),Times(CN1,k))),Cosh(Times(Plus(Times(C2,k),Times(CN1,C1)),u))),List(k,C1,Times(Plus(n,C1),C1D2)))),And(And(OddQ(n),Greater(n,C1)),Not(FreeQ(u,x))))),
SetDelayed(SmartTrigExpand(Times(Power(Csch(u_),C3),Cosh(Times(n_,u_))),$p("x",$s("Symbol"))),
    Condition(Plus(Plus(Times(Plus(Power(n,C2),Times(CN1,C1)),Times(Coth(u),C1D2)),Times(Coth(u),Power(Csch(u),C2))),Sum(Times(Times(integer(8L),Binomial(Plus(Times(Plus(n,C1),C1D2),Times(CN1,k)),C2)),Sinh(Times(Times(C2,k),u))),List(k,C1,Times(Plus(n,Times(CN1,C3)),C1D2)))),And(And(OddQ(n),Greater(n,C1)),Not(FreeQ(u,x))))),
SetDelayed(SmartTrigExpand(Power(u_,n_),$p("x",$s("Symbol"))),
    Condition(Module(List(Set($s("tmp"),SmartTrigExpand(u,x))),Condition(Expand(Power($s("tmp"),n),x),SumQ($s("tmp")))),And(And(NonsumQ(u),IntegerQ(n)),Greater(n,C1)))),
SetDelayed(SmartTrigExpand(Times(u_,v_),$p("x",$s("Symbol"))),
    Condition(Module(List(Set($s("tmp1"),SmartTrigExpand(u,x)),Set($s("tmp2"),SmartTrigExpand(v,x))),Condition(Distribute(Times($s("tmp1"),$s("tmp2"))),Or(SumQ($s("tmp1")),SumQ($s("tmp2"))))),And(NonsumQ(u),NonsumQ(v)))),
SetDelayed(SmartTrigExpand(u_,$p("x",$s("Symbol"))),
    u),
SetDelayed(Simp($p("expn")),
    If(AtomQ($s("expn")),$s("expn"),If(Or(Or(SameQ(Head($s("expn")),$s("If")),SameQ(Head($s("expn")),$s("Int"))),SameQ(Head($s("expn")),$s("Dif"))),$s("expn"),SimpAux(Map($s("Integrate::Simp"),$s("expn")))))),
SetDelayed(SimpAux($p("expn")),
    Condition(Module(List(Set($s("tmp"),ContentFactor($s("expn"))),$s("lst"),Set(i,C1),j),If(UnsameQ($s("tmp"),$s("expn")),CompoundExpression(Set($s("tmp"),Simp($s("tmp"))),If(ProductQ($s("tmp")),ContentFactor($s("tmp")),$s("tmp"))),CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(CompoundExpression(Set($s("lst"),Apply($s("List"),$s("expn"))),If(And(And(And(And(And(And(And(And(GreaterEqual(Length($s("lst")),C4),RationalQ(Part($s("lst"),C1))),PowerQ(Part($s("lst"),C2))),RationalQ(Part($s("lst"),C2,C1))),RationalQ(Part($s("lst"),C2,C2))),SqrtNumberSumQ(Part($s("lst"),C3))),PowerQ(Part($s("lst"),C4))),SqrtNumberSumQ(Part($s("lst"),C4,C1))),RationalQ(Part($s("lst"),C4,C2))),Set($s("lst"),Join(List(Part($s("lst"),C3),Part($s("lst"),C4),Part($s("lst"),C1),Part($s("lst"),C2)),Drop($s("lst"),C4))))),If(And(And(And(And(And(And(And(GreaterEqual(Length($s("lst")),C3),PowerQ(Part($s("lst"),C1))),RationalQ(Part($s("lst"),C1,C1))),RationalQ(Part($s("lst"),C1,C2))),SqrtNumberSumQ(Part($s("lst"),C2))),PowerQ(Part($s("lst"),C3))),SqrtNumberSumQ(Part($s("lst"),C3,C1))),RationalQ(Part($s("lst"),C3,C2))),Set($s("lst"),Join(List(Part($s("lst"),C2),Part($s("lst"),C3),Part($s("lst"),C1)),Drop($s("lst"),C3))))),While(True,If(Equal(i,Length($s("lst"))),Break(),CompoundExpression(Set(j,Plus(i,C1)),While(True,If(Greater(j,Length($s("lst"))),CompoundExpression(Increment(i),Break()),CompoundExpression(Set($s("tmp"),SimpProduct(Part($s("lst"),i),Part($s("lst"),j))),If(UnsameQ($s("tmp"),Times(Part($s("lst"),i),Part($s("lst"),j))),If(ProductQ($s("tmp")),CompoundExpression(CompoundExpression(Set(Part($s("lst"),i),First($s("tmp"))),Set(Part($s("lst"),j),Rest($s("tmp")))),Break()),CompoundExpression(CompoundExpression(CompoundExpression(Set(Part($s("lst"),i),$s("tmp")),Set($s("lst"),Delete($s("lst"),j))),Set(i,C1)),Break())),CompoundExpression(Set($s("tmp"),SimpProduct(Part($s("lst"),j),Part($s("lst"),i))),If(UnsameQ($s("tmp"),Times(Part($s("lst"),j),Part($s("lst"),i))),If(ProductQ($s("tmp")),CompoundExpression(CompoundExpression(Set(Part($s("lst"),i),First($s("tmp"))),Set(Part($s("lst"),j),Rest($s("tmp")))),Break()),CompoundExpression(CompoundExpression(CompoundExpression(Set(Part($s("lst"),i),$s("tmp")),Set($s("lst"),Delete($s("lst"),j))),Set(i,C1)),Break())),Increment(j))))))))))),Set($s("tmp"),Apply($s("Times"),$s("lst")))),If(ProductQ($s("tmp")),ContentFactor($s("tmp")),$s("tmp"))))),ProductQ($s("expn")))),
SetDelayed(SimpAux($p("expn")),
    Condition(Module(List(Set($s("lst"),Apply($s("List"),$s("expn"))),Set(i,C1),j,$s("tmp")),CompoundExpression(While(True,If(Equal(i,Length($s("lst"))),Break(),CompoundExpression(Set(j,Plus(i,C1)),While(True,If(Greater(j,Length($s("lst"))),CompoundExpression(Increment(i),Break()),CompoundExpression(Set($s("tmp"),SimpSum(Part($s("lst"),i),Part($s("lst"),j))),If(UnsameQ($s("tmp"),Plus(Part($s("lst"),i),Part($s("lst"),j))),If(SumQ($s("tmp")),CompoundExpression(CompoundExpression(Set(Part($s("lst"),i),First($s("tmp"))),Set(Part($s("lst"),j),Rest($s("tmp")))),Break()),CompoundExpression(CompoundExpression(Set(Part($s("lst"),i),$s("tmp")),Set($s("lst"),Delete($s("lst"),j))),Break())),CompoundExpression(Set($s("tmp"),SimpSum(Part($s("lst"),j),Part($s("lst"),i))),If(UnsameQ($s("tmp"),Plus(Part($s("lst"),j),Part($s("lst"),i))),If(SumQ($s("tmp")),CompoundExpression(CompoundExpression(Set(Part($s("lst"),i),First($s("tmp"))),Set(Part($s("lst"),j),Rest($s("tmp")))),Break()),CompoundExpression(CompoundExpression(Set(Part($s("lst"),i),$s("tmp")),Set($s("lst"),Delete($s("lst"),j))),Break())),Increment(j)))))))))),Apply($s("Plus"),$s("lst")))),SumQ($s("expn")))),
SetDelayed(SimpAux(Power(Plus(a_,b_),m_)),
    Condition(SimpAux(Power(Plus(Times(a,Power(Plus(Power(a,C2),Times(CN1,Power(b,C2))),CN1)),Times(CN1,Times(b,Power(Plus(Power(a,C2),Times(CN1,Power(b,C2))),CN1)))),Times(CN1,m))),And(And(And(IntegerQ(m),Less(m,C0)),SqrtNumberQ(a)),SqrtNumberQ(b)))),
SetDelayed(SimpAux(Power(u_,m_)),
    Condition(Expand(Power(u,m)),And(And(IntegerQ(m),Greater(m,C0)),SqrtNumberSumQ(u)))),
SetDelayed(SimpAux(Power(u_,m_)),
    Condition(Times(Power(CN1,m),SimpAux(Power(Times(CN1,u),m))),And(And(FractionQ(m),SqrtNumberSumQ(u)),NegativeQ(u)))),
SetDelayed(SimpAux(Power(u_,m_)),
    Condition(SimpAux(Power(Expand(Power(u,Denominator(Times(C1,Power(m,CN1))))),Times(C1,Power(Numerator(Times(C1,Power(m,CN1))),CN1)))),And(And(And(FractionQ(m),Greater(Denominator(Times(C1,Power(m,CN1))),C1)),SqrtNumberSumQ(u)),PositiveQ(u)))),
SetDelayed(SimpAux(Power(Plus(a_,b_),m_)),
    Condition(Module(List(Set($s("tmp"),CommonNumericFactors(List(a,b)))),CompoundExpression(Set($s("tmp"),Abs(NumericFactor(Power(Part($s("tmp"),C1),Times(C1,Power(Denominator(m),CN1)))))),Condition(Times(Power($s("tmp"),Numerator(m)),SimpAux(Power(Plus(Times(a,Power(Power($s("tmp"),Denominator(m)),CN1)),Times(b,Power(Power($s("tmp"),Denominator(m)),CN1))),m))),Unequal($s("tmp"),C1)))),And(And(And(FractionQ(m),Equal(Denominator(Times(C1,Power(m,CN1))),C1)),SqrtNumberQ(a)),SqrtNumberQ(b)))),
SetDelayed(SimpAux(Power(Plus(a_,b_),m_)),
    Condition(Module(List(Set($s("tmp1"),Abs(Numerator(NumericFactor(Power(Plus(Power(a,C2),Times(CN1,Power(b,C2))),Times(C1,Power(Denominator(m),CN1))))))),$s("tmp2")),CompoundExpression(Set($s("tmp2"),Times(Plus(Power(a,C2),Times(CN1,Power(b,C2))),Power(Power($s("tmp1"),Denominator(m)),CN1))),Condition(Times(Power($s("tmp1"),Numerator(m)),SimpAux(Power(Plus(Times(a,Power($s("tmp2"),CN1)),Times(CN1,Times(b,Power($s("tmp2"),CN1)))),Times(CN1,m)))),And(And(IntegerQ(Times(Power(a,C2),Power(Power($s("tmp2"),C2),CN1))),IntegerQ(Times(Power(b,C2),Power(Power($s("tmp2"),C2),CN1)))),Or(And(Equal(Power($s("tmp2"),C2),C1),Less(m,C0)),Greater(Power($s("tmp2"),C2),C1)))))),And(And(And(And(And(And(FractionQ(m),Equal(Denominator(Times(C1,Power(m,CN1))),C1)),SqrtNumberQ(a)),SqrtNumberQ(b)),PositiveQ(Plus(Power(a,C2),Times(CN1,Power(b,C2))))),IntegerQ(Power(a,C2))),IntegerQ(Power(b,C2))))),
SetDelayed(SimpAux(Power(Times(c_,Plus(a_,b_)),m_)),
    Condition(SimpAux(Power(Plus(Times(c,a),Times(c,b)),m)),And(And(And(FractionQ(m),SqrtNumberQ(a)),SqrtNumberQ(b)),SqrtNumberQ(c)))),
SetDelayed(SimpAux(Power(Plus(a_,b_),m_)),
    Condition(Module(List(Set(q,Sqrt(Plus(Power(a,C2),Times(CN1,Power(b,C2)))))),Condition(SimpAux(Power(Plus(Sqrt(Times(Plus(a,q),C1D2)),Sqrt(Times(Plus(a,Times(CN1,q)),C1D2))),Times(C2,m))),RationalQ(q))),And(And(And(And(And(EvenQ(Times(C1,Power(m,CN1))),RationalQ(a)),Greater(a,C0)),SqrtNumberQ(b)),PositiveQ(b)),PositiveQ(Plus(Power(a,C2),Times(CN1,Power(b,C2))))))),
SetDelayed(SimpAux(Power(Plus(a_,b_),m_)),
    Condition(Module(List(Set(q,Sqrt(Plus(Power(a,C2),Times(CN1,Power(b,C2)))))),Condition(SimpAux(Power(Plus(Sqrt(Times(Plus(a,q),C1D2)),Times(CN1,Sqrt(Times(Plus(a,Times(CN1,q)),C1D2)))),Times(C2,m))),RationalQ(q))),And(And(And(And(And(EvenQ(Times(C1,Power(m,CN1))),RationalQ(a)),Greater(a,C0)),SqrtNumberQ(b)),NegativeQ(b)),PositiveQ(Plus(Power(a,C2),Times(CN1,Power(b,C2))))))),
SetDelayed(SimpProduct(c_,Plus(a_,b_)),
    Condition(Plus(Times(c,a),Times(c,b)),And(And(SqrtNumberQ(a),SqrtNumberQ(b)),SqrtNumberQ(c)))),
SetDelayed(SimpProduct(c_,Power(u_,m_)),
    Condition(Times(CN1,SimpProduct(Times(CN1,c),Power(u,m))),And(And(And(RationalQ(m),SqrtNumberSumQ(u)),SqrtNumberQ(c)),NegativeQ(c)))),
SetDelayed(SimpProduct(Power(u_,m_),Power(v_,n_)),
    Condition(Times(Power(CN1,m),SimpProduct(Power(Times(CN1,u),m),Power(v,n))),And(And(And(RationalQ(List(m,n)),SqrtNumberSumQ(u)),SqrtNumberSumQ(v)),NegativeQ(u)))),
SetDelayed(SimpProduct(c_,Power(Plus(a_,b_),m_)),
    Condition(SimpAux(Power(Plus(Times(a,Power(c,Times(C1,Power(m,CN1)))),Times(b,Power(c,Times(C1,Power(m,CN1))))),m)),And(And(And(And(And(RationalQ(m),SqrtNumberQ(a)),SqrtNumberQ(b)),SqrtNumberQ(Power(c,Times(C1,Power(m,CN1))))),PositiveQ(c)),Not(RationalQ(c))))),
SetDelayed(SimpProduct(Power(u_,m_),v_),
    Condition(Module(List(Set($s("gcd"),GCD(m,C1)),w),CompoundExpression(Set(w,Expand(Times(Power(u,Times(m,Power($s("gcd"),CN1))),Power(Times(CN1,v),Times(C1,Power($s("gcd"),CN1)))))),Condition(Times(CN1,SimpAux(Power(w,$s("gcd")))),Or(SqrtNumberQ(w),SqrtNumberSumQ(NonnumericFactors(w)))))),And(And(And(And(And(RationalQ(m),Greater(m,C0)),SqrtNumberSumQ(u)),SqrtNumberSumQ(v)),PositiveQ(u)),NegativeQ(v)))),
SetDelayed(SimpProduct(Power(u_,m_),v_),
    Condition(Module(List(Set($s("gcd"),GCD(m,C1)),w),CompoundExpression(Set(w,Simp(Times(Power(u,Times(m,Power($s("gcd"),CN1))),Power(Times(CN1,v),Times(C1,Power($s("gcd"),CN1)))))),Condition(Times(CN1,SimpAux(Power(w,$s("gcd")))),Or(SqrtNumberQ(w),SqrtNumberSumQ(NonnumericFactors(w)))))),And(And(And(And(And(RationalQ(m),Less(m,C0)),SqrtNumberSumQ(u)),SqrtNumberSumQ(v)),PositiveQ(u)),NegativeQ(v)))),
SetDelayed(SimpProduct(Power(u_,$p("m",true)),Power(v_,$p("n",true))),
    Condition(Module(List(Set($s("gcd"),GCD(m,n)),w),CompoundExpression(Set(w,Expand(Times(Power(u,Times(m,Power($s("gcd"),CN1))),Power(v,Times(n,Power($s("gcd"),CN1)))))),Condition(SimpAux(Power(w,$s("gcd"))),Or(SqrtNumberQ(w),SqrtNumberSumQ(w))))),And(And(And(And(And(And(RationalQ(List(m,n)),Greater(m,C0)),Greater(n,C0)),SqrtNumberSumQ(u)),SqrtNumberSumQ(v)),PositiveQ(u)),PositiveQ(v)))),
SetDelayed(SimpProduct(Power(u_,m_),Power(v_,$p("n",true))),
    Condition(Module(List(Set($s("gcd"),GCD(m,n)),w),CompoundExpression(Set(w,Simp(Times(Power(u,Times(m,Power($s("gcd"),CN1))),Power(v,Times(n,Power($s("gcd"),CN1)))))),Condition(SimpAux(Power(w,$s("gcd"))),Or(SqrtNumberQ(w),SqrtNumberSumQ(w))))),And(And(And(And(And(And(RationalQ(List(m,n)),Less(m,C0)),Greater(n,C0)),SqrtNumberSumQ(u)),SqrtNumberSumQ(v)),PositiveQ(u)),PositiveQ(v)))),
SetDelayed(SimpAux(Power(u_,n_)),
    Condition(Times(Power(CN1,n),SimpAux(Power(Map($s("Minus"),u),n))),And(And(SumQ(u),IntegerQ(n)),Less(NumericFactor(Part(u,C1)),C0)))),
SetDelayed(SimpProduct(u_,v_),
    Condition(Times(CN1,SimpAux(Times(Map($s("Minus"),u),v))),And(And(SumQ(u),Less(NumericFactor(Part(u,C1)),C0)),Not(And(SqrtNumberSumQ(u),SqrtNumberSumQ(v)))))),
SetDelayed(SimpAux(Power(u_,n_)),
    Condition(Module(List(Set($s("lst"),CommonFactors(Apply($s("List"),u)))),Condition(Times(Simp(Power(Part($s("lst"),C1),n)),SimpAux(Power(Apply($s("Plus"),Rest($s("lst"))),n))),UnsameQ(Part($s("lst"),C1),C1))),And(SumQ(u),IntegerQ(n)))),
SetDelayed(SimpAux(Power(u_,n_)),
    Condition(Module(List(Set($s("lst"),CommonNumericFactors(Apply($s("List"),u)))),Condition(Times(Power(Part($s("lst"),C1),n),SimpAux(Power(Apply($s("Plus"),Rest($s("lst"))),n))),UnsameQ(Part($s("lst"),C1),C1))),And(And(SumQ(u),Not(IntegerQ(n))),Not(SqrtNumberSumQ(u))))),
SetDelayed(SimpProduct(Power(Plus(a_,b_),m_),Power(Plus(c_,d_),$p("n",true))),
    Condition(Simp(Times(Power(Plus(a,b),Plus(m,n)),Power(Times(d,Power(b,CN1)),n))),And(And(IntegerQ(n),ZeroQ(Plus(Times(a,d),Times(CN1,Times(b,c))))),Not(SqrtNumberSumQ(Plus(a,b)))))),
SetDelayed(SimpProduct(Power(u_,$p("m",true)),Power(v_,$p("n",true))),
    Condition(Times(Power(CN1,n),Power(u,Plus(m,n))),And(And(And(IntegerQ(n),ZeroQ(Plus(u,v))),Not(RationalQ(u))),Or(Not(IntegerQ(m)),LessEqual(SmartLeafCount(u),SmartLeafCount(v)))))),
SetDelayed(SimpProduct(Power(Plus(a_,b_),$p("n",true)),Power(Plus(c_,d_),$p("n",true))),
    Condition(Simp(Power(Plus(Power(a,C2),Times(CN1,Power(b,C2))),n)),And(And(ZeroQ(Plus(a,Times(CN1,c))),ZeroQ(Plus(b,d))),IntegerQ(n)))),
SetDelayed(SimpSum(Times(a_,Power(u_,CN1)),Times(b_,Power(u_,CN1))),
    Condition(C1,SameQ(Plus(a,b),u))),
SetDelayed(SimpSum(a_,Times($p("b",true),Power(Plus(c_,d_),C2))),
    Condition(Simp(Times(Times(b,d),Plus(Times(C2,c),d))),ZeroQ(Plus(a,Times(b,Power(c,C2)))))),
SetDelayed(SimpSum(a_,Times($p("b",true),Times(Plus($p("c",true),d_),Power(Plus(e_,f_),CN1)))),
    Condition(SimpAux(Times(ContentFactor(Plus(Times(a,e),Times(b,c))),Power(Plus(e,f),CN1))),And(And(And(And(And(And(NonsumQ(a),NonsumQ(b)),NonsumQ(c)),NonsumQ(d)),NonsumQ(e)),NonsumQ(f)),ZeroQ(Plus(Times(a,f),Times(b,d)))))),
SetDelayed(SimpProduct(Power(v_,$p("m",true)),Power(Plus(a_,Times($p("b",true),Power(v_,n_))),$p("p",true))),
    Condition(SimpAux(Times(Power(v,Plus(m,Times(n,p))),Simp(Power(Plus(Times(a,Power(v,Times(CN1,n))),b),p)))),And(And(And(IntegerQ(p),RationalQ(List(m,n))),Less(n,C0)),Not(SqrtNumberSumQ(Plus(a,Times(b,Power(v,n)))))))),
SetDelayed(SimpProduct(Power(c_,$p("m",true)),Power(Plus(Times($p("a",true),Power(c_,$p("p",true))),Times($p("b",true),Power(c_,$p("q",true)))),$p("n",true))),
    Condition(SimpAux(Power(Plus(Times(a,Power(c,Plus(p,Times(m,Power(n,CN1))))),Times(b,Power(c,Plus(q,Times(m,Power(n,CN1)))))),n)),And(IntegerQ(n),RationalQ(List(m,p,q))))),
SetDelayed(SimpSum(Times($p("u",true),Power(Sqrt(n_),CN1)),Times($p("v",true),Sqrt(n_))),
    Condition(Times(Plus(C1,Times(n,Times(NumericFactor(v),Power(NumericFactor(u),CN1)))),Times(u,Power(Sqrt(n),CN1))),And(RationalQ(n),SameQ(NonnumericFactors(u),NonnumericFactors(v))))),
SetDelayed(SimpSum(u_,Times(v_,Plus(a_,b_))),
    Condition(Module(List(Set($s("tmp"),SimpAux(Times(v,a)))),Condition(SimpAux(Plus(Times(Plus(C1,Times(NumericFactor($s("tmp")),Power(NumericFactor(u),CN1))),u),SimpAux(Times(v,b)))),SameQ(NonnumericFactors($s("tmp")),NonnumericFactors(u)))),And(And(NonsumQ(a),NonsumQ(u)),NonsumQ(v)))),
SetDelayed(SimpSum(Times($p("u",true),Plus(a_,b_)),Times(v_,Plus(c_,d_))),
    Condition(Module(List(Set($s("tmp1"),SimpAux(Times(v,c))),Set($s("tmp2"),SimpAux(Times(u,a)))),Condition(CompoundExpression(Set($s("tmp1"),Times(NumericFactor($s("tmp1")),Power(NumericFactor($s("tmp2")),CN1))),If(Or(IntegerQ($s("tmp1")),Less(Less(integer(-2L),$s("tmp1")),C0)),SimpAux(Plus(Times(u,Plus(Times(Plus(C1,$s("tmp1")),a),b)),SimpAux(Times(v,d)))),SimpAux(Plus(SimpAux(Times(u,b)),Times(v,Plus(Times(Plus(C1,Times(C1,Power($s("tmp1"),CN1))),c),d)))))),SameQ(NonnumericFactors($s("tmp1")),NonnumericFactors($s("tmp2"))))),And(And(And(NonsumQ(a),NonsumQ(c)),NonsumQ(u)),NonsumQ(v)))),
SetDelayed(SimpAux(Power(E,Times($p("c",true),Plus(Times($p("a",true),Log(v_)),b_)))),
    Times(SimpAux(Power(v,Times(a,c))),SimpAux(Power(E,Times(b,c))))),
SetDelayed(SimpAux(Power(E,Times(n_,ArcTanh(v_)))),
    Condition(Simp(Power(Plus(CN1,Times(C2,Power(Plus(C1,Times(CN1,v)),CN1))),Times(n,C1D2))),EvenQ(n))),
SetDelayed(SimpProduct(Power(E,Times($p("n",true),ArcTanh(v_))),Power(Plus(C1,w_),m_)),
    Condition(Simp(Times(Power(Plus(C1,Times(CN1,v)),Plus(m,Times(CN1,Times(n,C1D2)))),Power(Plus(C1,v),Plus(m,Times(n,C1D2))))),And(And(OddQ(n),HalfIntegerQ(m)),ZeroQ(Plus(Power(v,C2),w))))),
SetDelayed(SimpAux(Power(E,Times(n_,ArcCoth(v_)))),
    Condition(Simp(Power(Plus(C1,Times(CN1,Times(C2,Power(Plus(C1,Times(CN1,v)),CN1)))),Times(n,C1D2))),EvenQ(n))),
SetDelayed(SimpProduct(Power(E,Times($p("n",true),ArcCoth(v_))),Power(Plus(C1,w_),m_)),
    Condition(Simp(Times(Power(Plus(CN1,v),Plus(m,Times(CN1,Times(n,C1D2)))),Times(Power(Plus(C1,v),Plus(m,Times(n,C1D2))),Power(Power(v,Times(C2,m)),CN1)))),And(And(OddQ(n),HalfIntegerQ(m)),ZeroQ(Plus(Power(v,C2),Times(C1,Power(w,CN1))))))),
SetDelayed(SimpAux(Power(E,Times($p("n",true),ProductLog(v_)))),
    Condition(Simp(Times(Power(v,n),Power(Power(ProductLog(v),n),CN1))),And(IntegerQ(n),Greater(n,C0)))),
SetDelayed(SimpSum(Times($p("u",true),Power(Cos(z_),C2)),Times($p("v",true),Power(Sin(z_),C2))),
    Condition(u,SameQ(u,v))),
SetDelayed(SimpSum(Times($p("u",true),Power(Sec(z_),C2)),Times($p("v",true),Power(Tan(z_),C2))),
    Condition(u,SameQ(u,Times(CN1,v)))),
SetDelayed(SimpSum(Times($p("u",true),Power(Csc(z_),C2)),Times($p("v",true),Power(Cot(z_),C2))),
    Condition(u,SameQ(u,Times(CN1,v)))),
SetDelayed(SimpSum(u_,Times($p("v",true),Power(Sin(z_),C2))),
    Condition(Times(u,Power(Cos(z),C2)),SameQ(u,Times(CN1,v))))
  );
}
