package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface ArcCosRules {
  final public static IAST RULES = List(
    ISet(ArcCos(C0),
      Times(C1D2,Pi)),
    ISet(ArcCos(C1D2),
      Times(C1D3,Pi)),
    ISet(ArcCos(CN1D2),
      Times(QQ(2L,3L),Pi)),
    ISet(ArcCos(Times(C1D2,CSqrt2)),
      Times(C1D4,Pi)),
    ISet(ArcCos(Times(CN1D2,CSqrt2)),
      Times(QQ(3L,4L),Pi)),
    ISet(ArcCos(Times(C1D2,CSqrt3)),
      Times(QQ(1L,6L),Pi)),
    ISet(ArcCos(Times(CN1D2,CSqrt3)),
      Times(QQ(5L,6L),Pi)),
    ISet(ArcCos(Times(C1D2,Sqrt(Plus(C2,CSqrt2)))),
      Times(QQ(1L,8L),Pi)),
    ISet(ArcCos(Times(CN1D2,Sqrt(Plus(C2,CSqrt2)))),
      Times(QQ(7L,8L),Pi)),
    ISet(ArcCos(Times(C1D2,Plus(C1,CSqrt3),C1DSqrt2)),
      Times(QQ(1L,12L),Pi)),
    ISet(ArcCos(Times(C1D2,Plus(CN1,Times(CN1,CSqrt3)),C1DSqrt2)),
      Times(QQ(11L,12L),Pi)),
    ISet(ArcCos(C1),
      C0),
    ISet(ArcCos(CN1),
      Pi),
    ISet(ArcCos(CI),
      Plus(Times(C1D2,Pi),Times(CI,Log(Plus(CN1,CSqrt2))))),
    ISet(ArcCos(CNI),
      Plus(Times(C1D2,Pi),Times(CI,Log(Plus(C1,CSqrt2))))),
    ISet(ArcCos(CInfinity),
      DirectedInfinity(CI)),
    ISet(ArcCos(CNInfinity),
      DirectedInfinity(CNI)),
    ISet(ArcCos(DirectedInfinity(CI)),
      DirectedInfinity(CNI)),
    ISet(ArcCos(DirectedInfinity(CNI)),
      DirectedInfinity(CI)),
    ISet(ArcCos(CComplexInfinity),
      CComplexInfinity)
  );
}
