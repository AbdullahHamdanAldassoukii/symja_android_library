package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface SechRules {
  final public static IAST RULES = List(
    ISet(Sech(C0),
      C1),
    ISet(Sech(Times(QQ(1L,6L),Pi,CI)),
      Times(C2,C1DSqrt3)),
    ISet(Sech(Times(QQ(1L,5L),Pi,CI)),
      Plus(CN1,CSqrt5)),
    ISet(Sech(Times(C1D4,Pi,CI)),
      CSqrt2),
    ISet(Sech(Times(C1D3,Pi,CI)),
      C2),
    ISet(Sech(Times(QQ(2L,5L),Pi,CI)),
      Plus(C1,CSqrt5)),
    ISet(Sech(Times(C1D2,Pi,CI)),
      CComplexInfinity),
    ISet(Sech(Times(QQ(2L,3L),Pi,CI)),
      CN2),
    ISet(Sech(Times(QQ(3L,4L),Pi,CI)),
      Times(CN1,CSqrt2)),
    ISet(Sech(Times(QQ(4L,5L),Pi,CI)),
      Plus(C1,Times(CN1,CSqrt5))),
    ISet(Sech(Times(QQ(5L,6L),Pi,CI)),
      Times(CN2,C1DSqrt3)),
    ISet(Sech(Times(CI,Pi)),
      CN1),
    ISet(Sech(Times(QQ(7L,6L),Pi,CI)),
      Times(CN2,C1DSqrt3)),
    ISet(Sech(Times(QQ(6L,5L),Pi,CI)),
      Plus(C1,Times(CN1,CSqrt5))),
    ISet(Sech(Times(QQ(5L,4L),Pi,CI)),
      Times(CN1,CSqrt2)),
    ISet(Sech(Times(QQ(4L,3L),Pi,CI)),
      CN2),
    ISet(Sech(Times(QQ(7L,5L),Pi,CI)),
      Plus(CN1,Times(CN1,CSqrt5))),
    ISet(Sech(Times(QQ(3L,2L),Pi,CI)),
      CComplexInfinity),
    ISet(Sech(Times(QQ(8L,5L),Pi,CI)),
      Plus(C1,CSqrt5)),
    ISet(Sech(Times(QQ(5L,3L),Pi,CI)),
      C2),
    ISet(Sech(Times(QQ(7L,4L),Pi,CI)),
      CSqrt2),
    ISet(Sech(Times(QQ(9L,5L),Pi,CI)),
      Plus(CN1,CSqrt5)),
    ISet(Sech(Times(QQ(11L,6L),Pi,CI)),
      Times(C2,C1DSqrt3)),
    ISet(Sech(Times(C2,Pi,CI)),
      C1),
    ISet(Sech(CInfinity),
      C0),
    ISet(Sech(CComplexInfinity),
      Indeterminate)
  );
}