package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface SechRules {
  final public static IAST RULES = List(
    ISet(Sech(C0),
      C1),
    ISet(Sech(Times(CC(0L,1L,1L,6L),Pi)),
      Times(C2,C1DSqrt3)),
    ISet(Sech(Times(CC(0L,1L,1L,5L),Pi)),
      Plus(CN1,CSqrt5)),
    ISet(Sech(Times(CC(0L,1L,1L,4L),Pi)),
      CSqrt2),
    ISet(Sech(Times(CC(0L,1L,1L,3L),Pi)),
      C2),
    ISet(Sech(Times(CC(0L,1L,2L,5L),Pi)),
      Plus(C1,CSqrt5)),
    ISet(Sech(Times(CC(0L,1L,1L,2L),Pi)),
      CComplexInfinity),
    ISet(Sech(Times(CC(0L,1L,2L,3L),Pi)),
      CN2),
    ISet(Sech(Times(CC(0L,1L,3L,4L),Pi)),
      Times(CN1,CSqrt2)),
    ISet(Sech(Times(CC(0L,1L,4L,5L),Pi)),
      Plus(C1,Times(CN1,CSqrt5))),
    ISet(Sech(Times(CC(0L,1L,5L,6L),Pi)),
      Times(CN2,C1DSqrt3)),
    ISet(Sech(Times(CI,Pi)),
      CN1),
    ISet(Sech(Times(CC(0L,1L,7L,6L),Pi)),
      Times(CN2,C1DSqrt3)),
    ISet(Sech(Times(CC(0L,1L,6L,5L),Pi)),
      Plus(C1,Times(CN1,CSqrt5))),
    ISet(Sech(Times(CC(0L,1L,5L,4L),Pi)),
      Times(CN1,CSqrt2)),
    ISet(Sech(Times(CC(0L,1L,4L,3L),Pi)),
      CN2),
    ISet(Sech(Times(CC(0L,1L,7L,5L),Pi)),
      Plus(CN1,Times(CN1,CSqrt5))),
    ISet(Sech(Times(CC(0L,1L,3L,2L),Pi)),
      CComplexInfinity),
    ISet(Sech(Times(CC(0L,1L,8L,5L),Pi)),
      Plus(C1,CSqrt5)),
    ISet(Sech(Times(CC(0L,1L,5L,3L),Pi)),
      C2),
    ISet(Sech(Times(CC(0L,1L,7L,4L),Pi)),
      CSqrt2),
    ISet(Sech(Times(CC(0L,1L,9L,5L),Pi)),
      Plus(CN1,CSqrt5)),
    ISet(Sech(Times(CC(0L,1L,11L,6L),Pi)),
      Times(C2,C1DSqrt3)),
    ISet(Sech(Times(CC(0L,1L,2L,1L),Pi)),
      C1),
    ISet(Sech(CInfinity),
      C0),
    ISet(Sech(CComplexInfinity),
      Indeterminate)
  );
}