package org.matheclipse.core.integrate.rubi45;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctions.*;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.core.interfaces.ISymbol;

/** 
 * IndefiniteIntegrationRules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IntRules24 { 
  public static IAST RULES = List( 
ISetDelayed(Int(Times(Plus(pa_,Times(pb_DEFAULT,Power(x_,pn_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(c_DEFAULT,Power(x_,j_))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(CN1,Power(x,Plus(m,C1)),Plus(pa,Times(pb,Power(x,pn))),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),Plus(p,C1)),Power(Times(C2,a,pn,Plus(p,C1)),CN1)),Times(Power(Times(C2,a,pn,Plus(p,C1)),CN1),Int(Times(Power(x,m),Plus(Times(pa,Plus(m,Times(C2,pn,Plus(p,C1)),C1)),Times(pb,Plus(m,Times(pn,Plus(Times(C2,p),C3)),C1),Power(x,pn))),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),Plus(p,C1))),x))),And(And(And(And(And(FreeQ(List(a,c,pa,pb),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))),PositiveIntegerQ(pn)),RationalQ(m,p)),Less(p,CN1)),Less(m,Plus(pn,Times(CN1,C1)))))),
ISetDelayed(Int(Times(Plus(pa_,Times(pb_DEFAULT,Power(x_,pn_))),Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(c_DEFAULT,Power(x_,j_)),Times(b_DEFAULT,Power(x_,pn_))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(pb,Power(x,Plus(m,Times(CN1,pn),C1)),Power(Plus(a,Times(b,Power(x,pn)),Times(c,Power(x,Times(C2,pn)))),Plus(p,C1)),Power(Times(c,Plus(m,Times(pn,Plus(Times(C2,p),C1)),C1)),CN1)),Times(CN1,Power(Times(c,Plus(m,Times(pn,Plus(Times(C2,p),C1)),C1)),CN1),Int(Times(Power(x,Plus(m,Times(CN1,pn))),Simp(Plus(Times(a,pb,Plus(m,Times(CN1,pn),C1)),Times(Plus(Times(b,pb,Plus(m,Times(pn,p),C1)),Times(CN1,c,pa,Plus(m,Times(pn,Plus(Times(C2,p),C1)),C1))),Power(x,pn))),x),Power(Plus(a,Times(b,Power(x,pn)),Times(c,Power(x,Times(C2,pn)))),p)),x))),And(And(And(And(And(And(And(FreeQ(List(a,b,c,pa,pb),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))),NonzeroQ(Plus(Sqr(b),Times(CN1,C4,a,c)))),PositiveIntegerQ(pn)),RationalQ(m,p)),GreaterEqual(m,pn)),And(LessEqual(CN1,p),Less(p,C0))),Unequal(Plus(m,Times(pn,Plus(Times(C2,p),C1)),C1),C0)))),
ISetDelayed(Int(Times(Plus(pa_,Times(pb_DEFAULT,Power(x_,pn_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(c_DEFAULT,Power(x_,j_))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(pb,Power(x,Plus(m,Times(CN1,pn),C1)),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),Plus(p,C1)),Power(Times(c,Plus(m,Times(pn,Plus(Times(C2,p),C1)),C1)),CN1)),Times(CN1,Power(Times(c,Plus(m,Times(pn,Plus(Times(C2,p),C1)),C1)),CN1),Int(Times(Power(x,Plus(m,Times(CN1,pn))),Plus(Times(a,pb,Plus(m,Times(CN1,pn),C1)),Times(CN1,c,pa,Plus(m,Times(pn,Plus(Times(C2,p),C1)),C1),Power(x,pn))),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),p)),x))),And(And(And(And(And(And(FreeQ(List(a,c,pa,pb),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))),PositiveIntegerQ(pn)),RationalQ(m,p)),GreaterEqual(m,pn)),And(LessEqual(CN1,p),Less(p,C0))),Unequal(Plus(m,Times(pn,Plus(Times(C2,p),C1)),C1),C0)))),
ISetDelayed(Int(Times(Plus(pa_,Times(pb_DEFAULT,Power(x_,pn_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(c_DEFAULT,Power(x_,j_)),Times(b_DEFAULT,Power(x_,pn_))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(pa,Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,pn)),Times(c,Power(x,Times(C2,pn)))),Plus(p,C1)),Power(Times(a,Plus(m,C1)),CN1)),Times(Power(Times(a,Plus(m,C1)),CN1),Int(Times(Power(x,Plus(m,pn)),Simp(Plus(Times(a,pb,Plus(m,C1)),Times(CN1,pa,b,Plus(m,Times(pn,Plus(p,C1)),C1)),Times(CN1,c,pa,Plus(m,Times(C2,pn,Plus(p,C1)),C1),Power(x,pn))),x),Power(Plus(a,Times(b,Power(x,pn)),Times(c,Power(x,Times(C2,pn)))),p)),x))),And(And(And(And(And(And(And(FreeQ(List(a,b,c,pa,pb),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))),NonzeroQ(Plus(Sqr(b),Times(CN1,C4,a,c)))),PositiveIntegerQ(pn)),RationalQ(m,p)),LessEqual(m,Times(CN1,pn))),Or(And(LessEqual(CN1,p),Less(p,C0)),Equal(Plus(m,Times(pn,Plus(Times(C2,p),C1)),C1),C0))),Unequal(Plus(m,C1),C0)))),
ISetDelayed(Int(Times(Plus(pa_,Times(pb_DEFAULT,Power(x_,pn_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(c_DEFAULT,Power(x_,j_))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(pa,Power(x,Plus(m,C1)),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),Plus(p,C1)),Power(Times(a,Plus(m,C1)),CN1)),Times(Power(Times(a,Plus(m,C1)),CN1),Int(Times(Power(x,Plus(m,pn)),Plus(Times(a,pb,Plus(m,C1)),Times(CN1,c,pa,Plus(m,Times(C2,pn,Plus(p,C1)),C1),Power(x,pn))),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),p)),x))),And(And(And(And(And(And(FreeQ(List(a,c,pa,pb),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))),PositiveIntegerQ(pn)),RationalQ(m,p)),LessEqual(m,Times(CN1,pn))),And(LessEqual(CN1,p),Less(p,C0))),Unequal(Plus(m,C1),C0)))),
ISetDelayed(Int(Times(Plus(pa_,Times(pb_DEFAULT,Power(x_,pn_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(c_DEFAULT,Power(x_,j_DEFAULT)),Times(b_DEFAULT,Power(x_,pn_))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(pa,Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,pn)),Times(c,Power(x,Times(C2,pn)))),p)),x)),Times(pb,Int(Times(Power(x,Plus(m,pn)),Power(Plus(a,Times(b,Power(x,pn)),Times(c,Power(x,Times(C2,pn)))),p)),x))),And(FreeQ(List(a,b,c,pa,pb,m,pn,p),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))))),
ISetDelayed(Int(Times(Plus(pa_,Times(pb_DEFAULT,Power(x_,pn_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(c_DEFAULT,Power(x_,j_DEFAULT))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(pa,Int(Times(Power(x,m),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),p)),x)),Times(pb,Int(Times(Power(x,Plus(m,pn)),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),p)),x))),And(FreeQ(List(a,c,pa,pb,m,pn,p),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Plus(a_DEFAULT,Times(c_DEFAULT,Power(x_,j_DEFAULT)),Times(b_DEFAULT,Power(x_,pn_))),p_DEFAULT),Power(Plus(pd_DEFAULT,Times(pe_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Plus(Times(Power(Times(pd,pe),CN1),Int(Times(Power(x,m),Plus(Times(a,pe),Times(c,pd,Power(x,pn))),Power(Plus(a,Times(b,Power(x,pn)),Times(c,Power(x,Times(C2,pn)))),Plus(p,Times(CN1,C1)))),x)),Times(CN1,Plus(Times(c,Sqr(pd)),Times(CN1,b,pd,pe),Times(a,Sqr(pe))),Power(Times(pd,pe),CN1),Int(Times(Power(x,Plus(m,pn)),Power(Plus(a,Times(b,Power(x,pn)),Times(c,Power(x,Times(C2,pn)))),Plus(p,Times(CN1,C1))),Power(Plus(pd,Times(pe,Power(x,pn))),CN1)),x))),And(And(And(And(And(And(And(FreeQ(List(a,b,c,pd,pe),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))),NonzeroQ(Plus(Sqr(b),Times(CN1,C4,a,c)))),NonzeroQ(Plus(Times(c,Sqr(pd)),Times(CN1,b,pd,pe),Times(a,Sqr(pe))))),RationalQ(m,pn,p)),Less(m,C0)),Greater(pn,C0)),Greater(p,C0)))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Plus(a_,Times(c_DEFAULT,Power(x_,j_DEFAULT))),p_DEFAULT),Power(Plus(pd_DEFAULT,Times(pe_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Plus(Times(Power(Times(pd,pe),CN1),Int(Times(Power(x,m),Plus(Times(a,pe),Times(c,pd,Power(x,pn))),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),Plus(p,Times(CN1,C1)))),x)),Times(CN1,Plus(Times(c,Sqr(pd)),Times(a,Sqr(pe))),Power(Times(pd,pe),CN1),Int(Times(Power(x,Plus(m,pn)),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),Plus(p,Times(CN1,C1))),Power(Plus(pd,Times(pe,Power(x,pn))),CN1)),x))),And(And(And(And(And(And(FreeQ(List(a,c,pd,pe),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))),NonzeroQ(Plus(Times(c,Sqr(pd)),Times(a,Sqr(pe))))),RationalQ(m,pn,p)),Less(m,C0)),Greater(pn,C0)),Greater(p,C0)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(c_DEFAULT,Power(x_,j_DEFAULT)),Times(b_DEFAULT,Power(x_,pn_))),p_),Power(Plus(pd_DEFAULT,Times(pe_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Plus(Times(Power(Plus(Times(c,Sqr(pd)),Times(CN1,b,pd,pe),Times(a,Sqr(pe))),CN1),Int(Times(Power(x,Plus(m,Times(CN1,pn))),Plus(Times(a,pe),Times(c,pd,Power(x,pn))),Power(Plus(a,Times(b,Power(x,pn)),Times(c,Power(x,Times(C2,pn)))),p)),x)),Times(CN1,pd,pe,Power(Plus(Times(c,Sqr(pd)),Times(CN1,b,pd,pe),Times(a,Sqr(pe))),CN1),Int(Times(Power(x,Plus(m,Times(CN1,pn))),Power(Plus(a,Times(b,Power(x,pn)),Times(c,Power(x,Times(C2,pn)))),Plus(p,C1)),Power(Plus(pd,Times(pe,Power(x,pn))),CN1)),x))),And(And(And(And(And(And(And(FreeQ(List(a,b,c,pd,pe),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))),NonzeroQ(Plus(Sqr(b),Times(CN1,C4,a,c)))),NonzeroQ(Plus(Times(c,Sqr(pd)),Times(CN1,b,pd,pe),Times(a,Sqr(pe))))),RationalQ(m,pn,p)),Greater(m,C0)),Greater(pn,C0)),Less(p,CN1)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(c_DEFAULT,Power(x_,j_DEFAULT))),p_),Power(Plus(pd_DEFAULT,Times(pe_DEFAULT,Power(x_,pn_))),CN1)),x_Symbol),
    Condition(Plus(Times(Power(Plus(Times(c,Sqr(pd)),Times(a,Sqr(pe))),CN1),Int(Times(Power(x,Plus(m,Times(CN1,pn))),Plus(Times(a,pe),Times(c,pd,Power(x,pn))),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),p)),x)),Times(CN1,pd,pe,Power(Plus(Times(c,Sqr(pd)),Times(a,Sqr(pe))),CN1),Int(Times(Power(x,Plus(m,Times(CN1,pn))),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),Plus(p,C1)),Power(Plus(pd,Times(pe,Power(x,pn))),CN1)),x))),And(And(And(And(And(And(FreeQ(List(a,c,pd,pe),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))),NonzeroQ(Plus(Times(c,Sqr(pd)),Times(a,Sqr(pe))))),RationalQ(m,pn,p)),Greater(m,C0)),Greater(pn,C0)),Less(p,CN1)))),
ISetDelayed(Int(Times(Power(u_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(w_,pn_)),Times(c_DEFAULT,Power(z_,j_DEFAULT))),p_),Power(Plus(pd_DEFAULT,Times(pe_DEFAULT,Power(v_,pn_))),q_DEFAULT)),x_Symbol),
    Condition(Times(Power(u,m),Power(Times(Coefficient(v,x,C1),Power(v,m)),CN1),Subst(Int(Times(Power(x,m),Power(Plus(pd,Times(pe,Power(x,pn))),q),Power(Plus(a,Times(b,Power(x,pn)),Times(c,Power(x,Times(C2,pn)))),p)),x),x,v)),And(And(And(And(FreeQ(List(a,b,c,pd,pe,m,pn,p,q),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))),LinearPairQ(u,v,x)),ZeroQ(Plus(v,Times(CN1,w)))),ZeroQ(Plus(v,Times(CN1,z)))))),
ISetDelayed(Int(Times(Power(u_,m_DEFAULT),Power(Plus(a_,Times(c_DEFAULT,Power(z_,j_DEFAULT))),p_),Power(Plus(pd_DEFAULT,Times(pe_DEFAULT,Power(v_,pn_))),q_DEFAULT)),x_Symbol),
    Condition(Times(Power(u,m),Power(Times(Coefficient(v,x,C1),Power(v,m)),CN1),Subst(Int(Times(Power(x,m),Power(Plus(pd,Times(pe,Power(x,pn))),q),Power(Plus(a,Times(c,Power(x,Times(C2,pn)))),p)),x),x,v)),And(And(And(FreeQ(List(a,c,pd,pe,m,pn,p),x),ZeroQ(Plus(j,Times(CN1,C2,pn)))),LinearPairQ(u,v,x)),ZeroQ(Plus(v,Times(CN1,z)))))),
ISetDelayed(Int(Times(Power(u_,p_DEFAULT),Power(x_,m_DEFAULT),Power(z_,q_DEFAULT)),x_Symbol),
    Condition(Int(Times(Power(x,m),Power(ExpandToSum(z,x),q),Power(ExpandToSum(u,x),p)),x),And(And(And(FreeQ(List(m,p,q),x),BinomialQ(z,x)),TrinomialQ(u,x)),Not(And(BinomialMatchQ(z,x),TrinomialMatchQ(u,x)))))),
ISetDelayed(Int(Times(Power(u_,p_DEFAULT),Power(x_,m_DEFAULT),Power(z_,q_DEFAULT)),x_Symbol),
    Condition(Int(Times(Power(x,m),Power(ExpandToSum(z,x),q),Power(ExpandToSum(u,x),p)),x),And(And(And(FreeQ(List(m,p,q),x),BinomialQ(z,x)),BinomialQ(u,x)),Not(And(BinomialMatchQ(z,x),BinomialMatchQ(u,x))))))
  );
}
