package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.<br />
 * See GIT repository at: <a href="https://bitbucket.org/axelclk/symjaunittests">https://bitbucket.org/axelclk/symjaunittests</a>.
 */
public interface CoshRules {
  final public static IAST RULES = List(
    ISet(Cosh(C0),
      C1),
    ISet(Cosh(Times(QQ(1L,6L),Pi,CI)),
      Times(C1D2,CSqrt3)),
    ISet(Cosh(Times(QQ(1L,5L),Pi,CI)),
      Times(C1D4,Plus(C1,CSqrt5))),
    ISet(Cosh(Times(C1D4,Pi,CI)),
      C1DSqrt2),
    ISet(Cosh(Times(C1D3,Pi,CI)),
      C1D2),
    ISet(Cosh(Times(QQ(2L,5L),Pi,CI)),
      Times(C1D4,Plus(CN1,CSqrt5))),
    ISet(Cosh(Times(C1D2,Pi,CI)),
      C0),
    ISet(Cosh(Times(QQ(3L,5L),Pi,CI)),
      Times(CN1D4,Plus(CN1,CSqrt5))),
    ISet(Cosh(Times(QQ(2L,3L),Pi,CI)),
      CN1D2),
    ISet(Cosh(Times(QQ(3L,4L),Pi,CI)),
      Times(CN1,C1DSqrt2)),
    ISet(Cosh(Times(QQ(4L,5L),Pi,CI)),
      Times(CN1D4,Plus(C1,CSqrt5))),
    ISet(Cosh(Times(QQ(5L,6L),Pi,CI)),
      Times(CN1D2,CSqrt3)),
    ISet(Cosh(Times(CI,Pi)),
      CN1),
    ISet(Cosh(Times(QQ(7L,6L),Pi,CI)),
      Times(CN1D2,CSqrt3)),
    ISet(Cosh(Times(QQ(6L,5L),Pi,CI)),
      Times(CN1D4,Plus(C1,CSqrt5))),
    ISet(Cosh(Times(QQ(5L,4L),Pi,CI)),
      Times(CN1,C1DSqrt2)),
    ISet(Cosh(Times(QQ(4L,3L),Pi,CI)),
      CN1D2),
    ISet(Cosh(Times(QQ(7L,5L),Pi,CI)),
      Times(CN1D4,Plus(CN1,CSqrt5))),
    ISet(Cosh(Times(QQ(8L,5L),Pi,CI)),
      Times(C1D4,Plus(CN1,CSqrt5))),
    ISet(Cosh(Times(QQ(5L,3L),Pi,CI)),
      C1D2),
    ISet(Cosh(Times(QQ(7L,4L),Pi,CI)),
      C1DSqrt2),
    ISet(Cosh(Times(QQ(9L,5L),Pi,CI)),
      Times(C1D4,Plus(C1,CSqrt5))),
    ISet(Cosh(Times(QQ(11L,6L),Pi,CI)),
      Times(C1D2,CSqrt3)),
    ISet(Cosh(Times(C2,Pi,CI)),
      C1),
    ISet(Cosh(CInfinity),
      CInfinity),
    ISet(Cosh(CComplexInfinity),
      Indeterminate)
  );
}