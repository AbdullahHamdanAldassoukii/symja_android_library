<project name="symja_android_library" basedir="." default="main">
	<tstamp>
		<format property="date" pattern="yyyy-MM-dd" />
	</tstamp>

	<property file="build.properties" />

	<property name="src.dir" value="${src.includes}" />
	<!-- "symja-gui\src\main\java"/>  -->

	<property name="build.dir" value="build" />
	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="doc.dir" value="${build.dir}/javadoc" />
	<property name="jar.dir" value="${build.dir}/jar" />

	<property name="main-class" value="org.matheclipse.core.eval.Console" />

	<property name="lib.dir" value="lib" />

	<path id="classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar" />
	</path>


	<target name="clean" description="Delete the &quot;/build/..&quot; target subdirectory">
		<delete dir="${build.dir}" />
	</target>

	<target name="compile" description="Compile the Symja Java sources to subdirectory &quot;/build/classes&quot;" depends="clean">
		<mkdir dir="${classes.dir}" />
		<copy file="apfloat/src/apfloat.properties" todir="${classes.dir}" />
		<copy file="jas/src/main/java/log4j.properties" todir="${classes.dir}" />
		<copydir src="matheclipse-core/src/main/java/ser" dest="${classes.dir}/ser" />
		<copy file="matheclipse-core/src/main/java/System.mep" todir="${classes.dir}" />
		<copy file="matheclipse-core/src/main/java/META-INF/MANIFEST.MF" todir="${classes.dir}/META-INF" />
		<copy file="matheclipse-core/src/main/java/META-INF/services/javax.script.ScriptEngineFactory" todir="${classes.dir}/META-INF/services" />

		<javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" source="1.8" target="1.8" debug="true" includeantruntime="false" />
	</target>

	<!-- Generate javadocs for current project into ${doc.dir} -->
	<target name="doc" depends="compile" description="Generate Javadoc documentation in subdirectory &quot;/build/javadoc&quot;">
		<javadoc sourcepath="${src.dir}" encoding="utf-8" packagenames="org.matheclipse.core.*,org.matheclipse.parser.*" destdir="${doc.dir}" />
	</target>

	<target name="jar" description="Create full &quot;/build/jar/symja-YYYY-MM-DD.jar&quot; file for download" depends="doc">
		<mkdir dir="${jar.dir}" />
		<unjar src="lib/commons-io-1.3.1.jar" dest="${classes.dir}">
			<patternset>
				<exclude name="**/*.java" />
				<exclude name="**/pom*.*" />
			</patternset>
		</unjar>
		<unjar src="lib/commons-logging-1.1.1.jar" dest="${classes.dir}">
			<patternset>
				<exclude name="**/*.java" />
				<exclude name="**/pom*.*" />
			</patternset>
		</unjar>
		<unjar src="lib/jsr305.jar" dest="${classes.dir}">
			<patternset>
				<exclude name="**/*.java" />
			</patternset>
		</unjar>
		<unjar src="lib/log4j-1.2.11.jar " dest="${classes.dir}">
			<patternset>
				<exclude name="**/*.java" />
				<exclude name="**/*.gif" />
			</patternset>
		</unjar>
		<!--		<unjar src="lib/junit-4.6.jar " dest="${classes.dir}"> 
		  <patternset>
            <exclude name="**/*.java"/>
		  	<exclude name="**/*.html"/>
          </patternset>  
		</unjar>   -->

		<jar manifest="${classes.dir}/META-INF/MANIFEST.MF" destfile="${jar.dir}/symja_java8-${date}.jar" basedir="${classes.dir}">

		</jar>
	</target>


	<target name="proguard-library" description="Create shrinked and obfuscated &quot;/build/jar/symja-lib-YYYY-MM-DD.jar&quot; file for download with &quot;/toolslib/proguard.jar&quot;" depends="jar">
		<taskdef resource="proguard/ant/task.properties" classpath="toolslib/proguard.jar" />
		<proguard printmapping="proguard.map" overloadaggressively="on" defaultpackage="" allowaccessmodification="on">
-libraryjars "${java.home}/lib/rt.jar";${lib.dir}/log4j-1.2.11.jar;${lib.dir}/jsr305.jar;${lib.dir}/commons-logging-1.1.1.jar
-injars      ${jar.dir}/symja_java8-${date}.jar
-outjars     ${jar.dir}/symja-lib-${date}.jar
-keepattributes Signature

-keep public class com.google.common.base.FinalizableReference {
    public protected *;
}

-keep public class * extends com.google.common.base.FinalizableReference {
    public protected *;
}

-keep public class * extends org.apache.log4j.Appender {
    public protected *;
}

-keep public class * extends org.apache.log4j.spi.OptionHandler {
    public protected *;
}

-keep public class * implements org.apfloat.spi.BuilderFactory {
    public protected *;
}

-keep public class * implements java.lang.Number {
    public protected *;
}

-keep public class com.google.common.base.Predicate {
    public protected *;
}

-keep public class * implements com.google.common.base.Predicate {
    public protected *;
}

-keep public class com.google.common.base.Function {
    public protected *;
}

-keep public class * implements com.google.common.base.Function {
    public protected *;
}

-keep public class org.apache.commons.math4.Field {
    public protected *;
}

-keep public class * implements org.apache.commons.math4.Field {
    public protected *;
}

-keep public class org.apache.commons.math4.FieldElement {
    public protected *;
}

-keep public class * implements org.apache.commons.math4.FieldElement {
    public protected *;
}

-keepnames class * implements java.io.Serializable

-keepclassmembers class * implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    !static !transient &lt;fields&gt;;
    !private &lt;fields&gt;;
    !private &lt;methods&gt;;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}

-keep public class org.matheclipse.parser.** { 
    public protected *;
}

-keepclassmembernames class org.matheclipse.parser.** {
  java.lang.Class class$(java.lang.String);
  java.lang.Class class$(java.lang.String, boolean);
}

-keepclasseswithmembernames class org.matheclipse.parser.** {
  native &lt;methods&gt;;
}

-keepclassmembers enum org.matheclipse.parser.** {
  public static **[] values();
  public static ** valueOf(java.lang.String);
}

-keepclassmembers class org.matheclipse.parser.** implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}

-keep public class org.matheclipse.core.** { 
    public protected *;
}

-keepclassmembernames class org.matheclipse.core.** {
  java.lang.Class class$(java.lang.String);
  java.lang.Class class$(java.lang.String, boolean);
}

-keepclasseswithmembernames class org.matheclipse.core.** {
  native &lt;methods&gt;;
}

-keepclassmembers enum org.matheclipse.core.** {
  public static **[] values();
  public static ** valueOf(java.lang.String);
}

-keepclassmembers class org.matheclipse.core.** implements java.io.Serializable {
    static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private void writeObject(java.io.ObjectOutputStream);
    private void readObject(java.io.ObjectInputStream);
    java.lang.Object writeReplace();
    java.lang.Object readResolve();
}
</proguard>
</target>

<target name="main" description="Run ANT targets clean and jar"  depends="clean,jar"/>

</project>
